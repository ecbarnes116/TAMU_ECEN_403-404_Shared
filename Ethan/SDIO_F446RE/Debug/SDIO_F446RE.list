
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e21c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800e3f0  0800e3f0  0001e3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eafc  0800eafc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eafc  0800eafc  0001eafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb04  0800eb04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb04  0800eb04  0001eb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb08  0800eb08  0001eb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800eb0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003034  200001dc  0800ece8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003210  0800ece8  00023210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015902  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fa  00000000  00000000  00035b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054f6  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017df2  00000000  00000000  00040486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40d1  00000000  00000000  00058278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b80  00000000  00000000  0013c39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e3d4 	.word	0x0800e3d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800e3d4 	.word	0x0800e3d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb4:	e000      	b.n	8000fb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fb6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f9      	beq.n	8000fb6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_write>:
float delta_audio;
float delta_pressure;
float delta_acc;

// FIXME: Currently not being used
int _write(int file, char *ptr, int length) {
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffc7 	bl	8000f8c <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x16>
	}

	return length;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <bufclear>:
	return i;
}

// FIXME: Currently not being used
// Clear UART buffer for debugging
void bufclear(void) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	e007      	b.n	8001034 <bufclear+0x1c>
		buffer[i] = '\0';
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <bufclear+0x30>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b7f      	cmp	r3, #127	; 0x7f
 8001038:	ddf4      	ble.n	8001024 <bufclear+0xc>
	}
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200006ac 	.word	0x200006ac

0800104c <SDbufclear>:

void SDbufclear(void) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e007      	b.n	8001068 <SDbufclear+0x1c>
		SD_buffer[i] = '\0';
 8001058:	4a09      	ldr	r2, [pc, #36]	; (8001080 <SDbufclear+0x34>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800106e:	4293      	cmp	r3, r2
 8001070:	ddf2      	ble.n	8001058 <SDbufclear+0xc>
	}
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	2000072c 	.word	0x2000072c

08001084 <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when ADC buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	dmaFull = 0;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

	// Set pointer to beginning of buffer to starting reading first half
	fromADC_Ptr = &adc_data[0];
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001096:	601a      	str	r2, [r3, #0]
	dataReady = 1;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200010f1 	.word	0x200010f1
 80010b0:	200006a8 	.word	0x200006a8
 80010b4:	20000388 	.word	0x20000388
 80010b8:	200010f0 	.word	0x200010f0

080010bc <HAL_ADC_ConvCpltCallback>:

// Called when ADC buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	// Set pointer to halfway point of buffer to starting reading second half
	fromADC_Ptr = &adc_data[ADC_BUFFER_SIZE/2];
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_ADC_ConvCpltCallback+0x28>)
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80010c8:	601a      	str	r2, [r3, #0]

	dmaFull = 1;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_ADC_ConvCpltCallback+0x30>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
	dataReady = 1;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x34>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200006a8 	.word	0x200006a8
 80010e8:	20000518 	.word	0x20000518
 80010ec:	200010f1 	.word	0x200010f1
 80010f0:	200010f0 	.word	0x200010f0

080010f4 <writeSD>:




// Write full SD buffer to adc_data.csv buffer file
void writeSD(const void* buffer, uint16_t len) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
	// Moves the file read/write pointer to the end of the file
	fresult = f_lseek(&fil, f_size(&fil));
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <writeSD+0x3c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4619      	mov	r1, r3
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <writeSD+0x3c>)
 8001108:	f008 fffc 	bl	800a104 <f_lseek>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <writeSD+0x40>)
 8001112:	701a      	strb	r2, [r3, #0]

	// Write the buffer (data worth half of ADC buffer) to the file
	fresult = f_write(&fil, buffer, len, &bw);
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <writeSD+0x44>)
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <writeSD+0x3c>)
 800111c:	f008 fdb6 	bl	8009c8c <f_write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <writeSD+0x40>)
 8001126:	701a      	strb	r2, [r3, #0]
	// f_sync flushes the cached information of a writing file
	//
	// Performs the same process as f_close function but the file is left opened
	// and can continue read/write/seek operations to the file
//	fresult = f_sync(&fil);
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20002128 	.word	0x20002128
 8001134:	20003170 	.word	0x20003170
 8001138:	20003174 	.word	0x20003174
 800113c:	00000000 	.word	0x00000000

08001140 <processData>:




// Main function to receive data, split it up by sensor, get real values, find deltas, and build SD buffer
void processData() {
 8001140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001144:	b091      	sub	sp, #68	; 0x44
 8001146:	af0a      	add	r7, sp, #40	; 0x28
	// Keeps track of which channel is being read from (which sensor)
	uint8_t channel = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
	uint16_t write_len = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	827b      	strh	r3, [r7, #18]

	// Keeps track of the "global sample" (i.e, every 4 ADC readings)
	uint8_t sample_index = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	75bb      	strb	r3, [r7, #22]

	// Create empty buffer to add sample readings to
	snprintf(SD_buffer, SD_BUFFER_SIZE, "%s", "\0"); // Empty char (null char)
 8001154:	4bba      	ldr	r3, [pc, #744]	; (8001440 <processData+0x300>)
 8001156:	4abb      	ldr	r2, [pc, #748]	; (8001444 <processData+0x304>)
 8001158:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800115c:	48ba      	ldr	r0, [pc, #744]	; (8001448 <processData+0x308>)
 800115e:	f00a fb43 	bl	800b7e8 <sniprintf>

	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 8001162:	2300      	movs	r3, #0
 8001164:	757b      	strb	r3, [r7, #21]
 8001166:	e266      	b.n	8001636 <processData+0x4f6>
		// Store the new value read into its respective array
		// audio_arr 	= [0, 30, 56, 70, 56, 30, 0]
		// pressure_arr = [0, 30, 56, 70, 56, 30, 0]
		//
		// index 0 of audio_arr corresponds with the same reading for pressure_arr
		if	   ((i % 4) == 0) {
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d14e      	bne.n	8001212 <processData+0xd2>
			// SPL = 20log10(P/Pref)
			// P:    pressure (Pa)
			// Pref: reference pressure in air 20x10-6 (Pa)
			//
			// SPL = 20log10(A/Pref) (dB)
			current_audio = fromADC_Ptr[i];
 8001174:	4bb5      	ldr	r3, [pc, #724]	; (800144c <processData+0x30c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118a:	4bb1      	ldr	r3, [pc, #708]	; (8001450 <processData+0x310>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
			current_audio = (current_audio * REFERENCE_VOLTAGE_CONVERSION) / AUDIO_REFERENCE;
 8001190:	4baf      	ldr	r3, [pc, #700]	; (8001450 <processData+0x310>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9f7 	bl	8000588 <__aeabi_f2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4bad      	ldr	r3, [pc, #692]	; (8001454 <processData+0x314>)
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4ba9      	ldr	r3, [pc, #676]	; (8001458 <processData+0x318>)
 80011b2:	f7ff fb6b 	bl	800088c <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fd13 	bl	8000be8 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4aa2      	ldr	r2, [pc, #648]	; (8001450 <processData+0x310>)
 80011c6:	6013      	str	r3, [r2, #0]
			current_audio = 20 * log10(current_audio/P_REF);
 80011c8:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <processData+0x310>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9db 	bl	8000588 <__aeabi_f2d>
 80011d2:	a395      	add	r3, pc, #596	; (adr r3, 8001428 <processData+0x2e8>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fb58 	bl	800088c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	ec43 2b17 	vmov	d7, r2, r3
 80011e4:	eeb0 0a47 	vmov.f32	s0, s14
 80011e8:	eef0 0a67 	vmov.f32	s1, s15
 80011ec:	f00c fd88 	bl	800dd00 <log10>
 80011f0:	ec51 0b10 	vmov	r0, r1, d0
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b98      	ldr	r3, [pc, #608]	; (800145c <processData+0x31c>)
 80011fa:	f7ff fa1d 	bl	8000638 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fcef 	bl	8000be8 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	4a90      	ldr	r2, [pc, #576]	; (8001450 <processData+0x310>)
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e0d1      	b.n	80013b6 <processData+0x276>
			// Write this value to the temp string when current_audio is written

			// current_time = some_function_to_get_time_in_micro_seconds()
			// time_arr[sample_index] = current_time
		}
		else if((i % 4) == 1) {
 8001212:	7d7b      	ldrb	r3, [r7, #21]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d133      	bne.n	8001286 <processData+0x146>
			// V = value/1200 (V)
			// V = (value/1200)*1000 (mV)
			// V = value * voltage_conversion (mV)
			// P = V/14.62 (mV*(kPa/mV))
			// P = (value*voltage_convsersion)/14.62 (kPa)
			current_pressure = fromADC_Ptr[i];
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <processData+0x30c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001234:	4b8a      	ldr	r3, [pc, #552]	; (8001460 <processData+0x320>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
			current_pressure = (current_pressure * REFERENCE_VOLTAGE_CONVERSION) / PRESSURE_REFERENCE;
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <processData+0x320>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f9a2 	bl	8000588 <__aeabi_f2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b82      	ldr	r3, [pc, #520]	; (8001454 <processData+0x314>)
 800124a:	f7ff f9f5 	bl	8000638 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b7f      	ldr	r3, [pc, #508]	; (8001458 <processData+0x318>)
 800125c:	f7ff fb16 	bl	800088c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	a371      	add	r3, pc, #452	; (adr r3, 8001430 <processData+0x2f0>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff fb0d 	bl	800088c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcb5 	bl	8000be8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	4a77      	ldr	r2, [pc, #476]	; (8001460 <processData+0x320>)
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e097      	b.n	80013b6 <processData+0x276>

//			pressure_arr[sample_index] = current_pressure;

		}
		else if((i % 4) == 2) {
 8001286:	7d7b      	ldrb	r3, [r7, #21]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d133      	bne.n	80012fa <processData+0x1ba>
			// V = value/1200 (V)
			// V = (value/1200)*1000 (mV)
			// V = value * voltage_conversion (mV)
			// a = V/50.00 (mV*(g/mV))
			// a = (value*voltage_convsersion)/50.00 (g)
			current_acc_x = fromADC_Ptr[i];
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <processData+0x30c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <processData+0x324>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
			current_acc_x = (current_acc_x * REFERENCE_VOLTAGE_CONVERSION) / ACC_REFERENCE_X;
 80012ae:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <processData+0x324>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f968 	bl	8000588 <__aeabi_f2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b65      	ldr	r3, [pc, #404]	; (8001454 <processData+0x314>)
 80012be:	f7ff f9bb 	bl	8000638 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b62      	ldr	r3, [pc, #392]	; (8001458 <processData+0x318>)
 80012d0:	f7ff fadc 	bl	800088c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <processData+0x328>)
 80012e2:	f7ff fad3 	bl	800088c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fc7b 	bl	8000be8 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <processData+0x324>)
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e05d      	b.n	80013b6 <processData+0x276>
		}
		else if((i % 4) == 3) {
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d157      	bne.n	80013b6 <processData+0x276>
			// V = value/1200 (V)
			// V = (value/1200)*1000 (mV)
			// V = value * voltage_conversion (mV)
			// a = V/48.97 (mV*(g/mV))
			// a = (value*voltage_convsersion)/48.97 (g)
			current_acc_y = fromADC_Ptr[i];
 8001306:	4b51      	ldr	r3, [pc, #324]	; (800144c <processData+0x30c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	7d7b      	ldrb	r3, [r7, #21]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <processData+0x32c>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
			current_acc_y = (current_acc_y * REFERENCE_VOLTAGE_CONVERSION) / ACC_REFERENCE_Y;
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <processData+0x32c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <processData+0x314>)
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <processData+0x318>)
 8001344:	f7ff faa2 	bl	800088c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	a339      	add	r3, pc, #228	; (adr r3, 8001438 <processData+0x2f8>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff fa99 	bl	800088c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc41 	bl	8000be8 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4a40      	ldr	r2, [pc, #256]	; (800146c <processData+0x32c>)
 800136a:	6013      	str	r3, [r2, #0]

			// Get magnitude of acceleration in x and y axes
			current_acc = sqrt((current_acc_x*current_acc_x) + (current_acc_y*current_acc_y));
 800136c:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <processData+0x324>)
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <processData+0x324>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <processData+0x32c>)
 800137e:	edd3 6a00 	vldr	s13, [r3]
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <processData+0x32c>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	ee17 0a90 	vmov	r0, s15
 8001394:	f7ff f8f8 	bl	8000588 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b10 	vmov	d0, r2, r3
 80013a0:	f00c fcec 	bl	800dd7c <sqrt>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fc1c 	bl	8000be8 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <processData+0x330>)
 80013b4:	6013      	str	r3, [r2, #0]
//			current_acc = current_acc_x;
//			acc_arr[sample_index] = current_acc;
		}

		// Treat every 4th reading like one reading
		if((i % 4) == 3) {
 80013b6:	7d7b      	ldrb	r3, [r7, #21]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b03      	cmp	r3, #3
 80013c0:	f040 812a 	bne.w	8001618 <processData+0x4d8>
			// Only want to get deltas every 4 readings on the 4th reading because all values
			// only update after 4 total readings from the ADC (4 values, one per reading)
			if(current_audio > previous_audio) {
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <processData+0x310>)
 80013c6:	ed93 7a00 	vldr	s14, [r3]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <processData+0x334>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dd0b      	ble.n	80013f2 <processData+0x2b2>
				delta_audio = current_audio - previous_audio;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <processData+0x310>)
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <processData+0x334>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <processData+0x338>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
 80013f0:	e003      	b.n	80013fa <processData+0x2ba>
			}
			else {
				delta_audio = 0;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <processData+0x338>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
			}
			if(current_pressure > previous_pressure) {
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <processData+0x320>)
 80013fc:	ed93 7a00 	vldr	s14, [r3]
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <processData+0x33c>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	dd39      	ble.n	8001484 <processData+0x344>
				delta_pressure = current_pressure - previous_pressure;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <processData+0x320>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <processData+0x33c>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <processData+0x340>)
 8001422:	edc3 7a00 	vstr	s15, [r3]
 8001426:	e031      	b.n	800148c <processData+0x34c>
 8001428:	88e368f1 	.word	0x88e368f1
 800142c:	3ef4f8b5 	.word	0x3ef4f8b5
 8001430:	a3d70a3d 	.word	0xa3d70a3d
 8001434:	402d3d70 	.word	0x402d3d70
 8001438:	f5c28f5c 	.word	0xf5c28f5c
 800143c:	40487c28 	.word	0x40487c28
 8001440:	0800e3f0 	.word	0x0800e3f0
 8001444:	0800e3f4 	.word	0x0800e3f4
 8001448:	2000072c 	.word	0x2000072c
 800144c:	200006a8 	.word	0x200006a8
 8001450:	20003188 	.word	0x20003188
 8001454:	408f4000 	.word	0x408f4000
 8001458:	4092c000 	.word	0x4092c000
 800145c:	40340000 	.word	0x40340000
 8001460:	2000318c 	.word	0x2000318c
 8001464:	20003194 	.word	0x20003194
 8001468:	40490000 	.word	0x40490000
 800146c:	20003198 	.word	0x20003198
 8001470:	20003190 	.word	0x20003190
 8001474:	2000319c 	.word	0x2000319c
 8001478:	200031b0 	.word	0x200031b0
 800147c:	200031a0 	.word	0x200031a0
 8001480:	200031b4 	.word	0x200031b4
			}
			else {
				delta_pressure = 0;
 8001484:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <processData+0x530>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
			}
			if(current_acc > previous_acc) {
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <processData+0x534>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b79      	ldr	r3, [pc, #484]	; (8001678 <processData+0x538>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd0b      	ble.n	80014ba <processData+0x37a>
				delta_acc = current_acc - previous_acc;
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <processData+0x534>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b73      	ldr	r3, [pc, #460]	; (8001678 <processData+0x538>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <processData+0x53c>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
 80014b8:	e003      	b.n	80014c2 <processData+0x382>
			}
			else {
				delta_acc = 0;
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <processData+0x53c>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			}

			// One day this needs to become a function call to a more robust algorithm
			// Do explosion detection here
			if((delta_audio >= THRESHOLD_AUDIO) || (delta_pressure >= THRESHOLD_PRESSURE) || (delta_acc >= THRESHOLD_ACCELERATION)) {
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <processData+0x540>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f85e 	bl	8000588 <__aeabi_f2d>
 80014cc:	a366      	add	r3, pc, #408	; (adr r3, 8001668 <processData+0x528>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff fb37 	bl	8000b44 <__aeabi_dcmpge>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d119      	bne.n	8001510 <processData+0x3d0>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <processData+0x530>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f851 	bl	8000588 <__aeabi_f2d>
 80014e6:	a360      	add	r3, pc, #384	; (adr r3, 8001668 <processData+0x528>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff fb2a 	bl	8000b44 <__aeabi_dcmpge>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <processData+0x3d0>
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <processData+0x53c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_f2d>
 8001500:	a359      	add	r3, pc, #356	; (adr r3, 8001668 <processData+0x528>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff fb1d 	bl	8000b44 <__aeabi_dcmpge>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <processData+0x3dc>
				explosionDetected = 1;
 8001510:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <processData+0x544>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
				SAVE_BUFFER_FILE = 1;
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <processData+0x548>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
			}

			// Edge case for very first ADC sample (first 4 readings) where previous information does not exist
			if((i <= 3) && (dmaFull == 0) && (cluster == 0) && (batch == 0)) {
 800151c:	7d7b      	ldrb	r3, [r7, #21]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d81e      	bhi.n	8001560 <processData+0x420>
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <processData+0x54c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d119      	bne.n	8001560 <processData+0x420>
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <processData+0x550>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d115      	bne.n	8001560 <processData+0x420>
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <processData+0x554>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d111      	bne.n	8001560 <processData+0x420>
				delta_audio = 0;
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <processData+0x540>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
				delta_pressure = 0;
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <processData+0x530>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
				delta_acc = 0;
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <processData+0x53c>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

				explosionDetected = 0;
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <processData+0x544>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				SAVE_BUFFER_FILE = 0;
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <processData+0x548>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
			}

			// FIXME: Figure out how to explain this
		    // Append new string using length of previously added string
			snprintf(SD_buffer + strlen(SD_buffer),
 8001560:	484d      	ldr	r0, [pc, #308]	; (8001698 <processData+0x558>)
 8001562:	f7fe fe55 	bl	8000210 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <processData+0x558>)
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
					SD_BUFFER_SIZE - strlen(SD_buffer),
 800156e:	484a      	ldr	r0, [pc, #296]	; (8001698 <processData+0x558>)
 8001570:	f7fe fe4e 	bl	8000210 <strlen>
 8001574:	4603      	mov	r3, r0
			snprintf(SD_buffer + strlen(SD_buffer),
 8001576:	f5c3 641c 	rsb	r4, r3, #2496	; 0x9c0
 800157a:	3404      	adds	r4, #4
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <processData+0x554>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <processData+0x550>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <processData+0x544>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <processData+0x55c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fff8 	bl	8000588 <__aeabi_f2d>
 8001598:	4680      	mov	r8, r0
 800159a:	4689      	mov	r9, r1
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <processData+0x560>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fff1 	bl	8000588 <__aeabi_f2d>
 80015a6:	4682      	mov	sl, r0
 80015a8:	468b      	mov	fp, r1
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <processData+0x534>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffea 	bl	8000588 <__aeabi_f2d>
 80015b4:	4605      	mov	r5, r0
 80015b6:	460e      	mov	r6, r1
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <processData+0x540>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffe3 	bl	8000588 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015ca:	e9cd 5606 	strd	r5, r6, [sp, #24]
 80015ce:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	9201      	str	r2, [sp, #4]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <processData+0x564>)
 80015e2:	4621      	mov	r1, r4
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f00a f8ff 	bl	800b7e8 <sniprintf>
					"%d,%d,%d,%.3f,%.3f,%.3f,d = %.3f\r\n",
					batch, cluster, explosionDetected, current_audio, current_pressure, current_acc, delta_audio);

			// The current samples will be the "previous" samples for the next samples
			// These are placed in this loop for the same reason that the deltas are placed here
			previous_audio = current_audio;
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <processData+0x55c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <processData+0x568>)
 80015f0:	6013      	str	r3, [r2, #0]
			previous_pressure = current_pressure;
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <processData+0x560>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <processData+0x56c>)
 80015f8:	6013      	str	r3, [r2, #0]
			previous_acc = current_acc;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <processData+0x534>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <processData+0x538>)
 8001600:	6013      	str	r3, [r2, #0]

			previous_acc_x = current_acc_x;
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <processData+0x570>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <processData+0x574>)
 8001608:	6013      	str	r3, [r2, #0]
			previous_acc_y = current_acc_y;
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <processData+0x578>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <processData+0x57c>)
 8001610:	6013      	str	r3, [r2, #0]

			sample_index++;
 8001612:	7dbb      	ldrb	r3, [r7, #22]
 8001614:	3301      	adds	r3, #1
 8001616:	75bb      	strb	r3, [r7, #22]
		}

		// Use Friedlander waveform to estimate how long the explosion will last for,
		// then set flag to 0 when time reaches that value
		explosionDetected = 0;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <processData+0x544>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]

		// Increment channel counter to read from next channel
		if(channel < 3) {
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d803      	bhi.n	800162c <processData+0x4ec>
			channel += 1;
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	3301      	adds	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
 800162a:	e001      	b.n	8001630 <processData+0x4f0>
		}
		else {
			channel = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 8001630:	7d7b      	ldrb	r3, [r7, #21]
 8001632:	3301      	adds	r3, #1
 8001634:	757b      	strb	r3, [r7, #21]
 8001636:	7d7b      	ldrb	r3, [r7, #21]
 8001638:	2bc7      	cmp	r3, #199	; 0xc7
 800163a:	f67f ad95 	bls.w	8001168 <processData+0x28>
		}
	}
	// Get length of huge buffer to be written to SD card
	write_len = strlen(SD_buffer);
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <processData+0x558>)
 8001640:	f7fe fde6 	bl	8000210 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	827b      	strh	r3, [r7, #18]
	// Finally, write huge buffer to SD card
	writeSD(SD_buffer, write_len);
 8001648:	8a7b      	ldrh	r3, [r7, #18]
 800164a:	4619      	mov	r1, r3
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <processData+0x558>)
 800164e:	f7ff fd51 	bl	80010f4 <writeSD>

	// Clear SD_buffer so new data can be written (next half of ADC buffer)
	SDbufclear();
 8001652:	f7ff fcfb 	bl	800104c <SDbufclear>

	dataReady = 0;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <processData+0x580>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001666:	bf00      	nop
 8001668:	9999999a 	.word	0x9999999a
 800166c:	3fb99999 	.word	0x3fb99999
 8001670:	200031b4 	.word	0x200031b4
 8001674:	20003190 	.word	0x20003190
 8001678:	200031a4 	.word	0x200031a4
 800167c:	200031b8 	.word	0x200031b8
 8001680:	200031b0 	.word	0x200031b0
 8001684:	2000317c 	.word	0x2000317c
 8001688:	2000317d 	.word	0x2000317d
 800168c:	200010f1 	.word	0x200010f1
 8001690:	20003178 	.word	0x20003178
 8001694:	2000317a 	.word	0x2000317a
 8001698:	2000072c 	.word	0x2000072c
 800169c:	20003188 	.word	0x20003188
 80016a0:	2000318c 	.word	0x2000318c
 80016a4:	0800e3f8 	.word	0x0800e3f8
 80016a8:	2000319c 	.word	0x2000319c
 80016ac:	200031a0 	.word	0x200031a0
 80016b0:	20003194 	.word	0x20003194
 80016b4:	200031a8 	.word	0x200031a8
 80016b8:	20003198 	.word	0x20003198
 80016bc:	200031ac 	.word	0x200031ac
 80016c0:	200010f0 	.word	0x200010f0

080016c4 <saveBufferFile>:




// Renames buffer file to save out the data from the most recent buffer file
void saveBufferFile() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
	char file_name[20];

	// Do something here
	fresult = f_close(&fil);
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <saveBufferFile+0x4c>)
 80016cc:	f008 fcf0 	bl	800a0b0 <f_close>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <saveBufferFile+0x50>)
 80016d6:	701a      	strb	r2, [r3, #0]

	// FIXME: This is not the proper way to get the strlen of the file name, actually fix this
	// need to have variable length string for file name (depends on batch #)
	snprintf(file_name, BUFFER_SIZE, "BATCH_%d.csv", batch);
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <saveBufferFile+0x54>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	1d38      	adds	r0, r7, #4
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <saveBufferFile+0x58>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	f00a f881 	bl	800b7e8 <sniprintf>
	snprintf(file_name, strlen(file_name)+1, "BATCH_%d.csv", batch);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fd91 	bl	8000210 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <saveBufferFile+0x54>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	1d38      	adds	r0, r7, #4
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <saveBufferFile+0x58>)
 80016fa:	f00a f875 	bl	800b7e8 <sniprintf>

	f_rename("adc_data.csv", file_name);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <saveBufferFile+0x5c>)
 8001704:	f008 ff5b 	bl	800a5be <f_rename>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20002128 	.word	0x20002128
 8001714:	20003170 	.word	0x20003170
 8001718:	2000317a 	.word	0x2000317a
 800171c:	0800e41c 	.word	0x0800e41c
 8001720:	0800e42c 	.word	0x0800e42c

08001724 <setupBufferFile>:



// Create new buffer file when most recent buffer file is renamed to be saved out
// Same used in main to first create adc_data.csv buffer file
void setupBufferFile() {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	char *name = "adc_data.csv";
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <setupBufferFile+0x84>)
 800172c:	607b      	str	r3, [r7, #4]

	fresult = f_stat(name, &fno);
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <setupBufferFile+0x88>)
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f008 ff0b 	bl	800a54c <f_stat>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <setupBufferFile+0x8c>)
 800173c:	701a      	strb	r2, [r3, #0]

	// Do not create (or overwrite) if file already exists
	if (fresult == FR_OK) {
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <setupBufferFile+0x8c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <setupBufferFile+0x30>
		printf("*%s* already exists!!!\n",name);
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <setupBufferFile+0x90>)
 800174a:	f009 ffbf 	bl	800b6cc <iprintf>
		bufclear();
 800174e:	f7ff fc63 	bl	8001018 <bufclear>
 8001752:	e008      	b.n	8001766 <setupBufferFile+0x42>
	}
	else {
		// FA_CREATE_ALWAYS
		// Creates a new file. If the file is existing, it will be truncated and overwritten.
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001754:	220b      	movs	r2, #11
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4817      	ldr	r0, [pc, #92]	; (80017b8 <setupBufferFile+0x94>)
 800175a:	f008 f8cb 	bl	80098f4 <f_open>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <setupBufferFile+0x8c>)
 8001764:	701a      	strb	r2, [r3, #0]
	}

	if(fresult != FR_OK) {
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <setupBufferFile+0x8c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <setupBufferFile+0x5e>
		printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <setupBufferFile+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	4811      	ldr	r0, [pc, #68]	; (80017bc <setupBufferFile+0x98>)
 8001778:	f009 ffa8 	bl	800b6cc <iprintf>
		bufclear();
 800177c:	f7ff fc4c 	bl	8001018 <bufclear>
 8001780:	e005      	b.n	800178e <setupBufferFile+0x6a>
	}
	else {
		printf ("*%s* created successfully\n",name);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	480e      	ldr	r0, [pc, #56]	; (80017c0 <setupBufferFile+0x9c>)
 8001786:	f009 ffa1 	bl	800b6cc <iprintf>
		bufclear();
 800178a:	f7ff fc45 	bl	8001018 <bufclear>
	}

	// FIXME: This can be added to the SD buffer before the first sample is appended
	// This will mean that each buffer file is only written to once every time it is opened instead of twice
	// Write first line to file - column names
	fresult = f_printf(&fil, "batch,cluster,explosion,audio,pressure,acceleration,delta_audio\r\n");
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <setupBufferFile+0xa0>)
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <setupBufferFile+0x94>)
 8001792:	f009 f885 	bl	800a8a0 <f_printf>
 8001796:	4603      	mov	r3, r0
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <setupBufferFile+0x8c>)
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800e42c 	.word	0x0800e42c
 80017ac:	20003158 	.word	0x20003158
 80017b0:	20003170 	.word	0x20003170
 80017b4:	0800e43c 	.word	0x0800e43c
 80017b8:	20002128 	.word	0x20002128
 80017bc:	0800e454 	.word	0x0800e454
 80017c0:	0800e478 	.word	0x0800e478
 80017c4:	0800e494 	.word	0x0800e494

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 fe8b 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f943 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 faf7 	bl	8001dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017da:	f000 fad5 	bl	8001d88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017de:	f000 faa9 	bl	8001d34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017e2:	f000 f9b1 	bl	8001b48 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 80017e6:	f000 fa85 	bl	8001cf4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80017ea:	f005 fffd 	bl	80077e8 <MX_FATFS_Init>
  MX_RTC_Init();
 80017ee:	f000 fa27 	bl	8001c40 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA; Begin filling ADC buffer
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);
 80017f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017f6:	497e      	ldr	r1, [pc, #504]	; (80019f0 <main+0x228>)
 80017f8:	487e      	ldr	r0, [pc, #504]	; (80019f4 <main+0x22c>)
 80017fa:	f000 ff4f 	bl	800269c <HAL_ADC_Start_DMA>

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	497d      	ldr	r1, [pc, #500]	; (80019f8 <main+0x230>)
 8001802:	487e      	ldr	r0, [pc, #504]	; (80019fc <main+0x234>)
 8001804:	f008 f830 	bl	8009868 <f_mount>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <main+0x238>)
 800180e:	701a      	strb	r2, [r3, #0]

  // Check if SD card was mounted successfully
  if(fresult != FR_OK){
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <main+0x238>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <main+0x58>
	  printf("ERROR in mounting SD card...\n");
 8001818:	487a      	ldr	r0, [pc, #488]	; (8001a04 <main+0x23c>)
 800181a:	f009 ffdd 	bl	800b7d8 <puts>
 800181e:	e002      	b.n	8001826 <main+0x5e>
  }
  else {
	  printf("SD card mounted successfully...\n");
 8001820:	4879      	ldr	r0, [pc, #484]	; (8001a08 <main+0x240>)
 8001822:	f009 ffd9 	bl	800b7d8 <puts>
//  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  // Turn this setup process into a function
  char *name = "adc_data.csv";
 8001826:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <main+0x244>)
 8001828:	60fb      	str	r3, [r7, #12]
  char *column_names = "batch,cluster,explosion,audio,pressure,acceleration,delta_audio\r\n";
 800182a:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <main+0x248>)
 800182c:	60bb      	str	r3, [r7, #8]

  fresult = f_stat(name, &fno);
 800182e:	4979      	ldr	r1, [pc, #484]	; (8001a14 <main+0x24c>)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f008 fe8b 	bl	800a54c <f_stat>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <main+0x238>)
 800183c:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <main+0x238>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <main+0x8c>
	  printf("*%s* already exists!!!\n",name);
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4873      	ldr	r0, [pc, #460]	; (8001a18 <main+0x250>)
 800184a:	f009 ff3f 	bl	800b6cc <iprintf>
	  bufclear();
 800184e:	f7ff fbe3 	bl	8001018 <bufclear>
 8001852:	e008      	b.n	8001866 <main+0x9e>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001854:	220b      	movs	r2, #11
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	4870      	ldr	r0, [pc, #448]	; (8001a1c <main+0x254>)
 800185a:	f008 f84b 	bl	80098f4 <f_open>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <main+0x238>)
 8001864:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 8001866:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <main+0x238>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <main+0xba>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <main+0x238>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4619      	mov	r1, r3
 8001876:	486a      	ldr	r0, [pc, #424]	; (8001a20 <main+0x258>)
 8001878:	f009 ff28 	bl	800b6cc <iprintf>
		  bufclear();
 800187c:	f7ff fbcc 	bl	8001018 <bufclear>
 8001880:	e005      	b.n	800188e <main+0xc6>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	4867      	ldr	r0, [pc, #412]	; (8001a24 <main+0x25c>)
 8001886:	f009 ff21 	bl	800b6cc <iprintf>
		  bufclear();
 800188a:	f7ff fbc5 	bl	8001018 <bufclear>
	  }

  fresult = f_printf(&fil, "batch,cluster,explosion,audio,pressure,acceleration,delta_audio\r\n");
 800188e:	4960      	ldr	r1, [pc, #384]	; (8001a10 <main+0x248>)
 8001890:	4862      	ldr	r0, [pc, #392]	; (8001a1c <main+0x254>)
 8001892:	f009 f805 	bl	800a8a0 <f_printf>
 8001896:	4603      	mov	r3, r0
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <main+0x238>)
 800189c:	701a      	strb	r2, [r3, #0]

  // Get starting tick value (start timer)
  int start = HAL_GetTick();
 800189e:	f000 fe89 	bl	80025b4 <HAL_GetTick>
 80018a2:	4603      	mov	r3, r0
 80018a4:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(dataReady) {
 80018a6:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <main+0x260>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <main+0xf8>

		  // Read ADC_BUFFER_SIZE/2 data points from ADC and add to buffer
		  processData();
 80018b0:	f7ff fc46 	bl	8001140 <processData>
		  // Increment cluster count
		  cluster++;
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <main+0x264>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <main+0x264>)
 80018be:	701a      	strb	r2, [r3, #0]

	  	  }

	  // Stop when cluster is a certain value (leads to unmount SD card)
	  // FIXME: UNDO THIS TO SHOW THRESHOLD ACTIVATION WORKS
	  if((cluster >= CLUSTER_SIZE) && SAVE_BUFFER_FILE) {
 80018c0:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <main+0x264>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2bc7      	cmp	r3, #199	; 0xc7
 80018c6:	d928      	bls.n	800191a <main+0x152>
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <main+0x268>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d024      	beq.n	800191a <main+0x152>
		  saveBufferStart = HAL_GetTick();
 80018d0:	f000 fe70 	bl	80025b4 <HAL_GetTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <main+0x26c>)
 80018da:	601a      	str	r2, [r3, #0]
		  saveBufferFile();
 80018dc:	f7ff fef2 	bl	80016c4 <saveBufferFile>
		  setupBufferFile();
 80018e0:	f7ff ff20 	bl	8001724 <setupBufferFile>
		  saveBufferStop = HAL_GetTick();
 80018e4:	f000 fe66 	bl	80025b4 <HAL_GetTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <main+0x270>)
 80018ee:	601a      	str	r2, [r3, #0]

		  // Shows total time wasted by saving a file
		  printf("Time wasted making saving buffer data and creating new buffer file: %d\r\n", saveBufferStop-saveBufferStart);
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <main+0x270>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <main+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	484f      	ldr	r0, [pc, #316]	; (8001a3c <main+0x274>)
 80018fe:	f009 fee5 	bl	800b6cc <iprintf>

		  cluster = 0;
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <main+0x264>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
		  SAVE_BUFFER_FILE = 0;
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <main+0x268>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

		  batch++;
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <main+0x278>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <main+0x278>)
 8001918:	801a      	strh	r2, [r3, #0]
//	  }

	  // This will eventually turn into an external interrupt from the user
	  // pressing a button
	  // Number of files saved to SD card
	  if(batch >= 10) {
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <main+0x278>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	2b09      	cmp	r3, #9
 8001920:	d800      	bhi.n	8001924 <main+0x15c>
	  if(dataReady) {
 8001922:	e7c0      	b.n	80018a6 <main+0xde>
		  break;
 8001924:	bf00      	nop
	  }

  }

  int stop = HAL_GetTick();
 8001926:	f000 fe45 	bl	80025b4 <HAL_GetTick>
 800192a:	4603      	mov	r3, r0
 800192c:	603b      	str	r3, [r7, #0]

  printf("Total time to write %d samples to SD card (WITH printf): %d ms\n", (ADC_BUFFER_SIZE/8)*CLUSTER_SIZE*batch, (stop - start));
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <main+0x278>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f242 7310 	movw	r3, #10000	; 0x2710
 8001938:	fb03 f102 	mul.w	r1, r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	461a      	mov	r2, r3
 8001944:	483f      	ldr	r0, [pc, #252]	; (8001a44 <main+0x27c>)
 8001946:	f009 fec1 	bl	800b6cc <iprintf>
  printf("Samples per second: %.3f\n", 1.0*(ADC_BUFFER_SIZE/8)*CLUSTER_SIZE*batch/(stop - start));
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <main+0x278>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe08 	bl	8000564 <__aeabi_i2d>
 8001954:	a324      	add	r3, pc, #144	; (adr r3, 80019e8 <main+0x220>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fe6d 	bl	8000638 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4614      	mov	r4, r2
 8001964:	461d      	mov	r5, r3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fdf9 	bl	8000564 <__aeabi_i2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe ff87 	bl	800088c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4831      	ldr	r0, [pc, #196]	; (8001a48 <main+0x280>)
 8001984:	f009 fea2 	bl	800b6cc <iprintf>

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 8001988:	481a      	ldr	r0, [pc, #104]	; (80019f4 <main+0x22c>)
 800198a:	f000 ff97 	bl	80028bc <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <main+0x254>)
 8001990:	f008 fb8e 	bl	800a0b0 <f_close>
  if (fresult != FR_OK) {
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <main+0x238>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <main+0x1e6>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <main+0x238>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4829      	ldr	r0, [pc, #164]	; (8001a4c <main+0x284>)
 80019a6:	f009 fe91 	bl	800b6cc <iprintf>
	  bufclear();
 80019aa:	f7ff fb35 	bl	8001018 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	4927      	ldr	r1, [pc, #156]	; (8001a50 <main+0x288>)
 80019b2:	2000      	movs	r0, #0
 80019b4:	f007 ff58 	bl	8009868 <f_mount>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <main+0x238>)
 80019be:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <main+0x238>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <main+0x20c>
	  printf("SD card unmounted successfully...\n");
 80019c8:	4822      	ldr	r0, [pc, #136]	; (8001a54 <main+0x28c>)
 80019ca:	f009 ff05 	bl	800b7d8 <puts>
	  bufclear();
 80019ce:	f7ff fb23 	bl	8001018 <bufclear>
 80019d2:	e004      	b.n	80019de <main+0x216>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 80019d4:	4820      	ldr	r0, [pc, #128]	; (8001a58 <main+0x290>)
 80019d6:	f009 feff 	bl	800b7d8 <puts>
	  bufclear();
 80019da:	f7ff fb1d 	bl	8001018 <bufclear>
 80019de:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40c38800 	.word	0x40c38800
 80019f0:	20000388 	.word	0x20000388
 80019f4:	200001f8 	.word	0x200001f8
 80019f8:	0800e4d8 	.word	0x0800e4d8
 80019fc:	200010f4 	.word	0x200010f4
 8001a00:	20003170 	.word	0x20003170
 8001a04:	0800e4dc 	.word	0x0800e4dc
 8001a08:	0800e4fc 	.word	0x0800e4fc
 8001a0c:	0800e42c 	.word	0x0800e42c
 8001a10:	0800e494 	.word	0x0800e494
 8001a14:	20003158 	.word	0x20003158
 8001a18:	0800e43c 	.word	0x0800e43c
 8001a1c:	20002128 	.word	0x20002128
 8001a20:	0800e454 	.word	0x0800e454
 8001a24:	0800e478 	.word	0x0800e478
 8001a28:	200010f0 	.word	0x200010f0
 8001a2c:	20003178 	.word	0x20003178
 8001a30:	2000317d 	.word	0x2000317d
 8001a34:	20003180 	.word	0x20003180
 8001a38:	20003184 	.word	0x20003184
 8001a3c:	0800e51c 	.word	0x0800e51c
 8001a40:	2000317a 	.word	0x2000317a
 8001a44:	0800e568 	.word	0x0800e568
 8001a48:	0800e5a8 	.word	0x0800e5a8
 8001a4c:	0800e5c4 	.word	0x0800e5c4
 8001a50:	0800e5e8 	.word	0x0800e5e8
 8001a54:	0800e5ec 	.word	0x0800e5ec
 8001a58:	0800e610 	.word	0x0800e610

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	2234      	movs	r2, #52	; 0x34
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f009 f9bc 	bl	800ade8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <SystemClock_Config+0xe4>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <SystemClock_Config+0xe4>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <SystemClock_Config+0xe4>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <SystemClock_Config+0xe8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <SystemClock_Config+0xe8>)
 8001aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <SystemClock_Config+0xe8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001acc:	2302      	movs	r3, #2
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ad8:	23b4      	movs	r3, #180	; 0xb4
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 ff97 	bl	8004a20 <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001af8:	f000 f9ee 	bl	8001ed8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001afc:	f002 f8cc 	bl	8003c98 <HAL_PWREx_EnableOverDrive>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b06:	f000 f9e7 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2105      	movs	r1, #5
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 f905 	bl	8003d38 <HAL_RCC_ClockConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001b34:	f000 f9d0 	bl	8001ed8 <Error_Handler>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3750      	adds	r7, #80	; 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b5c:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <MX_ADC1_Init+0xf0>)
 8001b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b74:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <MX_ADC1_Init+0xf4>)
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba8:	4822      	ldr	r0, [pc, #136]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001baa:	f000 fd33 	bl	8002614 <HAL_ADC_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bb4:	f000 f990 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481a      	ldr	r0, [pc, #104]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001bca:	f000 fedb 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bd4:	f000 f980 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001be6:	f000 fecd 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bf0:	f000 f972 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001c02:	f000 febf 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c0c:	f000 f964 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001c10:	230d      	movs	r3, #13
 8001c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001c1e:	f000 feb1 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c28:	f000 f956 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200001f8 	.word	0x200001f8
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	0f000001 	.word	0x0f000001

08001c40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <MX_RTC_Init+0xac>)
 8001c5a:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <MX_RTC_Init+0xb0>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <MX_RTC_Init+0xac>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_RTC_Init+0xac>)
 8001c66:	227f      	movs	r2, #127	; 0x7f
 8001c68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_RTC_Init+0xac>)
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_RTC_Init+0xac>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_RTC_Init+0xac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_RTC_Init+0xac>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c82:	481a      	ldr	r0, [pc, #104]	; (8001cec <MX_RTC_Init+0xac>)
 8001c84:	f003 f96a 	bl	8004f5c <HAL_RTC_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f923 	bl	8001ed8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4619      	mov	r1, r3
 8001cac:	480f      	ldr	r0, [pc, #60]	; (8001cec <MX_RTC_Init+0xac>)
 8001cae:	f003 f9cb 	bl	8005048 <HAL_RTC_SetTime>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001cb8:	f000 f90e 	bl	8001ed8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 8001cc4:	2317      	movs	r3, #23
 8001cc6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001cc8:	2323      	movs	r3, #35	; 0x23
 8001cca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <MX_RTC_Init+0xac>)
 8001cd4:	f003 fa52 	bl	800517c <HAL_RTC_SetDate>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001cde:	f000 f8fb 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002a0 	.word	0x200002a0
 8001cf0:	40002800 	.word	0x40002800

08001cf4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <MX_SDIO_SD_Init+0x3c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <MX_SDIO_SD_Init+0x38>)
 8001d1e:	2212      	movs	r2, #18
 8001d20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	200002c0 	.word	0x200002c0
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_USART2_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	f004 fd48 	bl	8006800 <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f000 f8af 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000344 	.word	0x20000344
 8001d84:	40004400 	.word	0x40004400

08001d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2038      	movs	r0, #56	; 0x38
 8001db0:	f001 f973 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001db4:	2038      	movs	r0, #56	; 0x38
 8001db6:	f001 f98c 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_GPIO_Init+0x104>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <MX_GPIO_Init+0x108>)
 8001e70:	f001 fef8 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_GPIO_Init+0x10c>)
 8001e8c:	f001 fd3e 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e90:	2302      	movs	r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <MX_GPIO_Init+0x10c>)
 8001ea4:	f001 fd32 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_GPIO_Init+0x108>)
 8001ec0:	f001 fd24 	bl	800390c <HAL_GPIO_Init>

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f001 f8ae 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <HAL_ADC_MspInit+0x110>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d171      	bne.n	800203a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a33      	ldr	r2, [pc, #204]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_ADC_MspInit+0x114>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001faa:	230c      	movs	r3, #12
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4823      	ldr	r0, [pc, #140]	; (800204c <HAL_ADC_MspInit+0x118>)
 8001fbe:	f001 fca5 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001fc2:	2313      	movs	r3, #19
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481e      	ldr	r0, [pc, #120]	; (8002050 <HAL_ADC_MspInit+0x11c>)
 8001fd6:	f001 fc99 	bl	800390c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_ADC_MspInit+0x124>)
 8001fde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8001ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002000:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8002004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002008:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_ADC_MspInit+0x120>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_ADC_MspInit+0x120>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8002020:	f001 f872 	bl	8003108 <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800202a:	f7ff ff55 	bl	8001ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <HAL_ADC_MspInit+0x120>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40012000 	.word	0x40012000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020800 	.word	0x40020800
 8002050:	40020000 	.word	0x40020000
 8002054:	20000240 	.word	0x20000240
 8002058:	40026410 	.word	0x40026410

0800205c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b09a      	sub	sp, #104	; 0x68
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	225c      	movs	r2, #92	; 0x5c
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f008 febb 	bl	800ade8 <memset>
  if(hrtc->Instance==RTC)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_RTC_MspInit+0x4c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800207c:	2320      	movs	r3, #32
 800207e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4618      	mov	r0, r3
 800208c:	f001 ff6e 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002096:	f7ff ff1f 	bl	8001ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_RTC_MspInit+0x50>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3768      	adds	r7, #104	; 0x68
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40002800 	.word	0x40002800
 80020ac:	42470e3c 	.word	0x42470e3c

080020b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0a2      	sub	sp, #136	; 0x88
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	225c      	movs	r2, #92	; 0x5c
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 fe89 	bl	800ade8 <memset>
  if(hsd->Instance==SDIO)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a48      	ldr	r2, [pc, #288]	; (80021fc <HAL_SD_MspInit+0x14c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	f040 8088 	bne.w	80021f2 <HAL_SD_MspInit+0x142>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80020e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80020e8:	2300      	movs	r3, #0
 80020ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80020ec:	2300      	movs	r3, #0
 80020ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 ff39 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002100:	f7ff feea 	bl	8001ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_SD_MspInit+0x150>)
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <HAL_SD_MspInit+0x150>)
 800210e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002112:	6453      	str	r3, [r2, #68]	; 0x44
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a35      	ldr	r2, [pc, #212]	; (8002200 <HAL_SD_MspInit+0x150>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a2e      	ldr	r2, [pc, #184]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_SD_MspInit+0x150>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_SD_MspInit+0x150>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <HAL_SD_MspInit+0x150>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_SD_MspInit+0x150>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002174:	2304      	movs	r3, #4
 8002176:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002186:	230c      	movs	r3, #12
 8002188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002190:	4619      	mov	r1, r3
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <HAL_SD_MspInit+0x154>)
 8002194:	f001 fbba 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021ac:	230c      	movs	r3, #12
 80021ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b6:	4619      	mov	r1, r3
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_SD_MspInit+0x158>)
 80021ba:	f001 fba7 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021be:	2304      	movs	r3, #4
 80021c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021d0:	230c      	movs	r3, #12
 80021d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021da:	4619      	mov	r1, r3
 80021dc:	480b      	ldr	r0, [pc, #44]	; (800220c <HAL_SD_MspInit+0x15c>)
 80021de:	f001 fb95 	bl	800390c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2031      	movs	r0, #49	; 0x31
 80021e8:	f000 ff57 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80021ec:	2031      	movs	r0, #49	; 0x31
 80021ee:	f000 ff70 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3788      	adds	r7, #136	; 0x88
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40023800 	.word	0x40023800
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_UART_MspInit+0x84>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_UART_MspInit+0x88>)
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_UART_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800226a:	230c      	movs	r3, #12
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227a:	2307      	movs	r3, #7
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <HAL_UART_MspInit+0x8c>)
 8002286:	f001 fb41 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40004400 	.word	0x40004400
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f000 f94e 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <SDIO_IRQHandler+0x10>)
 80022fa:	f003 fc79 	bl	8005bf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200002c0 	.word	0x200002c0

08002308 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA2_Stream0_IRQHandler+0x10>)
 800230e:	f001 f893 	bl	8003438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000240 	.word	0x20000240

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_kill>:

int _kill(int pid, int sig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002336:	f008 fd2d 	bl	800ad94 <__errno>
 800233a:	4603      	mov	r3, r0
 800233c:	2216      	movs	r2, #22
 800233e:	601a      	str	r2, [r3, #0]
  return -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_exit>:

void _exit (int status)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ffe7 	bl	800232c <_kill>
  while (1) {}    /* Make sure we hang here */
 800235e:	e7fe      	b.n	800235e <_exit+0x12>

08002360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00a      	b.n	8002388 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002372:	f3af 8000 	nop.w
 8002376:	4601      	mov	r1, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf0      	blt.n	8002372 <_read+0x12>
  }

  return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_close>:
  }
  return len;
}

int _close(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c2:	605a      	str	r2, [r3, #4]
  return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_isatty>:

int _isatty(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f008 fcae 	bl	800ad94 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20020000 	.word	0x20020000
 8002464:	00000400 	.word	0x00000400
 8002468:	200031bc 	.word	0x200031bc
 800246c:	20003210 	.word	0x20003210

08002470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <SystemInit+0x20>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <SystemInit+0x20>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249a:	490e      	ldr	r1, [pc, #56]	; (80024d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b0:	4c0b      	ldr	r4, [pc, #44]	; (80024e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024be:	f7ff ffd7 	bl	8002470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c2:	f008 fc6d 	bl	800ada0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7ff f97f 	bl	80017c8 <main>
  bx  lr    
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024d8:	0800eb0c 	.word	0x0800eb0c
  ldr r2, =_sbss
 80024dc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024e0:	20003210 	.word	0x20003210

080024e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_Init+0x40>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_Init+0x40>)
 80024fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_Init+0x40>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 fdb7 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f808 	bl	800252c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251c:	f7ff fce2 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fdcf 	bl	80030ee <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 fd97 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000000 	.word	0x20000000
 8002584:	20000008 	.word	0x20000008
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000008 	.word	0x20000008
 80025b0:	200031c0 	.word	0x200031c0

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200031c0 	.word	0x200031c0

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e033      	b.n	8002692 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fc7e 	bl	8001f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800265a:	f023 0302 	bic.w	r3, r3, #2
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fabe 	bl	8002be8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
 8002682:	e001      	b.n	8002688 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_Start_DMA+0x1e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e0e9      	b.n	800288e <HAL_ADC_Start_DMA+0x1f2>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d018      	beq.n	8002702 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_ADC_Start_DMA+0x1fc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6d      	ldr	r2, [pc, #436]	; (800289c <HAL_ADC_Start_DMA+0x200>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9a      	lsrs	r2, r3, #18
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f9      	bne.n	80026f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002710:	d107      	bne.n	8002722 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002720:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80a1 	bne.w	8002874 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800275c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	d106      	bne.n	8002780 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f023 0206 	bic.w	r2, r3, #6
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
 800277e:	e002      	b.n	8002786 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_ADC_Start_DMA+0x204>)
 8002790:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	4a43      	ldr	r2, [pc, #268]	; (80028a4 <HAL_ADC_Start_DMA+0x208>)
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	4a42      	ldr	r2, [pc, #264]	; (80028a8 <HAL_ADC_Start_DMA+0x20c>)
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	4a41      	ldr	r2, [pc, #260]	; (80028ac <HAL_ADC_Start_DMA+0x210>)
 80027a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	334c      	adds	r3, #76	; 0x4c
 80027de:	4619      	mov	r1, r3
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f000 fd3e 	bl	8003264 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d12a      	bne.n	800284a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <HAL_ADC_Start_DMA+0x214>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d015      	beq.n	800282a <HAL_ADC_Start_DMA+0x18e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <HAL_ADC_Start_DMA+0x218>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d105      	bne.n	8002814 <HAL_ADC_Start_DMA+0x178>
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_ADC_Start_DMA+0x204>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_ADC_Start_DMA+0x21c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d136      	bne.n	800288c <HAL_ADC_Start_DMA+0x1f0>
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_ADC_Start_DMA+0x204>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d130      	bne.n	800288c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d129      	bne.n	800288c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	e020      	b.n	800288c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_ADC_Start_DMA+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d11b      	bne.n	800288c <HAL_ADC_Start_DMA+0x1f0>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d114      	bne.n	800288c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	e00b      	b.n	800288c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0210 	orr.w	r2, r3, #16
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	40012300 	.word	0x40012300
 80028a4:	08002de1 	.word	0x08002de1
 80028a8:	08002e9b 	.word	0x08002e9b
 80028ac:	08002eb7 	.word	0x08002eb7
 80028b0:	40012000 	.word	0x40012000
 80028b4:	40012100 	.word	0x40012100
 80028b8:	40012200 	.word	0x40012200

080028bc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Stop_DMA+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e048      	b.n	8002968 <HAL_ADC_Stop_DMA+0xac>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d130      	bne.n	800295e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800290a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d10f      	bne.n	800293a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fcf8 	bl	8003314 <HAL_DMA_Abort>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002948:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e113      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x244>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	d925      	bls.n	80029fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1e      	subs	r3, #30
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	400a      	ands	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68d9      	ldr	r1, [r3, #12]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4403      	add	r3, r0
 80029ee:	3b1e      	subs	r3, #30
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e022      	b.n	8002a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	2207      	movs	r2, #7
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4403      	add	r3, r0
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d824      	bhi.n	8002a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b05      	subs	r3, #5
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b05      	subs	r3, #5
 8002a86:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
 8002a92:	e04c      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d824      	bhi.n	8002ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b23      	subs	r3, #35	; 0x23
 8002aae:	221f      	movs	r2, #31
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b23      	subs	r3, #35	; 0x23
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae4:	e023      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b41      	subs	r3, #65	; 0x41
 8002af8:	221f      	movs	r2, #31
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b41      	subs	r3, #65	; 0x41
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_ADC_ConfigChannel+0x250>)
 8002b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <HAL_ADC_ConfigChannel+0x254>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10f      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d10b      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_ADC_ConfigChannel+0x254>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d12b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_ADC_ConfigChannel+0x258>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x1f4>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b11      	cmp	r3, #17
 8002b76:	d122      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_ADC_ConfigChannel+0x258>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d111      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_ADC_ConfigChannel+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_ADC_ConfigChannel+0x260>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9a      	lsrs	r2, r3, #18
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	10000012 	.word	0x10000012
 8002be0:	20000000 	.word	0x20000000
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <ADC_Init+0x1f0>)
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <ADC_Init+0x1f4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e00f      	b.n	8002ce6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0202 	bic.w	r2, r2, #2
 8002cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e1b      	ldrb	r3, [r3, #24]
 8002d00:	005a      	lsls	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	035a      	lsls	r2, r3, #13
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e007      	b.n	8002d5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	051a      	lsls	r2, r3, #20
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d9e:	025a      	lsls	r2, r3, #9
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	029a      	lsls	r2, r3, #10
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40012300 	.word	0x40012300
 8002ddc:	0f000001 	.word	0x0f000001

08002de0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d13c      	bne.n	8002e74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d12b      	bne.n	8002e6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d127      	bne.n	8002e6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d119      	bne.n	8002e6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7fe f925 	bl	80010bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e72:	e00e      	b.n	8002e92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fd75 	bl	8002970 <HAL_ADC_ErrorCallback>
}
 8002e86:	e004      	b.n	8002e92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe f8eb 	bl	8001084 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff fd4a 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <__NVIC_SetPriorityGrouping>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff29 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff3e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff31 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff fa4e 	bl	80025b4 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e099      	b.n	8003258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	e00f      	b.n	8003166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003146:	f7ff fa35 	bl	80025b4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b05      	cmp	r3, #5
 8003152:	d908      	bls.n	8003166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e078      	b.n	8003258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e8      	bne.n	8003146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_DMA_Init+0x158>)
 8003180:	4013      	ands	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d117      	bne.n	800322a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fb01 	bl	8003814 <DMA_CheckFifoParam>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003226:	2301      	movs	r3, #1
 8003228:	e016      	b.n	8003258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fab8 	bl	80037a8 <DMA_CalcBaseAndBitshift>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	223f      	movs	r2, #63	; 0x3f
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	f010803f 	.word	0xf010803f

08003264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_DMA_Start_IT+0x26>
 8003286:	2302      	movs	r3, #2
 8003288:	e040      	b.n	800330c <HAL_DMA_Start_IT+0xa8>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12f      	bne.n	80032fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa4a 	bl	800374c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	223f      	movs	r2, #63	; 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0216 	orr.w	r2, r2, #22
 80032d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e005      	b.n	800330a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003322:	f7ff f947 	bl	80025b4 <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d008      	beq.n	8003346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e052      	b.n	80033ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0216 	bic.w	r2, r2, #22
 8003354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_DMA_Abort+0x62>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0208 	bic.w	r2, r2, #8
 8003384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	e013      	b.n	80033c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003398:	f7ff f90c 	bl	80025b4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d90c      	bls.n	80033c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e015      	b.n	80033ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e4      	bne.n	8003398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	223f      	movs	r2, #63	; 0x3f
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00c      	b.n	800342c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2205      	movs	r2, #5
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003444:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <HAL_DMA_IRQHandler+0x248>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a8e      	ldr	r2, [pc, #568]	; (8003684 <HAL_DMA_IRQHandler+0x24c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2208      	movs	r2, #8
 8003464:	409a      	lsls	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2208      	movs	r2, #8
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2204      	movs	r2, #4
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2204      	movs	r2, #4
 80034fe:	409a      	lsls	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2210      	movs	r2, #16
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d043      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03c      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2210      	movs	r2, #16
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d024      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e01f      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e016      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0208 	bic.w	r2, r2, #8
 8003596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2220      	movs	r2, #32
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808f 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8087 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2220      	movs	r2, #32
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d136      	bne.n	8003650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0216 	bic.w	r2, r2, #22
 80035f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_DMA_IRQHandler+0x1da>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	223f      	movs	r2, #63	; 0x3f
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07e      	beq.n	8003744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
        }
        return;
 800364e:	e079      	b.n	8003744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	2b00      	cmp	r3, #0
 8003672:	d031      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e02c      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000
 8003684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e01e      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0210 	bic.w	r2, r2, #16
 80036b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d032      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2205      	movs	r2, #5
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d307      	bcc.n	8003720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f2      	bne.n	8003704 <HAL_DMA_IRQHandler+0x2cc>
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003744:	bf00      	nop
    }
  }
}
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d108      	bne.n	800378c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800378a:	e007      	b.n	800379c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3b10      	subs	r3, #16
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <DMA_CalcBaseAndBitshift+0x64>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <DMA_CalcBaseAndBitshift+0x68>)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d909      	bls.n	80037ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	659a      	str	r2, [r3, #88]	; 0x58
 80037e8:	e007      	b.n	80037fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	aaaaaaab 	.word	0xaaaaaaab
 8003810:	0800e688 	.word	0x0800e688

08003814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11f      	bne.n	800386e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d856      	bhi.n	80038e2 <DMA_CheckFifoParam+0xce>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <DMA_CheckFifoParam+0x28>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	0800384d 	.word	0x0800384d
 8003840:	0800385f 	.word	0x0800385f
 8003844:	0800384d 	.word	0x0800384d
 8003848:	080038e3 	.word	0x080038e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d046      	beq.n	80038e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e043      	b.n	80038e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003866:	d140      	bne.n	80038ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e03d      	b.n	80038ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003876:	d121      	bne.n	80038bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d837      	bhi.n	80038ee <DMA_CheckFifoParam+0xda>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <DMA_CheckFifoParam+0x70>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003895 	.word	0x08003895
 8003888:	0800389b 	.word	0x0800389b
 800388c:	08003895 	.word	0x08003895
 8003890:	080038ad 	.word	0x080038ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e030      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d025      	beq.n	80038f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038aa:	e022      	b.n	80038f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b4:	d11f      	bne.n	80038f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ba:	e01c      	b.n	80038f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d903      	bls.n	80038ca <DMA_CheckFifoParam+0xb6>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d003      	beq.n	80038d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c8:	e018      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      break;
 80038ce:	e015      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e00b      	b.n	80038fa <DMA_CheckFifoParam+0xe6>
      break;
 80038e2:	bf00      	nop
 80038e4:	e00a      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e008      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e006      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e004      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038f2:	bf00      	nop
 80038f4:	e002      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;   
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
    }
  } 
  
  return status; 
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e165      	b.n	8003bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8154 	bne.w	8003bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d005      	beq.n	800395e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395a:	2b02      	cmp	r3, #2
 800395c:	d130      	bne.n	80039c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0201 	and.w	r2, r3, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d017      	beq.n	80039fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d123      	bne.n	8003a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80ae 	beq.w	8003bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_GPIO_Init+0x300>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a5c      	ldr	r2, [pc, #368]	; (8003c0c <HAL_GPIO_Init+0x300>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b5a      	ldr	r3, [pc, #360]	; (8003c0c <HAL_GPIO_Init+0x300>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_GPIO_Init+0x304>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x308>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d025      	beq.n	8003b26 <HAL_GPIO_Init+0x21a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_GPIO_Init+0x30c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <HAL_GPIO_Init+0x216>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_GPIO_Init+0x310>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x212>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	; (8003c20 <HAL_GPIO_Init+0x314>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x20e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_GPIO_Init+0x318>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x20a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <HAL_GPIO_Init+0x31c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x206>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a49      	ldr	r2, [pc, #292]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x202>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b0e:	2307      	movs	r3, #7
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x304>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_GPIO_Init+0x324>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae96 	bls.w	8003928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_PWREx_EnableOverDrive+0x94>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc4:	f7fe fc76 	bl	80025b4 <HAL_GetTick>
 8003cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cca:	e009      	b.n	8003ce0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ccc:	f7fe fc72 	bl	80025b4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cda:	d901      	bls.n	8003ce0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e01f      	b.n	8003d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d1ee      	bne.n	8003ccc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf4:	f7fe fc5e 	bl	80025b4 <HAL_GetTick>
 8003cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cfa:	e009      	b.n	8003d10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cfc:	f7fe fc5a 	bl	80025b4 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0a:	d901      	bls.n	8003d10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e007      	b.n	8003d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	420e0040 	.word	0x420e0040
 8003d30:	40007000 	.word	0x40007000
 8003d34:	420e0044 	.word	0x420e0044

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d90c      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a52      	ldr	r2, [pc, #328]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	494d      	ldr	r1, [pc, #308]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d119      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4934      	ldr	r1, [pc, #208]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fe fbc4 	bl	80025b4 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fe fbc0 	bl	80025b4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d20c      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 fb7f 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fb24 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	0800e670 	.word	0x0800e670
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20000004 	.word	0x20000004

08003f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	0800e680 	.word	0x0800e680

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f48:	f7ff ffdc 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0b5b      	lsrs	r3, r3, #13
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800e680 	.word	0x0800e680

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08c      	sub	sp, #48	; 0x30
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003faa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	496c      	ldr	r1, [pc, #432]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4960      	ldr	r1, [pc, #384]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004000:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4955      	ldr	r1, [pc, #340]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401e:	d101      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004020:	2301      	movs	r3, #1
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800403e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	4946      	ldr	r1, [pc, #280]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800405a:	d101      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 808a 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004096:	4b34      	ldr	r3, [pc, #208]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a33      	ldr	r2, [pc, #204]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040a2:	f7fe fa87 	bl	80025b4 <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040aa:	f7fe fa83 	bl	80025b4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e278      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02f      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d028      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f0:	4b1e      	ldr	r3, [pc, #120]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040fc:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d114      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe fa51 	bl	80025b4 <HAL_GetTick>
 8004112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fe fa4d 	bl	80025b4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e240      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ee      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004144:	d114      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	4902      	ldr	r1, [pc, #8]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]
 8004160:	e00c      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	42470e40 	.word	0x42470e40
 8004170:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a49      	ldr	r2, [pc, #292]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800417e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	4944      	ldr	r1, [pc, #272]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418a:	4313      	orrs	r3, r2
 800418c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80041a0:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80041a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80041b0:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	4937      	ldr	r1, [pc, #220]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041d2:	4b32      	ldr	r3, [pc, #200]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	492e      	ldr	r1, [pc, #184]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041f4:	4b29      	ldr	r3, [pc, #164]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	4926      	ldr	r1, [pc, #152]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d101      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	491a      	ldr	r1, [pc, #104]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	4911      	ldr	r1, [pc, #68]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004266:	2301      	movs	r3, #1
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d005      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004278:	f040 80ff 	bne.w	800447a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004282:	f7fe f997 	bl	80025b4 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004288:	e00e      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800428a:	f7fe f993 	bl	80025b4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d907      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e188      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800429c:	40023800 	.word	0x40023800
 80042a0:	424711e0 	.word	0x424711e0
 80042a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a8:	4b7e      	ldr	r3, [pc, #504]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ea      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d028      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d124      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042dc:	4b71      	ldr	r3, [pc, #452]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	3301      	adds	r3, #1
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ee:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	0e1b      	lsrs	r3, r3, #24
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	431a      	orrs	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	3b01      	subs	r3, #1
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	431a      	orrs	r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	4961      	ldr	r1, [pc, #388]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004344:	2b00      	cmp	r3, #0
 8004346:	d035      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d130      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004352:	4b54      	ldr	r3, [pc, #336]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	3301      	adds	r3, #1
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004364:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	019b      	lsls	r3, r3, #6
 800437c:	431a      	orrs	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	431a      	orrs	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	071b      	lsls	r3, r3, #28
 8004394:	4943      	ldr	r1, [pc, #268]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a2:	f023 021f 	bic.w	r2, r3, #31
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	493d      	ldr	r1, [pc, #244]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d029      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c8:	d124      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043ca:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043dc:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e2:	0f1b      	lsrs	r3, r3, #28
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	431a      	orrs	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	071b      	lsls	r3, r3, #28
 800440c:	4925      	ldr	r1, [pc, #148]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	071b      	lsls	r3, r3, #28
 8004446:	4917      	ldr	r1, [pc, #92]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004454:	f7fe f8ae 	bl	80025b4 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800445c:	f7fe f8aa 	bl	80025b4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e09f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 8095 	bne.w	80045ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004488:	f7fe f894 	bl	80025b4 <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800448e:	e00f      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004490:	f7fe f890 	bl	80025b4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d908      	bls.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e085      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	42470068 	.word	0x42470068
 80044ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b0:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d0e8      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02b      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d127      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	431a      	orrs	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	4928      	ldr	r1, [pc, #160]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800451e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004522:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	3b01      	subs	r3, #1
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	4922      	ldr	r1, [pc, #136]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01d      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d118      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	0e1b      	lsrs	r3, r3, #24
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	019b      	lsls	r3, r3, #6
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	3b01      	subs	r3, #1
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	4910      	ldr	r1, [pc, #64]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004584:	f7fe f816 	bl	80025b4 <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800458c:	f7fe f812 	bl	80025b4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e007      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045aa:	d1ef      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3730      	adds	r7, #48	; 0x30
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470070 	.word	0x42470070

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b0ae      	sub	sp, #184	; 0xb8
 80045c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e6:	4bcb      	ldr	r3, [pc, #812]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	f200 8206 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x440>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004a01 	.word	0x08004a01
 8004604:	08004a01 	.word	0x08004a01
 8004608:	08004a01 	.word	0x08004a01
 800460c:	08004639 	.word	0x08004639
 8004610:	08004a01 	.word	0x08004a01
 8004614:	08004a01 	.word	0x08004a01
 8004618:	08004a01 	.word	0x08004a01
 800461c:	08004641 	.word	0x08004641
 8004620:	08004a01 	.word	0x08004a01
 8004624:	08004a01 	.word	0x08004a01
 8004628:	08004a01 	.word	0x08004a01
 800462c:	08004831 	.word	0x08004831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004630:	4bb9      	ldr	r3, [pc, #740]	; (8004918 <HAL_RCC_GetSysClockFreq+0x358>)
 8004632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004636:	e1e7      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004638:	4bb8      	ldr	r3, [pc, #736]	; (800491c <HAL_RCC_GetSysClockFreq+0x35c>)
 800463a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800463e:	e1e3      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4bb4      	ldr	r3, [pc, #720]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464c:	4bb1      	ldr	r3, [pc, #708]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d071      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004658:	4bae      	ldr	r3, [pc, #696]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004664:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800467a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	0159      	lsls	r1, r3, #5
 800468c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004690:	0150      	lsls	r0, r2, #5
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4621      	mov	r1, r4
 8004698:	1a51      	subs	r1, r2, r1
 800469a:	6439      	str	r1, [r7, #64]	; 0x40
 800469c:	4629      	mov	r1, r5
 800469e:	eb63 0301 	sbc.w	r3, r3, r1
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80046b0:	4649      	mov	r1, r9
 80046b2:	018b      	lsls	r3, r1, #6
 80046b4:	4641      	mov	r1, r8
 80046b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ba:	4641      	mov	r1, r8
 80046bc:	018a      	lsls	r2, r1, #6
 80046be:	4641      	mov	r1, r8
 80046c0:	1a51      	subs	r1, r2, r1
 80046c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c4:	4649      	mov	r1, r9
 80046c6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80046d8:	4649      	mov	r1, r9
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4641      	mov	r1, r8
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4622      	mov	r2, r4
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
 80046f2:	462b      	mov	r3, r5
 80046f4:	460a      	mov	r2, r1
 80046f6:	eb42 0303 	adc.w	r3, r2, r3
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004708:	4629      	mov	r1, r5
 800470a:	024b      	lsls	r3, r1, #9
 800470c:	4621      	mov	r1, r4
 800470e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004712:	4621      	mov	r1, r4
 8004714:	024a      	lsls	r2, r1, #9
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004728:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800472c:	f7fc faac 	bl	8000c88 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800473a:	e067      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473c:	4b75      	ldr	r3, [pc, #468]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004748:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800474c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004754:	67bb      	str	r3, [r7, #120]	; 0x78
 8004756:	2300      	movs	r3, #0
 8004758:	67fb      	str	r3, [r7, #124]	; 0x7c
 800475a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	0159      	lsls	r1, r3, #5
 800476c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004770:	0150      	lsls	r0, r2, #5
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4621      	mov	r1, r4
 8004778:	1a51      	subs	r1, r2, r1
 800477a:	62b9      	str	r1, [r7, #40]	; 0x28
 800477c:	4629      	mov	r1, r5
 800477e:	eb63 0301 	sbc.w	r3, r3, r1
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004790:	4649      	mov	r1, r9
 8004792:	018b      	lsls	r3, r1, #6
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479a:	4641      	mov	r1, r8
 800479c:	018a      	lsls	r2, r1, #6
 800479e:	4641      	mov	r1, r8
 80047a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80047a4:	4649      	mov	r1, r9
 80047a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047be:	4692      	mov	sl, r2
 80047c0:	469b      	mov	fp, r3
 80047c2:	4623      	mov	r3, r4
 80047c4:	eb1a 0303 	adds.w	r3, sl, r3
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	462b      	mov	r3, r5
 80047cc:	eb4b 0303 	adc.w	r3, fp, r3
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047de:	4629      	mov	r1, r5
 80047e0:	028b      	lsls	r3, r1, #10
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e8:	4621      	mov	r1, r4
 80047ea:	028a      	lsls	r2, r1, #10
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f4:	2200      	movs	r2, #0
 80047f6:	673b      	str	r3, [r7, #112]	; 0x70
 80047f8:	677a      	str	r2, [r7, #116]	; 0x74
 80047fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80047fe:	f7fc fa43 	bl	8000c88 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4613      	mov	r3, r2
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800480c:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800481e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800482e:	e0eb      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b38      	ldr	r3, [pc, #224]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d06b      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCC_GetSysClockFreq+0x354>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	2200      	movs	r2, #0
 8004850:	66bb      	str	r3, [r7, #104]	; 0x68
 8004852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	663b      	str	r3, [r7, #96]	; 0x60
 800485c:	2300      	movs	r3, #0
 800485e:	667b      	str	r3, [r7, #100]	; 0x64
 8004860:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004864:	4622      	mov	r2, r4
 8004866:	462b      	mov	r3, r5
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	0159      	lsls	r1, r3, #5
 8004872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004876:	0150      	lsls	r0, r2, #5
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4621      	mov	r1, r4
 800487e:	1a51      	subs	r1, r2, r1
 8004880:	61b9      	str	r1, [r7, #24]
 8004882:	4629      	mov	r1, r5
 8004884:	eb63 0301 	sbc.w	r3, r3, r1
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004896:	4659      	mov	r1, fp
 8004898:	018b      	lsls	r3, r1, #6
 800489a:	4651      	mov	r1, sl
 800489c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048a0:	4651      	mov	r1, sl
 80048a2:	018a      	lsls	r2, r1, #6
 80048a4:	4651      	mov	r1, sl
 80048a6:	ebb2 0801 	subs.w	r8, r2, r1
 80048aa:	4659      	mov	r1, fp
 80048ac:	eb63 0901 	sbc.w	r9, r3, r1
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c4:	4690      	mov	r8, r2
 80048c6:	4699      	mov	r9, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	eb18 0303 	adds.w	r3, r8, r3
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	462b      	mov	r3, r5
 80048d2:	eb49 0303 	adc.w	r3, r9, r3
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048e4:	4629      	mov	r1, r5
 80048e6:	024b      	lsls	r3, r1, #9
 80048e8:	4621      	mov	r1, r4
 80048ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ee:	4621      	mov	r1, r4
 80048f0:	024a      	lsls	r2, r1, #9
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048fa:	2200      	movs	r2, #0
 80048fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004904:	f7fc f9c0 	bl	8000c88 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004912:	e065      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x420>
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400
 800491c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x458>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	2200      	movs	r2, #0
 8004928:	4618      	mov	r0, r3
 800492a:	4611      	mov	r1, r2
 800492c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
 8004932:	2300      	movs	r3, #0
 8004934:	657b      	str	r3, [r7, #84]	; 0x54
 8004936:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800493a:	4642      	mov	r2, r8
 800493c:	464b      	mov	r3, r9
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4641      	mov	r1, r8
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	4649      	mov	r1, r9
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800496c:	4659      	mov	r1, fp
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4651      	mov	r1, sl
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4651      	mov	r1, sl
 800497c:	1a54      	subs	r4, r2, r1
 800497e:	4659      	mov	r1, fp
 8004980:	eb63 0501 	sbc.w	r5, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	464b      	mov	r3, r9
 80049a0:	eb45 0303 	adc.w	r3, r5, r3
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b2:	4629      	mov	r1, r5
 80049b4:	028b      	lsls	r3, r1, #10
 80049b6:	4621      	mov	r1, r4
 80049b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049bc:	4621      	mov	r1, r4
 80049be:	028a      	lsls	r2, r1, #10
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c8:	2200      	movs	r2, #0
 80049ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80049cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80049ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049d2:	f7fc f959 	bl	8000c88 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4613      	mov	r3, r2
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x458>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0f1b      	lsrs	r3, r3, #28
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80049ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049fe:	e003      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	37b8      	adds	r7, #184	; 0xb8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	00f42400 	.word	0x00f42400

08004a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e28d      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8083 	beq.w	8004b46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a40:	4b94      	ldr	r3, [pc, #592]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d019      	beq.n	8004a80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a4c:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a58:	4b8e      	ldr	r3, [pc, #568]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a64:	d00c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d112      	bne.n	8004a98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05b      	beq.n	8004b44 <HAL_RCC_OscConfig+0x124>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d157      	bne.n	8004b44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e25a      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x90>
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7b      	ldr	r2, [pc, #492]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e01d      	b.n	8004aec <HAL_RCC_OscConfig+0xcc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xb4>
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a72      	ldr	r2, [pc, #456]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0xcc>
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6b      	ldr	r2, [pc, #428]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fd5e 	bl	80025b4 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fd fd5a 	bl	80025b4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e21f      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0xdc>
 8004b1a:	e014      	b.n	8004b46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fd4a 	bl	80025b4 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fd fd46 	bl	80025b4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e20b      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x104>
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d06f      	beq.n	8004c32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b52:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d017      	beq.n	8004b8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x186>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1d3      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4937      	ldr	r1, [pc, #220]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <HAL_RCC_OscConfig+0x278>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd fcf3 	bl	80025b4 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fcef 	bl	80025b4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1b4      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4925      	ldr	r1, [pc, #148]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0x278>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fcd2 	bl	80025b4 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd fcce 	bl	80025b4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e193      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d036      	beq.n	8004cac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fcb2 	bl	80025b4 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fd fcae 	bl	80025b4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e173      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x234>
 8004c72:	e01b      	b.n	8004cac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7a:	f7fd fc9b 	bl	80025b4 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e00e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd fc97 	bl	80025b4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d907      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e15c      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470000 	.word	0x42470000
 8004c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	4b8a      	ldr	r3, [pc, #552]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ea      	bne.n	8004c82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8097 	beq.w	8004de8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbe:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	4b7f      	ldr	r3, [pc, #508]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a7e      	ldr	r2, [pc, #504]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cda:	4b7c      	ldr	r3, [pc, #496]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b79      	ldr	r3, [pc, #484]	; (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d118      	bne.n	8004d28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a75      	ldr	r2, [pc, #468]	; (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7fd fc57 	bl	80025b4 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fd fc53 	bl	80025b4 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e118      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b6c      	ldr	r3, [pc, #432]	; (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x31e>
 8004d30:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCC_OscConfig+0x358>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x340>
 8004d46:	4b61      	ldr	r3, [pc, #388]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	4a60      	ldr	r2, [pc, #384]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70
 8004d52:	4b5e      	ldr	r3, [pc, #376]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a5d      	ldr	r2, [pc, #372]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0x358>
 8004d60:	4b5a      	ldr	r3, [pc, #360]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a59      	ldr	r2, [pc, #356]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6c:	4b57      	ldr	r3, [pc, #348]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	f023 0304 	bic.w	r3, r3, #4
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d015      	beq.n	8004dac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd fc18 	bl	80025b4 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fd fc14 	bl	80025b4 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0d7      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9e:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ee      	beq.n	8004d88 <HAL_RCC_OscConfig+0x368>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fd fc02 	bl	80025b4 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fd fbfe 	bl	80025b4 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0c1      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80ad 	beq.w	8004f4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df2:	4b36      	ldr	r3, [pc, #216]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d060      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d145      	bne.n	8004e92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd fbd2 	bl	80025b4 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fd fbce 	bl	80025b4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e093      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	491b      	ldr	r1, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fd fba3 	bl	80025b4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fd fb9f 	bl	80025b4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e064      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x452>
 8004e90:	e05c      	b.n	8004f4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd fb8c 	bl	80025b4 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fb88 	bl	80025b4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04d      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x480>
 8004ebe:	e045      	b.n	8004f4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e040      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <HAL_RCC_OscConfig+0x538>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d030      	beq.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d129      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d122      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f08:	4013      	ands	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d119      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d10f      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800

08004f5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e066      	b.n	8005040 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7f5b      	ldrb	r3, [r3, #29]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd f86a 	bl	800205c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	22ca      	movs	r2, #202	; 0xca
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2253      	movs	r2, #83	; 0x53
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f998 	bl	80052d4 <RTC_EnterInitMode>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d12c      	bne.n	8005008 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68d2      	ldr	r2, [r2, #12]
 8004fe8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6919      	ldr	r1, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	041a      	lsls	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f99f 	bl	8005342 <RTC_ExitInitMode>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d113      	bne.n	8005036 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	7f1b      	ldrb	r3, [r3, #28]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_RTC_SetTime+0x1c>
 8005060:	2302      	movs	r3, #2
 8005062:	e087      	b.n	8005174 <HAL_RTC_SetTime+0x12c>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d126      	bne.n	80050c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f97c 	bl	800538c <RTC_ByteToBcd2>
 8005094:	4603      	mov	r3, r0
 8005096:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f975 	bl	800538c <RTC_ByteToBcd2>
 80050a2:	4603      	mov	r3, r0
 80050a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f96d 	bl	800538c <RTC_ByteToBcd2>
 80050b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e018      	b.n	80050f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2200      	movs	r2, #0
 80050d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	22ca      	movs	r2, #202	; 0xca
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2253      	movs	r2, #83	; 0x53
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f8e4 	bl	80052d4 <RTC_EnterInitMode>
 800510c:	4603      	mov	r3, r0
 800510e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d120      	bne.n	8005158 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005120:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005124:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005134:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6899      	ldr	r1, [r3, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8f7 	bl	8005342 <RTC_ExitInitMode>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]

  return status;
 8005172:	7cfb      	ldrb	r3, [r7, #19]
}
 8005174:	4618      	mov	r0, r3
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}

0800517c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	7f1b      	ldrb	r3, [r3, #28]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_RTC_SetDate+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e071      	b.n	800527c <HAL_RTC_SetDate+0x100>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2202      	movs	r2, #2
 80051a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10e      	bne.n	80051c8 <HAL_RTC_SetDate+0x4c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	f023 0310 	bic.w	r3, r3, #16
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	330a      	adds	r3, #10
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11c      	bne.n	8005208 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f8da 	bl	800538c <RTC_ByteToBcd2>
 80051d8:	4603      	mov	r3, r0
 80051da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 f8d3 	bl	800538c <RTC_ByteToBcd2>
 80051e6:	4603      	mov	r3, r0
 80051e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	789b      	ldrb	r3, [r3, #2]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f8cb 	bl	800538c <RTC_ByteToBcd2>
 80051f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e00e      	b.n	8005226 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005214:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800521a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ca      	movs	r2, #202	; 0xca
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2253      	movs	r2, #83	; 0x53
 8005234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f84c 	bl	80052d4 <RTC_EnterInitMode>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005254:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f873 	bl	8005342 <RTC_ExitInitMode>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	771a      	strb	r2, [r3, #28]

  return status;
 800527a:	7cfb      	ldrb	r3, [r7, #19]
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd90      	pop	{r4, r7, pc}

08005284 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800529e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a0:	f7fd f988 	bl	80025b4 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052a6:	e009      	b.n	80052bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052a8:	f7fd f984 	bl	80025b4 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b6:	d901      	bls.n	80052bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e007      	b.n	80052cc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ee      	beq.n	80052a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d122      	bne.n	8005338 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005300:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005302:	f7fd f957 	bl	80025b4 <HAL_GetTick>
 8005306:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005308:	e00c      	b.n	8005324 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800530a:	f7fd f953 	bl	80025b4 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005318:	d904      	bls.n	8005324 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <RTC_EnterInitMode+0x64>
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d1e8      	bne.n	800530a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ff89 	bl	8005284 <HAL_RTC_WaitForSynchro>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800539a:	e005      	b.n	80053a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	3301      	adds	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	3b0a      	subs	r3, #10
 80053a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b09      	cmp	r3, #9
 80053ac:	d8f6      	bhi.n	800539c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2db      	uxtb	r3, r3
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e022      	b.n	800541e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc fe60 	bl	80020b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2203      	movs	r2, #3
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f815 	bl	8005428 <HAL_SD_InitCard>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e00a      	b.n	800541e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af04      	add	r7, sp, #16
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005444:	2376      	movs	r3, #118	; 0x76
 8005446:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681d      	ldr	r5, [r3, #0]
 800544c:	466c      	mov	r4, sp
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005460:	4628      	mov	r0, r5
 8005462:	f001 fc8f 	bl	8006d84 <SDIO_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04f      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005478:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_SD_InitCard+0xf8>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f001 fcc7 	bl	8006e16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005488:	4b25      	ldr	r3, [pc, #148]	; (8005520 <HAL_SD_InitCard+0xf8>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800548e:	2002      	movs	r0, #2
 8005490:	f7fd f89c 	bl	80025cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f857 	bl	8006548 <SD_PowerON>
 800549a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e02e      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 ff76 	bl	80063ac <SD_InitCard>
 80054c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e01b      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 fd26 	bl	8006f3a <SDMMC_CmdBlockLength>
 80054ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00f      	beq.n	8005516 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_SD_InitCard+0xfc>)
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bdb0      	pop	{r4, r5, r7, pc}
 8005520:	422580a0 	.word	0x422580a0
 8005524:	004005ff 	.word	0x004005ff

08005528 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b092      	sub	sp, #72	; 0x48
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005536:	f7fd f83d 	bl	80025b4 <HAL_GetTick>
 800553a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e1bd      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 81b0 	bne.w	80058c8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800556e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	429a      	cmp	r2, r3
 800557a:	d907      	bls.n	800558c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e1a4      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2203      	movs	r2, #3
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d002      	beq.n	80055aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	025b      	lsls	r3, r3, #9
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	025b      	lsls	r3, r3, #9
 80055b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80055b6:	2390      	movs	r3, #144	; 0x90
 80055b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80055ba:	2302      	movs	r3, #2
 80055bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80055be:	2300      	movs	r3, #0
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f107 0214 	add.w	r2, r7, #20
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 fc86 	bl	8006ee2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d90a      	bls.n	80055f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2202      	movs	r2, #2
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fcea 	bl	8006fc2 <SDMMC_CmdReadMultiBlock>
 80055ee:	6478      	str	r0, [r7, #68]	; 0x44
 80055f0:	e009      	b.n	8005606 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fcbd 	bl	8006f7e <SDMMC_CmdReadSingleBlock>
 8005604:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005608:	2b00      	cmp	r3, #0
 800560a:	d012      	beq.n	8005632 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7a      	ldr	r2, [pc, #488]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561a:	431a      	orrs	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e151      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005636:	e061      	b.n	80056fc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03c      	beq.n	80056c0 <HAL_SD_ReadBlocks+0x198>
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d039      	beq.n	80056c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800564c:	2300      	movs	r3, #0
 800564e:	643b      	str	r3, [r7, #64]	; 0x40
 8005650:	e033      	b.n	80056ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fbbf 	bl	8006dda <SDIO_ReadFIFO>
 800565c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	b2da      	uxtb	r2, r3
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	3301      	adds	r3, #1
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800566c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566e:	3b01      	subs	r3, #1
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	b2da      	uxtb	r2, r3
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	3301      	adds	r3, #1
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005684:	3b01      	subs	r3, #1
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	3301      	adds	r3, #1
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569a:	3b01      	subs	r3, #1
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	0e1b      	lsrs	r3, r3, #24
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	3301      	adds	r3, #1
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b0:	3b01      	subs	r3, #1
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80056b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b6:	3301      	adds	r3, #1
 80056b8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d9c8      	bls.n	8005652 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80056c0:	f7fc ff78 	bl	80025b4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d902      	bls.n	80056d6 <HAL_SD_ReadBlocks+0x1ae>
 80056d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d112      	bne.n	80056fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a48      	ldr	r2, [pc, #288]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e0ec      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005706:	2b00      	cmp	r3, #0
 8005708:	d096      	beq.n	8005638 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d022      	beq.n	800575e <HAL_SD_ReadBlocks+0x236>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d91f      	bls.n	800575e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	2b03      	cmp	r3, #3
 8005724:	d01b      	beq.n	800575e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fcb0 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005730:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005746:	431a      	orrs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0bb      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	f043 0208 	orr.w	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0a1      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a15      	ldr	r2, [pc, #84]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	f043 0202 	orr.w	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e087      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d064      	beq.n	800589e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <HAL_SD_ReadBlocks+0x2d4>)
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e06d      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
 80057fa:	bf00      	nop
 80057fc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fae8 	bl	8006dda <SDIO_ReadFIFO>
 800580a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	b2da      	uxtb	r2, r3
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	3301      	adds	r3, #1
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	3b01      	subs	r3, #1
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	3301      	adds	r3, #1
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	3b01      	subs	r3, #1
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	3301      	adds	r3, #1
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	3b01      	subs	r3, #1
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	0e1b      	lsrs	r3, r3, #24
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	3301      	adds	r3, #1
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	3b01      	subs	r3, #1
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005862:	f7fc fea7 	bl	80025b4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800586e:	429a      	cmp	r2, r3
 8005870:	d902      	bls.n	8005878 <HAL_SD_ReadBlocks+0x350>
 8005872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005874:	2b00      	cmp	r3, #0
 8005876:	d112      	bne.n	800589e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_SD_ReadBlocks+0x3b8>)
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e01b      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_SD_ReadBlocks+0x38a>
 80058ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1a6      	bne.n	8005800 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e006      	b.n	80058d6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3748      	adds	r7, #72	; 0x48
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	004005ff 	.word	0x004005ff

080058e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b092      	sub	sp, #72	; 0x48
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058f2:	f7fc fe5f 	bl	80025b4 <HAL_GetTick>
 80058f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e165      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	f040 8158 	bne.w	8005bd4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800592a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	441a      	add	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	429a      	cmp	r2, r3
 8005936:	d907      	bls.n	8005948 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e14c      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2203      	movs	r2, #3
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	2b01      	cmp	r3, #1
 800595e:	d002      	beq.n	8005966 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	025b      	lsls	r3, r3, #9
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	025b      	lsls	r3, r3, #9
 8005970:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005972:	2390      	movs	r3, #144	; 0x90
 8005974:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005976:	2300      	movs	r3, #0
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800597a:	2300      	movs	r3, #0
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800597e:	2301      	movs	r3, #1
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f107 0218 	add.w	r2, r7, #24
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f001 faa8 	bl	8006ee2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d90a      	bls.n	80059ae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fb50 	bl	800704a <SDMMC_CmdWriteMultiBlock>
 80059aa:	6478      	str	r0, [r7, #68]	; 0x44
 80059ac:	e009      	b.n	80059c2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2210      	movs	r2, #16
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fb23 	bl	8007006 <SDMMC_CmdWriteSingleBlock>
 80059c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d012      	beq.n	80059ee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a87      	ldr	r2, [pc, #540]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0f9      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80059f2:	e065      	b.n	8005ac0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d040      	beq.n	8005a84 <HAL_SD_WriteBlocks+0x1a0>
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d03d      	beq.n	8005a84 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a0c:	e037      	b.n	8005a7e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	3301      	adds	r3, #1
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	021a      	lsls	r2, r3, #8
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	3301      	adds	r3, #1
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a34:	3b01      	subs	r3, #1
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	3301      	adds	r3, #1
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	061a      	lsls	r2, r3, #24
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	3301      	adds	r3, #1
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	3b01      	subs	r3, #1
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f107 0214 	add.w	r2, r7, #20
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f9be 	bl	8006df4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d9c4      	bls.n	8005a0e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a84:	f7fc fd96 	bl	80025b4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d902      	bls.n	8005a9a <HAL_SD_WriteBlocks+0x1b6>
 8005a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d112      	bne.n	8005ac0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a53      	ldr	r2, [pc, #332]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e090      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d092      	beq.n	80059f4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d022      	beq.n	8005b22 <HAL_SD_WriteBlocks+0x23e>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d91f      	bls.n	8005b22 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d01b      	beq.n	8005b22 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 face 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005af4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e05f      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	f043 0208 	orr.w	r2, r3, #8
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e045      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f043 0202 	orr.w	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02b      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d012      	beq.n	8005bbe <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a13      	ldr	r2, [pc, #76]	; (8005bec <HAL_SD_WriteBlocks+0x308>)
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f043 0210 	orr.w	r2, r3, #16
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e011      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e006      	b.n	8005be2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3748      	adds	r7, #72	; 0x48
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	004005ff 	.word	0x004005ff

08005bf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_SD_IRQHandler+0x2e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fd4c 	bl	80066b4 <SD_Read_IT>
 8005c1c:	e155      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 808f 	beq.w	8005d4c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005c46:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005c4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d039      	beq.n	8005cda <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <HAL_SD_IRQHandler+0x8a>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d011      	beq.n	8005c9e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fa06 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005c84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d008      	beq.n	8005c9e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f91f 	bl	8005edc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <HAL_SD_IRQHandler+0xda>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fe2c 	bl	8007928 <HAL_SD_RxCpltCallback>
 8005cd0:	e0fb      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fe1e 	bl	8007914 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cd8:	e0f7      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80f2 	beq.w	8005eca <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d011      	beq.n	8005d14 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f9cb 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005cfa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8e4 	bl	8005edc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 80d5 	bne.w	8005eca <HAL_SD_IRQHandler+0x2da>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 80cf 	bne.w	8005eca <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0208 	bic.w	r2, r2, #8
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fde5 	bl	8007914 <HAL_SD_TxCpltCallback>
}
 8005d4a:	e0be      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <HAL_SD_IRQHandler+0x17c>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fcf6 	bl	8006756 <SD_Write_IT>
 8005d6a:	e0ae      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80a7 	beq.w	8005eca <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f043 0208 	orr.w	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 0210 	orr.w	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f240 523a 	movw	r2, #1338	; 0x53a
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005dfc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f944 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f855 	bl	8005edc <HAL_SD_ErrorCallback>
}
 8005e32:	e04a      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d045      	beq.n	8005eca <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_SD_IRQHandler+0x262>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d011      	beq.n	8005e76 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <HAL_SD_IRQHandler+0x2e4>)
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd fac8 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02f      	beq.n	8005eca <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fa2e 	bl	80062d0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005e74:	e029      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_SD_IRQHandler+0x29a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d011      	beq.n	8005eae <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <HAL_SD_IRQHandler+0x2e8>)
 8005e90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd faac 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fa49 	bl	800633e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005eac:	e00d      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fd1c 	bl	8007900 <HAL_SD_AbortCallback>
}
 8005ec8:	e7ff      	b.n	8005eca <HAL_SD_IRQHandler+0x2da>
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	080062d1 	.word	0x080062d1
 8005ed8:	0800633f 	.word	0x0800633f

08005edc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efe:	0f9b      	lsrs	r3, r3, #30
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0a:	0e9b      	lsrs	r3, r3, #26
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f50:	0d1b      	lsrs	r3, r3, #20
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6e:	0bdb      	lsrs	r3, r3, #15
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f80:	0b9b      	lsrs	r3, r3, #14
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f92:	0b5b      	lsrs	r3, r3, #13
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa4:	0b1b      	lsrs	r3, r3, #12
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d163      	bne.n	8006088 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc4:	009a      	lsls	r2, r3, #2
 8005fc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fca:	4013      	ands	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005fd0:	0f92      	lsrs	r2, r2, #30
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fdc:	0edb      	lsrs	r3, r3, #27
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	0e1b      	lsrs	r3, r3, #24
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006000:	0d5b      	lsrs	r3, r3, #21
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	b2da      	uxtb	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006012:	0c9b      	lsrs	r3, r3, #18
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	b2da      	uxtb	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006024:	0bdb      	lsrs	r3, r3, #15
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	b2da      	uxtb	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	7e1b      	ldrb	r3, [r3, #24]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	3302      	adds	r3, #2
 8006048:	2201      	movs	r2, #1
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	7a1b      	ldrb	r3, [r3, #8]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006074:	0a52      	lsrs	r2, r2, #9
 8006076:	fb03 f202 	mul.w	r2, r3, r2
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
 8006086:	e031      	b.n	80060ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	2b01      	cmp	r3, #1
 800608e:	d11d      	bne.n	80060cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	3301      	adds	r3, #1
 80060ac:	029a      	lsls	r2, r3, #10
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	661a      	str	r2, [r3, #96]	; 0x60
 80060ca:	e00f      	b.n	80060ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a58      	ldr	r2, [pc, #352]	; (8006234 <HAL_SD_GetCardCSD+0x344>)
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e09d      	b.n	8006228 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f0:	0b9b      	lsrs	r3, r3, #14
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	09db      	lsrs	r3, r3, #7
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610a:	b2da      	uxtb	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611a:	b2da      	uxtb	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	0fdb      	lsrs	r3, r3, #31
 8006126:	b2da      	uxtb	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	0f5b      	lsrs	r3, r3, #29
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	b2da      	uxtb	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	0e9b      	lsrs	r3, r3, #26
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	b2da      	uxtb	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	0d9b      	lsrs	r3, r3, #22
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	b2da      	uxtb	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	0d5b      	lsrs	r3, r3, #21
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	0bdb      	lsrs	r3, r3, #15
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	0b9b      	lsrs	r3, r3, #14
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	0b5b      	lsrs	r3, r3, #13
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	0b1b      	lsrs	r3, r3, #12
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	0a9b      	lsrs	r3, r3, #10
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	b2da      	uxtb	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	b2da      	uxtb	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	004005ff 	.word	0x004005ff

08006238 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800629c:	f107 030c 	add.w	r3, r7, #12
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9de 	bl	8006664 <SD_SendStatus>
 80062a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0a5b      	lsrs	r3, r3, #9
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80062c6:	693b      	ldr	r3, [r7, #16]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ffd1 	bl	8006290 <HAL_SD_GetCardState>
 80062ee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d002      	beq.n	800630a <SD_DMATxAbort+0x3a>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b05      	cmp	r3, #5
 8006308:	d10a      	bne.n	8006320 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 febe 	bl	8007090 <SDMMC_CmdStopTransfer>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	431a      	orrs	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 fae9 	bl	8007900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800632e:	e002      	b.n	8006336 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fdd3 	bl	8005edc <HAL_SD_ErrorCallback>
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f240 523a 	movw	r2, #1338	; 0x53a
 8006354:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff ff9a 	bl	8006290 <HAL_SD_GetCardState>
 800635c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b06      	cmp	r3, #6
 8006370:	d002      	beq.n	8006378 <SD_DMARxAbort+0x3a>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b05      	cmp	r3, #5
 8006376:	d10a      	bne.n	800638e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fe87 	bl	8007090 <SDMMC_CmdStopTransfer>
 8006382:	4602      	mov	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	431a      	orrs	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 fab2 	bl	8007900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800639c:	e002      	b.n	80063a4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fd9c 	bl	8005edc <HAL_SD_ErrorCallback>
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063ac:	b5b0      	push	{r4, r5, r7, lr}
 80063ae:	b094      	sub	sp, #80	; 0x50
 80063b0:	af04      	add	r7, sp, #16
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fd38 	bl	8006e32 <SDIO_GetPowerState>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063cc:	e0b8      	b.n	8006540 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d02f      	beq.n	8006436 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 ff1f 	bl	800721e <SDMMC_CmdSendCID>
 80063e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <SD_InitCard+0x40>
    {
      return errorstate;
 80063e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ea:	e0a9      	b.n	8006540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fd62 	bl	8006ebc <SDIO_GetResponse>
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2104      	movs	r1, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fd59 	bl	8006ebc <SDIO_GetResponse>
 800640a:	4602      	mov	r2, r0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2108      	movs	r1, #8
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fd50 	bl	8006ebc <SDIO_GetResponse>
 800641c:	4602      	mov	r2, r0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	210c      	movs	r1, #12
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fd47 	bl	8006ebc <SDIO_GetResponse>
 800642e:	4602      	mov	r2, r0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	2b03      	cmp	r3, #3
 800643c:	d00d      	beq.n	800645a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f107 020e 	add.w	r2, r7, #14
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 ff25 	bl	8007298 <SDMMC_CmdSetRelAdd>
 800644e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <SD_InitCard+0xae>
    {
      return errorstate;
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	e072      	b.n	8006540 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	2b03      	cmp	r3, #3
 8006460:	d036      	beq.n	80064d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	461a      	mov	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 feef 	bl	800725a <SDMMC_CmdSendCSD>
 800647c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	e05b      	b.n	8006540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fd14 	bl	8006ebc <SDIO_GetResponse>
 8006494:	4602      	mov	r2, r0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2104      	movs	r1, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fd0b 	bl	8006ebc <SDIO_GetResponse>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2108      	movs	r1, #8
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fd02 	bl	8006ebc <SDIO_GetResponse>
 80064b8:	4602      	mov	r2, r0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	210c      	movs	r1, #12
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fcf9 	bl	8006ebc <SDIO_GetResponse>
 80064ca:	4602      	mov	r2, r0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2104      	movs	r1, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fcf0 	bl	8006ebc <SDIO_GetResponse>
 80064dc:	4603      	mov	r3, r0
 80064de:	0d1a      	lsrs	r2, r3, #20
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80064e4:	f107 0310 	add.w	r3, r7, #16
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fd00 	bl	8005ef0 <HAL_SD_GetCardCSD>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064fa:	e021      	b.n	8006540 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	041b      	lsls	r3, r3, #16
 8006506:	2200      	movs	r2, #0
 8006508:	461c      	mov	r4, r3
 800650a:	4615      	mov	r5, r2
 800650c:	4622      	mov	r2, r4
 800650e:	462b      	mov	r3, r5
 8006510:	4608      	mov	r0, r1
 8006512:	f000 fddf 	bl	80070d4 <SDMMC_CmdSelDesel>
 8006516:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <SD_InitCard+0x176>
  {
    return errorstate;
 800651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006520:	e00e      	b.n	8006540 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	466c      	mov	r4, sp
 800652a:	f103 0210 	add.w	r2, r3, #16
 800652e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006534:	3304      	adds	r3, #4
 8006536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006538:	4628      	mov	r0, r5
 800653a:	f000 fc23 	bl	8006d84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3740      	adds	r7, #64	; 0x40
 8006544:	46bd      	mov	sp, r7
 8006546:	bdb0      	pop	{r4, r5, r7, pc}

08006548 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fdda 	bl	800711a <SDMMC_CmdGoIdleState>
 8006566:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <SD_PowerON+0x2a>
  {
    return errorstate;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	e072      	b.n	8006658 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fded 	bl	8007156 <SDMMC_CmdOperCond>
 800657c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fdc3 	bl	800711a <SDMMC_CmdGoIdleState>
 8006594:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	e05b      	b.n	8006658 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d137      	bne.n	800661e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fded 	bl	8007194 <SDMMC_CmdAppCommand>
 80065ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02d      	beq.n	800661e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065c6:	e047      	b.n	8006658 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fde0 	bl	8007194 <SDMMC_CmdAppCommand>
 80065d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	e03b      	b.n	8006658 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	491e      	ldr	r1, [pc, #120]	; (8006660 <SD_PowerON+0x118>)
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fdf6 	bl	80071d8 <SDMMC_CmdAppOperCommand>
 80065ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065f8:	e02e      	b.n	8006658 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fc5b 	bl	8006ebc <SDIO_GetResponse>
 8006606:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	0fdb      	lsrs	r3, r3, #31
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <SD_PowerON+0xcc>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <SD_PowerON+0xce>
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]

    count++;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3301      	adds	r3, #1
 800661c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006624:	4293      	cmp	r3, r2
 8006626:	d802      	bhi.n	800662e <SD_PowerON+0xe6>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0cc      	beq.n	80065c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006634:	4293      	cmp	r3, r2
 8006636:	d902      	bls.n	800663e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800663c:	e00c      	b.n	8006658 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	645a      	str	r2, [r3, #68]	; 0x44
 800664e:	e002      	b.n	8006656 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	c1100000 	.word	0xc1100000

08006664 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006678:	e018      	b.n	80066ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f000 fe27 	bl	80072da <SDMMC_CmdSendStatus>
 800668c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e009      	b.n	80066ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fc0c 	bl	8006ebc <SDIO_GetResponse>
 80066a4:	4602      	mov	r2, r0
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d03f      	beq.n	800674e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e033      	b.n	800673c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fb7e 	bl	8006dda <SDIO_ReadFIFO>
 80066de:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3b01      	subs	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3b01      	subs	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	0e1b      	lsrs	r3, r3, #24
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	701a      	strb	r2, [r3, #0]
      tmp++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3b01      	subs	r3, #1
 8006734:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	3301      	adds	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b07      	cmp	r3, #7
 8006740:	d9c8      	bls.n	80066d4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d043      	beq.n	80067f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e037      	b.n	80067e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3b01      	subs	r3, #1
 8006786:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	021a      	lsls	r2, r3, #8
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3b01      	subs	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	041a      	lsls	r2, r3, #16
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	061a      	lsls	r2, r3, #24
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f107 0208 	add.w	r2, r7, #8
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fb0a 	bl	8006df4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	3301      	adds	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b07      	cmp	r3, #7
 80067ea:	d9c4      	bls.n	8006776 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80067f8:	bf00      	nop
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e03f      	b.n	8006892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fcf2 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f829 	bl	800689c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800689c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a0:	b0c0      	sub	sp, #256	; 0x100
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	68d9      	ldr	r1, [r3, #12]
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	ea40 0301 	orr.w	r3, r0, r1
 80068c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	431a      	orrs	r2, r3
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068f4:	f021 010c 	bic.w	r1, r1, #12
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006902:	430b      	orrs	r3, r1
 8006904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006916:	6999      	ldr	r1, [r3, #24]
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	ea40 0301 	orr.w	r3, r0, r1
 8006922:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b8f      	ldr	r3, [pc, #572]	; (8006b68 <UART_SetConfig+0x2cc>)
 800692c:	429a      	cmp	r2, r3
 800692e:	d005      	beq.n	800693c <UART_SetConfig+0xa0>
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b8d      	ldr	r3, [pc, #564]	; (8006b6c <UART_SetConfig+0x2d0>)
 8006938:	429a      	cmp	r2, r3
 800693a:	d104      	bne.n	8006946 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800693c:	f7fd fb02 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8006940:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006944:	e003      	b.n	800694e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fd fae9 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 800694a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006958:	f040 810c 	bne.w	8006b74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800695c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006960:	2200      	movs	r2, #0
 8006962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006966:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800696a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800696e:	4622      	mov	r2, r4
 8006970:	462b      	mov	r3, r5
 8006972:	1891      	adds	r1, r2, r2
 8006974:	65b9      	str	r1, [r7, #88]	; 0x58
 8006976:	415b      	adcs	r3, r3
 8006978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800697a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800697e:	4621      	mov	r1, r4
 8006980:	eb12 0801 	adds.w	r8, r2, r1
 8006984:	4629      	mov	r1, r5
 8006986:	eb43 0901 	adc.w	r9, r3, r1
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800699a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800699e:	4690      	mov	r8, r2
 80069a0:	4699      	mov	r9, r3
 80069a2:	4623      	mov	r3, r4
 80069a4:	eb18 0303 	adds.w	r3, r8, r3
 80069a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ac:	462b      	mov	r3, r5
 80069ae:	eb49 0303 	adc.w	r3, r9, r3
 80069b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069ca:	460b      	mov	r3, r1
 80069cc:	18db      	adds	r3, r3, r3
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
 80069d0:	4613      	mov	r3, r2
 80069d2:	eb42 0303 	adc.w	r3, r2, r3
 80069d6:	657b      	str	r3, [r7, #84]	; 0x54
 80069d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069e0:	f7fa f952 	bl	8000c88 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4b61      	ldr	r3, [pc, #388]	; (8006b70 <UART_SetConfig+0x2d4>)
 80069ea:	fba3 2302 	umull	r2, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	011c      	lsls	r4, r3, #4
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a14:	4641      	mov	r1, r8
 8006a16:	eb12 0a01 	adds.w	sl, r2, r1
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a34:	4692      	mov	sl, r2
 8006a36:	469b      	mov	fp, r3
 8006a38:	4643      	mov	r3, r8
 8006a3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a42:	464b      	mov	r3, r9
 8006a44:	eb4b 0303 	adc.w	r3, fp, r3
 8006a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a60:	460b      	mov	r3, r1
 8006a62:	18db      	adds	r3, r3, r3
 8006a64:	643b      	str	r3, [r7, #64]	; 0x40
 8006a66:	4613      	mov	r3, r2
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a76:	f7fa f907 	bl	8000c88 <__aeabi_uldivmod>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <UART_SetConfig+0x2d4>)
 8006a82:	fba3 2301 	umull	r2, r3, r3, r1
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2264      	movs	r2, #100	; 0x64
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	1acb      	subs	r3, r1, r3
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a96:	4b36      	ldr	r3, [pc, #216]	; (8006b70 <UART_SetConfig+0x2d4>)
 8006a98:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006aa4:	441c      	add	r4, r3
 8006aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ab4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	1891      	adds	r1, r2, r2
 8006abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ac0:	415b      	adcs	r3, r3
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ac8:	4641      	mov	r1, r8
 8006aca:	1851      	adds	r1, r2, r1
 8006acc:	6339      	str	r1, [r7, #48]	; 0x30
 8006ace:	4649      	mov	r1, r9
 8006ad0:	414b      	adcs	r3, r1
 8006ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	00cb      	lsls	r3, r1, #3
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aea:	4651      	mov	r1, sl
 8006aec:	00ca      	lsls	r2, r1, #3
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	4642      	mov	r2, r8
 8006af6:	189b      	adds	r3, r3, r2
 8006af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006afc:	464b      	mov	r3, r9
 8006afe:	460a      	mov	r2, r1
 8006b00:	eb42 0303 	adc.w	r3, r2, r3
 8006b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	18db      	adds	r3, r3, r3
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b22:	4613      	mov	r3, r2
 8006b24:	eb42 0303 	adc.w	r3, r2, r3
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b32:	f7fa f8a9 	bl	8000c88 <__aeabi_uldivmod>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <UART_SetConfig+0x2d4>)
 8006b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	2164      	movs	r1, #100	; 0x64
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	3332      	adds	r3, #50	; 0x32
 8006b4e:	4a08      	ldr	r2, [pc, #32]	; (8006b70 <UART_SetConfig+0x2d4>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	f003 0207 	and.w	r2, r3, #7
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4422      	add	r2, r4
 8006b62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b64:	e105      	b.n	8006d72 <UART_SetConfig+0x4d6>
 8006b66:	bf00      	nop
 8006b68:	40011000 	.word	0x40011000
 8006b6c:	40011400 	.word	0x40011400
 8006b70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	6239      	str	r1, [r7, #32]
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
 8006b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b96:	4641      	mov	r1, r8
 8006b98:	1854      	adds	r4, r2, r1
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	eb43 0501 	adc.w	r5, r3, r1
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	00eb      	lsls	r3, r5, #3
 8006baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bae:	00e2      	lsls	r2, r4, #3
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	4643      	mov	r3, r8
 8006bb6:	18e3      	adds	r3, r4, r3
 8006bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	eb45 0303 	adc.w	r3, r5, r3
 8006bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006be2:	4629      	mov	r1, r5
 8006be4:	008b      	lsls	r3, r1, #2
 8006be6:	4621      	mov	r1, r4
 8006be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bec:	4621      	mov	r1, r4
 8006bee:	008a      	lsls	r2, r1, #2
 8006bf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bf4:	f7fa f848 	bl	8000c88 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4b60      	ldr	r3, [pc, #384]	; (8006d80 <UART_SetConfig+0x4e4>)
 8006bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	011c      	lsls	r4, r3, #4
 8006c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	1891      	adds	r1, r2, r2
 8006c1e:	61b9      	str	r1, [r7, #24]
 8006c20:	415b      	adcs	r3, r3
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c28:	4641      	mov	r1, r8
 8006c2a:	1851      	adds	r1, r2, r1
 8006c2c:	6139      	str	r1, [r7, #16]
 8006c2e:	4649      	mov	r1, r9
 8006c30:	414b      	adcs	r3, r1
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c40:	4659      	mov	r1, fp
 8006c42:	00cb      	lsls	r3, r1, #3
 8006c44:	4651      	mov	r1, sl
 8006c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	00ca      	lsls	r2, r1, #3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	4642      	mov	r2, r8
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	460a      	mov	r2, r1
 8006c60:	eb42 0303 	adc.w	r3, r2, r3
 8006c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c80:	4649      	mov	r1, r9
 8006c82:	008b      	lsls	r3, r1, #2
 8006c84:	4641      	mov	r1, r8
 8006c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c8a:	4641      	mov	r1, r8
 8006c8c:	008a      	lsls	r2, r1, #2
 8006c8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c92:	f7f9 fff9 	bl	8000c88 <__aeabi_uldivmod>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <UART_SetConfig+0x4e4>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a34      	ldr	r2, [pc, #208]	; (8006d80 <UART_SetConfig+0x4e4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cba:	441c      	add	r4, r3
 8006cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8006cc4:	677a      	str	r2, [r7, #116]	; 0x74
 8006cc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cca:	4642      	mov	r2, r8
 8006ccc:	464b      	mov	r3, r9
 8006cce:	1891      	adds	r1, r2, r2
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	415b      	adcs	r3, r3
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cda:	4641      	mov	r1, r8
 8006cdc:	1851      	adds	r1, r2, r1
 8006cde:	6039      	str	r1, [r7, #0]
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	414b      	adcs	r3, r1
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	00cb      	lsls	r3, r1, #3
 8006cf6:	4651      	mov	r1, sl
 8006cf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cfc:	4651      	mov	r1, sl
 8006cfe:	00ca      	lsls	r2, r1, #3
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	4603      	mov	r3, r0
 8006d06:	4642      	mov	r2, r8
 8006d08:	189b      	adds	r3, r3, r2
 8006d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	460a      	mov	r2, r1
 8006d10:	eb42 0303 	adc.w	r3, r2, r3
 8006d14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d20:	667a      	str	r2, [r7, #100]	; 0x64
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d2e:	4649      	mov	r1, r9
 8006d30:	008b      	lsls	r3, r1, #2
 8006d32:	4641      	mov	r1, r8
 8006d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d38:	4641      	mov	r1, r8
 8006d3a:	008a      	lsls	r2, r1, #2
 8006d3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d40:	f7f9 ffa2 	bl	8000c88 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <UART_SetConfig+0x4e4>)
 8006d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	2164      	movs	r1, #100	; 0x64
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	3332      	adds	r3, #50	; 0x32
 8006d5c:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <UART_SetConfig+0x4e4>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	f003 020f 	and.w	r2, r3, #15
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4422      	add	r2, r4
 8006d70:	609a      	str	r2, [r3, #8]
}
 8006d72:	bf00      	nop
 8006d74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d7e:	bf00      	nop
 8006d80:	51eb851f 	.word	0x51eb851f

08006d84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006d84:	b084      	sub	sp, #16
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	f107 001c 	add.w	r0, r7, #28
 8006d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006d9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006d9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006da2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006da6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006daa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006dae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	b004      	add	sp, #16
 8006dd8:	4770      	bx	lr

08006dda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2203      	movs	r2, #3
 8006e22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006e72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006e78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e88:	f023 030f 	bic.w	r3, r3, #15
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	b2db      	uxtb	r3, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	461a      	mov	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
}  
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006f0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006f14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0

}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b088      	sub	sp, #32
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006f48:	2310      	movs	r3, #16
 8006f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ff74 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6a:	2110      	movs	r1, #16
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9d7 	bl	8007320 <SDMMC_GetCmdResp1>
 8006f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f74:	69fb      	ldr	r3, [r7, #28]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b088      	sub	sp, #32
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006f8c:	2311      	movs	r3, #17
 8006f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f90:	2340      	movs	r3, #64	; 0x40
 8006f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ff52 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fae:	2111      	movs	r1, #17
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f9b5 	bl	8007320 <SDMMC_GetCmdResp1>
 8006fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b088      	sub	sp, #32
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006fd0:	2312      	movs	r3, #18
 8006fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ff30 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	2112      	movs	r1, #18
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f993 	bl	8007320 <SDMMC_GetCmdResp1>
 8006ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007014:	2318      	movs	r3, #24
 8007016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007018:	2340      	movs	r3, #64	; 0x40
 800701a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff ff0e 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007032:	f241 3288 	movw	r2, #5000	; 0x1388
 8007036:	2118      	movs	r1, #24
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f971 	bl	8007320 <SDMMC_GetCmdResp1>
 800703e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007040:	69fb      	ldr	r3, [r7, #28]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007058:	2319      	movs	r3, #25
 800705a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007068:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800706a:	f107 0308 	add.w	r3, r7, #8
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff feec 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007076:	f241 3288 	movw	r2, #5000	; 0x1388
 800707a:	2119      	movs	r1, #25
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f94f 	bl	8007320 <SDMMC_GetCmdResp1>
 8007082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007084:	69fb      	ldr	r3, [r7, #28]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800709c:	230c      	movs	r3, #12
 800709e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff feca 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <SDMMC_CmdStopTransfer+0x40>)
 80070bc:	210c      	movs	r1, #12
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f92e 	bl	8007320 <SDMMC_GetCmdResp1>
 80070c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070c6:	69fb      	ldr	r3, [r7, #28]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	05f5e100 	.word	0x05f5e100

080070d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070e4:	2307      	movs	r3, #7
 80070e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	4619      	mov	r1, r3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fea6 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007102:	f241 3288 	movw	r2, #5000	; 0x1388
 8007106:	2107      	movs	r1, #7
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f909 	bl	8007320 <SDMMC_GetCmdResp1>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	; 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fe85 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fb23 	bl	8007790 <SDMMC_GetCmdError>
 800714a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800714c:	69fb      	ldr	r3, [r7, #28]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b088      	sub	sp, #32
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800715e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007164:	2308      	movs	r3, #8
 8007166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff fe66 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fab6 	bl	80076f4 <SDMMC_GetCmdResp7>
 8007188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800718a:	69fb      	ldr	r3, [r7, #28]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3720      	adds	r7, #32
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80071a2:	2337      	movs	r3, #55	; 0x37
 80071a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071b4:	f107 0308 	add.w	r3, r7, #8
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fe47 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80071c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c4:	2137      	movs	r1, #55	; 0x37
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f8aa 	bl	8007320 <SDMMC_GetCmdResp1>
 80071cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ce:	69fb      	ldr	r3, [r7, #28]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071ee:	2329      	movs	r3, #41	; 0x29
 80071f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fe21 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9bd 	bl	800758c <SDMMC_GetCmdResp3>
 8007212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007214:	69fb      	ldr	r3, [r7, #28]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800722a:	2302      	movs	r3, #2
 800722c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800722e:	23c0      	movs	r3, #192	; 0xc0
 8007230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fe03 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f957 	bl	80074fc <SDMMC_GetCmdResp2>
 800724e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007250:	69fb      	ldr	r3, [r7, #28]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007268:	2309      	movs	r3, #9
 800726a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800726c:	23c0      	movs	r3, #192	; 0xc0
 800726e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007278:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800727a:	f107 0308 	add.w	r3, r7, #8
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fde4 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f938 	bl	80074fc <SDMMC_GetCmdResp2>
 800728c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800728e:	69fb      	ldr	r3, [r7, #28]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80072a6:	2303      	movs	r3, #3
 80072a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072aa:	2340      	movs	r3, #64	; 0x40
 80072ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fdc5 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f99d 	bl	8007608 <SDMMC_GetCmdResp6>
 80072ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d0:	69fb      	ldr	r3, [r7, #28]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80072e8:	230d      	movs	r3, #13
 80072ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fda4 	bl	8006e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007306:	f241 3288 	movw	r2, #5000	; 0x1388
 800730a:	210d      	movs	r1, #13
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f807 	bl	8007320 <SDMMC_GetCmdResp1>
 8007312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007314:	69fb      	ldr	r3, [r7, #28]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	460b      	mov	r3, r1
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800732e:	4b70      	ldr	r3, [pc, #448]	; (80074f0 <SDMMC_GetCmdResp1+0x1d0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a70      	ldr	r2, [pc, #448]	; (80074f4 <SDMMC_GetCmdResp1+0x1d4>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	0a5a      	lsrs	r2, r3, #9
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	1e5a      	subs	r2, r3, #1
 8007346:	61fa      	str	r2, [r7, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800734c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007350:	e0c9      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0ef      	beq.n	8007342 <SDMMC_GetCmdResp1+0x22>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ea      	bne.n	8007342 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2204      	movs	r2, #4
 800737c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800737e:	2304      	movs	r3, #4
 8007380:	e0b1      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007394:	2301      	movs	r3, #1
 8007396:	e0a6      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	22c5      	movs	r2, #197	; 0xc5
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fd7f 	bl	8006ea2 <SDIO_GetCommandResponse>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	7afb      	ldrb	r3, [r7, #11]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d001      	beq.n	80073b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e099      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073b2:	2100      	movs	r1, #0
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff fd81 	bl	8006ebc <SDIO_GetResponse>
 80073ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4b4e      	ldr	r3, [pc, #312]	; (80074f8 <SDMMC_GetCmdResp1+0x1d8>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e08d      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da02      	bge.n	80073d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80073d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073d4:	e087      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80073e0:	2340      	movs	r3, #64	; 0x40
 80073e2:	e080      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	e079      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80073fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007400:	e071      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800740c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007410:	e069      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800741c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007420:	e061      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800742c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007430:	e059      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800743c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007440:	e051      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800744c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007450:	e049      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800745c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007460:	e041      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800746c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007470:	e039      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800747c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007480:	e031      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800748c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007490:	e029      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800749c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074a0:	e021      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80074ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074b0:	e019      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80074bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074c0:	e011      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80074cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80074d0:	e009      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80074dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074e0:	e001      	b.n	80074e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000000 	.word	0x20000000
 80074f4:	10624dd3 	.word	0x10624dd3
 80074f8:	fdffe008 	.word	0xfdffe008

080074fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007504:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <SDMMC_GetCmdResp2+0x88>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <SDMMC_GetCmdResp2+0x8c>)
 800750a:	fba2 2303 	umull	r2, r3, r2, r3
 800750e:	0a5b      	lsrs	r3, r3, #9
 8007510:	f241 3288 	movw	r2, #5000	; 0x1388
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1e5a      	subs	r2, r3, #1
 800751e:	60fa      	str	r2, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007528:	e026      	b.n	8007578 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ef      	beq.n	800751a <SDMMC_GetCmdResp2+0x1e>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ea      	bne.n	800751a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2204      	movs	r2, #4
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007556:	2304      	movs	r3, #4
 8007558:	e00e      	b.n	8007578 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800756c:	2301      	movs	r3, #1
 800756e:	e003      	b.n	8007578 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	22c5      	movs	r2, #197	; 0xc5
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20000000 	.word	0x20000000
 8007588:	10624dd3 	.word	0x10624dd3

0800758c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <SDMMC_GetCmdResp3+0x74>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <SDMMC_GetCmdResp3+0x78>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0a5b      	lsrs	r3, r3, #9
 80075a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a4:	fb02 f303 	mul.w	r3, r2, r3
 80075a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	60fa      	str	r2, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075b8:	e01b      	b.n	80075f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0ef      	beq.n	80075aa <SDMMC_GetCmdResp3+0x1e>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1ea      	bne.n	80075aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2204      	movs	r2, #4
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075e6:	2304      	movs	r3, #4
 80075e8:	e003      	b.n	80075f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	22c5      	movs	r2, #197	; 0xc5
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000000 	.word	0x20000000
 8007604:	10624dd3 	.word	0x10624dd3

08007608 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	460b      	mov	r3, r1
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007616:	4b35      	ldr	r3, [pc, #212]	; (80076ec <SDMMC_GetCmdResp6+0xe4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a35      	ldr	r2, [pc, #212]	; (80076f0 <SDMMC_GetCmdResp6+0xe8>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	0a5b      	lsrs	r3, r3, #9
 8007622:	f241 3288 	movw	r2, #5000	; 0x1388
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	1e5a      	subs	r2, r3, #1
 8007630:	61fa      	str	r2, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d102      	bne.n	800763c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007636:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800763a:	e052      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0ef      	beq.n	800762c <SDMMC_GetCmdResp6+0x24>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1ea      	bne.n	800762c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2204      	movs	r2, #4
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007668:	2304      	movs	r3, #4
 800766a:	e03a      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800767e:	2301      	movs	r3, #1
 8007680:	e02f      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fc0d 	bl	8006ea2 <SDIO_GetCommandResponse>
 8007688:	4603      	mov	r3, r0
 800768a:	461a      	mov	r2, r3
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	4293      	cmp	r3, r2
 8007690:	d001      	beq.n	8007696 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007692:	2301      	movs	r3, #1
 8007694:	e025      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	22c5      	movs	r2, #197	; 0xc5
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fc0c 	bl	8006ebc <SDIO_GetResponse>
 80076a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e011      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80076c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076cc:	e009      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80076d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076dc:	e001      	b.n	80076e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000000 	.word	0x20000000
 80076f0:	10624dd3 	.word	0x10624dd3

080076f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <SDMMC_GetCmdResp7+0x94>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	; (800778c <SDMMC_GetCmdResp7+0x98>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	0a5b      	lsrs	r3, r3, #9
 8007708:	f241 3288 	movw	r2, #5000	; 0x1388
 800770c:	fb02 f303 	mul.w	r3, r2, r3
 8007710:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	60fa      	str	r2, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d102      	bne.n	8007722 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800771c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007720:	e02c      	b.n	800777c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0ef      	beq.n	8007712 <SDMMC_GetCmdResp7+0x1e>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ea      	bne.n	8007712 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2204      	movs	r2, #4
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800774e:	2304      	movs	r3, #4
 8007750:	e014      	b.n	800777c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007764:	2301      	movs	r3, #1
 8007766:	e009      	b.n	800777c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2240      	movs	r2, #64	; 0x40
 8007778:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800777a:	2300      	movs	r3, #0
  
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000000 	.word	0x20000000
 800778c:	10624dd3 	.word	0x10624dd3

08007790 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007798:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <SDMMC_GetCmdError+0x50>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <SDMMC_GetCmdError+0x54>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0a5b      	lsrs	r3, r3, #9
 80077a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a8:	fb02 f303 	mul.w	r3, r2, r3
 80077ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077bc:	e009      	b.n	80077d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f1      	beq.n	80077ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	22c5      	movs	r2, #197	; 0xc5
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000000 	.word	0x20000000
 80077e4:	10624dd3 	.word	0x10624dd3

080077e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80077ec:	4904      	ldr	r1, [pc, #16]	; (8007800 <MX_FATFS_Init+0x18>)
 80077ee:	4805      	ldr	r0, [pc, #20]	; (8007804 <MX_FATFS_Init+0x1c>)
 80077f0:	f003 fac0 	bl	800ad74 <FATFS_LinkDriver>
 80077f4:	4603      	mov	r3, r0
 80077f6:	461a      	mov	r2, r3
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <MX_FATFS_Init+0x20>)
 80077fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	200031c8 	.word	0x200031c8
 8007804:	0800e690 	.word	0x0800e690
 8007808:	200031c4 	.word	0x200031c4

0800780c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007810:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007826:	f000 f89e 	bl	8007966 <BSP_SD_IsDetected>
 800782a:	4603      	mov	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d001      	beq.n	8007834 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e005      	b.n	8007840 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007834:	4804      	ldr	r0, [pc, #16]	; (8007848 <BSP_SD_Init+0x2c>)
 8007836:	f7fd fdc6 	bl	80053c6 <HAL_SD_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800783e:	79fb      	ldrb	r3, [r7, #7]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	200002c0 	.word	0x200002c0

0800784c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	4806      	ldr	r0, [pc, #24]	; (8007884 <BSP_SD_ReadBlocks+0x38>)
 800786a:	f7fd fe5d 	bl	8005528 <HAL_SD_ReadBlocks>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200002c0 	.word	0x200002c0

08007888 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	4806      	ldr	r0, [pc, #24]	; (80078c0 <BSP_SD_WriteBlocks+0x38>)
 80078a6:	f7fe f81d 	bl	80058e4 <HAL_SD_WriteBlocks>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200002c0 	.word	0x200002c0

080078c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <BSP_SD_GetCardState+0x1c>)
 80078ca:	f7fe fce1 	bl	8006290 <HAL_SD_GetCardState>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
}
 80078da:	4618      	mov	r0, r3
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	200002c0 	.word	0x200002c0

080078e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4803      	ldr	r0, [pc, #12]	; (80078fc <BSP_SD_GetCardInfo+0x18>)
 80078f0:	f7fe fca2 	bl	8006238 <HAL_SD_GetCardInfo>
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	200002c0 	.word	0x200002c0

08007900 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007908:	f000 f818 	bl	800793c <BSP_SD_AbortCallback>
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800791c:	f000 f815 	bl	800794a <BSP_SD_WriteCpltCallback>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007930:	f000 f812 	bl	8007958 <BSP_SD_ReadCpltCallback>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0

}
 8007940:	bf00      	nop
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800794a:	b480      	push	{r7}
 800794c:	af00      	add	r7, sp, #0

}
 800794e:	bf00      	nop
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0

}
 800795c:	bf00      	nop
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800796c:	2301      	movs	r3, #1
 800796e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007970:	f000 f80c 	bl	800798c <BSP_PlatformIsDetected>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800797a:	2300      	movs	r3, #0
 800797c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	b2db      	uxtb	r3, r3
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007992:	2301      	movs	r3, #1
 8007994:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007996:	2102      	movs	r1, #2
 8007998:	4806      	ldr	r0, [pc, #24]	; (80079b4 <BSP_PlatformIsDetected+0x28>)
 800799a:	f7fc f94b 	bl	8003c34 <HAL_GPIO_ReadPin>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80079a4:	2300      	movs	r3, #0
 80079a6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80079a8:	79fb      	ldrb	r3, [r7, #7]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40020800 	.word	0x40020800

080079b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <SD_CheckStatus+0x38>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80079c8:	f7ff ff7c 	bl	80078c4 <BSP_SD_GetCardState>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d107      	bne.n	80079e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <SD_CheckStatus+0x38>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <SD_CheckStatus+0x38>)
 80079e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80079e2:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <SD_CheckStatus+0x38>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b2db      	uxtb	r3, r3
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000009 	.word	0x20000009

080079f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <SD_initialize+0x38>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007a04:	f7ff ff0a 	bl	800781c <BSP_SD_Init>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ffd1 	bl	80079b8 <SD_CheckStatus>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <SD_initialize+0x38>)
 8007a1c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007a1e:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <SD_initialize+0x38>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000009 	.word	0x20000009

08007a30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff ffbb 	bl	80079b8 <SD_CheckStatus>
 8007a42:	4603      	mov	r3, r0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007a60:	f04f 33ff 	mov.w	r3, #4294967295
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	68b8      	ldr	r0, [r7, #8]
 8007a6a:	f7ff feef 	bl	800784c <BSP_SD_ReadBlocks>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d107      	bne.n	8007a84 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007a74:	bf00      	nop
 8007a76:	f7ff ff25 	bl	80078c4 <BSP_SD_GetCardState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1fa      	bne.n	8007a76 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b086      	sub	sp, #24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	68b8      	ldr	r0, [r7, #8]
 8007aac:	f7ff feec 	bl	8007888 <BSP_SD_WriteBlocks>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d107      	bne.n	8007ac6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007ab6:	bf00      	nop
 8007ab8:	f7ff ff04 	bl	80078c4 <BSP_SD_GetCardState>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1fa      	bne.n	8007ab8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08c      	sub	sp, #48	; 0x30
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	603a      	str	r2, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
 8007adc:	460b      	mov	r3, r1
 8007ade:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007ae6:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <SD_ioctl+0xac>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <SD_ioctl+0x28>
 8007af4:	2303      	movs	r3, #3
 8007af6:	e03c      	b.n	8007b72 <SD_ioctl+0xa2>

  switch (cmd)
 8007af8:	79bb      	ldrb	r3, [r7, #6]
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d834      	bhi.n	8007b68 <SD_ioctl+0x98>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <SD_ioctl+0x34>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b15 	.word	0x08007b15
 8007b08:	08007b1d 	.word	0x08007b1d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b4f 	.word	0x08007b4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b1a:	e028      	b.n	8007b6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fedf 	bl	80078e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b32:	e01c      	b.n	8007b6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fed3 	bl	80078e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b4c:	e00f      	b.n	8007b6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fec6 	bl	80078e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	0a5a      	lsrs	r2, r3, #9
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b66:	e002      	b.n	8007b6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000009 	.word	0x20000009

08007b80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	4a08      	ldr	r2, [pc, #32]	; (8007bb0 <disk_status+0x30>)
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	79fa      	ldrb	r2, [r7, #7]
 8007b98:	4905      	ldr	r1, [pc, #20]	; (8007bb0 <disk_status+0x30>)
 8007b9a:	440a      	add	r2, r1
 8007b9c:	7a12      	ldrb	r2, [r2, #8]
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200031f4 	.word	0x200031f4

08007bb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <disk_initialize+0x48>)
 8007bc6:	5cd3      	ldrb	r3, [r2, r3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d111      	bne.n	8007bf0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	4a0b      	ldr	r2, [pc, #44]	; (8007bfc <disk_initialize+0x48>)
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <disk_initialize+0x48>)
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	79fa      	ldrb	r2, [r7, #7]
 8007be2:	4906      	ldr	r1, [pc, #24]	; (8007bfc <disk_initialize+0x48>)
 8007be4:	440a      	add	r2, r1
 8007be6:	7a12      	ldrb	r2, [r2, #8]
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200031f4 	.word	0x200031f4

08007c00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <disk_read+0x3c>)
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	689c      	ldr	r4, [r3, #8]
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <disk_read+0x3c>)
 8007c20:	4413      	add	r3, r2
 8007c22:	7a18      	ldrb	r0, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	47a0      	blx	r4
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd90      	pop	{r4, r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200031f4 	.word	0x200031f4

08007c40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c40:	b590      	push	{r4, r7, lr}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4a0a      	ldr	r2, [pc, #40]	; (8007c7c <disk_write+0x3c>)
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	68dc      	ldr	r4, [r3, #12]
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	4a07      	ldr	r2, [pc, #28]	; (8007c7c <disk_write+0x3c>)
 8007c60:	4413      	add	r3, r2
 8007c62:	7a18      	ldrb	r0, [r3, #8]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	47a0      	blx	r4
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200031f4 	.word	0x200031f4

08007c80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	603a      	str	r2, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <disk_ioctl+0x38>)
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	79fa      	ldrb	r2, [r7, #7]
 8007c9e:	4906      	ldr	r1, [pc, #24]	; (8007cb8 <disk_ioctl+0x38>)
 8007ca0:	440a      	add	r2, r1
 8007ca2:	7a10      	ldrb	r0, [r2, #8]
 8007ca4:	79b9      	ldrb	r1, [r7, #6]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
  return res;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	200031f4 	.word	0x200031f4

08007cbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	b21a      	sxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007cde:	89fb      	ldrh	r3, [r7, #14]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3303      	adds	r3, #3
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	3202      	adds	r2, #2
 8007d04:	7812      	ldrb	r2, [r2, #0]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	3201      	adds	r2, #1
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	1c53      	adds	r3, r2, #1
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	6179      	str	r1, [r7, #20]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	607b      	str	r3, [r7, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f1      	bne.n	8007dda <mem_cpy+0x1a>
	}
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e02:	b480      	push	{r7}
 8007e04:	b087      	sub	sp, #28
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	617a      	str	r2, [r7, #20]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f3      	bne.n	8007e12 <mem_set+0x10>
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	; 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	61ba      	str	r2, [r7, #24]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	1acb      	subs	r3, r1, r3
 8007e64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <mem_cmp+0x40>
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0eb      	beq.n	8007e50 <mem_cmp+0x18>

	return r;
 8007e78:	697b      	ldr	r3, [r7, #20]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3724      	adds	r7, #36	; 0x24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e90:	e002      	b.n	8007e98 <chk_chr+0x12>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3301      	adds	r3, #1
 8007e96:	607b      	str	r3, [r7, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <chk_chr+0x26>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d1f2      	bne.n	8007e92 <chk_chr+0xc>
	return *str;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	781b      	ldrb	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	e029      	b.n	8007f24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ed0:	4a27      	ldr	r2, [pc, #156]	; (8007f70 <chk_lock+0xb4>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	4413      	add	r3, r2
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01d      	beq.n	8007f1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ede:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <chk_lock+0xb4>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	4413      	add	r3, r2
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d116      	bne.n	8007f1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007ef0:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <chk_lock+0xb4>)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d10c      	bne.n	8007f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f04:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <chk_lock+0xb4>)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	4413      	add	r3, r2
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d102      	bne.n	8007f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f18:	e007      	b.n	8007f2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d9d2      	bls.n	8007ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d109      	bne.n	8007f44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <chk_lock+0x80>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d101      	bne.n	8007f40 <chk_lock+0x84>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e010      	b.n	8007f62 <chk_lock+0xa6>
 8007f40:	2312      	movs	r3, #18
 8007f42:	e00e      	b.n	8007f62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d108      	bne.n	8007f5c <chk_lock+0xa0>
 8007f4a:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <chk_lock+0xb4>)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	4413      	add	r3, r2
 8007f52:	330c      	adds	r3, #12
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5a:	d101      	bne.n	8007f60 <chk_lock+0xa4>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	e000      	b.n	8007f62 <chk_lock+0xa6>
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	200031d4 	.word	0x200031d4

08007f74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	e002      	b.n	8007f86 <enq_lock+0x12>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3301      	adds	r3, #1
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d806      	bhi.n	8007f9a <enq_lock+0x26>
 8007f8c:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <enq_lock+0x40>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	4413      	add	r3, r2
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f2      	bne.n	8007f80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	200031d4 	.word	0x200031d4

08007fb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	e01f      	b.n	8008008 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007fc8:	4a41      	ldr	r2, [pc, #260]	; (80080d0 <inc_lock+0x118>)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d113      	bne.n	8008002 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007fda:	4a3d      	ldr	r2, [pc, #244]	; (80080d0 <inc_lock+0x118>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d109      	bne.n	8008002 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007fee:	4a38      	ldr	r2, [pc, #224]	; (80080d0 <inc_lock+0x118>)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d006      	beq.n	8008010 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d9dc      	bls.n	8007fc8 <inc_lock+0x10>
 800800e:	e000      	b.n	8008012 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008010:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d132      	bne.n	800807e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	e002      	b.n	8008024 <inc_lock+0x6c>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d806      	bhi.n	8008038 <inc_lock+0x80>
 800802a:	4a29      	ldr	r2, [pc, #164]	; (80080d0 <inc_lock+0x118>)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	4413      	add	r3, r2
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f2      	bne.n	800801e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d101      	bne.n	8008042 <inc_lock+0x8a>
 800803e:	2300      	movs	r3, #0
 8008040:	e040      	b.n	80080c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4922      	ldr	r1, [pc, #136]	; (80080d0 <inc_lock+0x118>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	440b      	add	r3, r1
 800804e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	491e      	ldr	r1, [pc, #120]	; (80080d0 <inc_lock+0x118>)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	440b      	add	r3, r1
 800805c:	3304      	adds	r3, #4
 800805e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	491a      	ldr	r1, [pc, #104]	; (80080d0 <inc_lock+0x118>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	440b      	add	r3, r1
 800806c:	3308      	adds	r3, #8
 800806e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <inc_lock+0x118>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	4413      	add	r3, r2
 8008078:	330c      	adds	r3, #12
 800807a:	2200      	movs	r2, #0
 800807c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <inc_lock+0xe0>
 8008084:	4a12      	ldr	r2, [pc, #72]	; (80080d0 <inc_lock+0x118>)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	4413      	add	r3, r2
 800808c:	330c      	adds	r3, #12
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <inc_lock+0xe0>
 8008094:	2300      	movs	r3, #0
 8008096:	e015      	b.n	80080c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <inc_lock+0xf8>
 800809e:	4a0c      	ldr	r2, [pc, #48]	; (80080d0 <inc_lock+0x118>)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4413      	add	r3, r2
 80080a6:	330c      	adds	r3, #12
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	e001      	b.n	80080b4 <inc_lock+0xfc>
 80080b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080b4:	4906      	ldr	r1, [pc, #24]	; (80080d0 <inc_lock+0x118>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	440b      	add	r3, r1
 80080bc:	330c      	adds	r3, #12
 80080be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	200031d4 	.word	0x200031d4

080080d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3b01      	subs	r3, #1
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d825      	bhi.n	8008134 <dec_lock+0x60>
		n = Files[i].ctr;
 80080e8:	4a17      	ldr	r2, [pc, #92]	; (8008148 <dec_lock+0x74>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	4413      	add	r3, r2
 80080f0:	330c      	adds	r3, #12
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80080f6:	89fb      	ldrh	r3, [r7, #14]
 80080f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fc:	d101      	bne.n	8008102 <dec_lock+0x2e>
 80080fe:	2300      	movs	r3, #0
 8008100:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008102:	89fb      	ldrh	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <dec_lock+0x3a>
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	3b01      	subs	r3, #1
 800810c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800810e:	4a0e      	ldr	r2, [pc, #56]	; (8008148 <dec_lock+0x74>)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	4413      	add	r3, r2
 8008116:	330c      	adds	r3, #12
 8008118:	89fa      	ldrh	r2, [r7, #14]
 800811a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <dec_lock+0x5a>
 8008122:	4a09      	ldr	r2, [pc, #36]	; (8008148 <dec_lock+0x74>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	4413      	add	r3, r2
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	737b      	strb	r3, [r7, #13]
 8008132:	e001      	b.n	8008138 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008134:	2302      	movs	r3, #2
 8008136:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008138:	7b7b      	ldrb	r3, [r7, #13]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	200031d4 	.word	0x200031d4

0800814c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e010      	b.n	800817c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800815a:	4a0d      	ldr	r2, [pc, #52]	; (8008190 <clear_lock+0x44>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	4413      	add	r3, r2
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d105      	bne.n	8008176 <clear_lock+0x2a>
 800816a:	4a09      	ldr	r2, [pc, #36]	; (8008190 <clear_lock+0x44>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	4413      	add	r3, r2
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d9eb      	bls.n	800815a <clear_lock+0xe>
	}
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	200031d4 	.word	0x200031d4

08008194 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	78db      	ldrb	r3, [r3, #3]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d034      	beq.n	8008212 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7858      	ldrb	r0, [r3, #1]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081b8:	2301      	movs	r3, #1
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	f7ff fd40 	bl	8007c40 <disk_write>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
 80081ca:	e022      	b.n	8008212 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d217      	bcs.n	8008212 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	789b      	ldrb	r3, [r3, #2]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	e010      	b.n	800820c <sync_window+0x78>
					wsect += fs->fsize;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4413      	add	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7858      	ldrb	r0, [r3, #1]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081fe:	2301      	movs	r3, #1
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	f7ff fd1d 	bl	8007c40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3b01      	subs	r3, #1
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d8eb      	bhi.n	80081ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d01b      	beq.n	800826c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffad 	bl	8008194 <sync_window>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d113      	bne.n	800826c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7858      	ldrb	r0, [r3, #1]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800824e:	2301      	movs	r3, #1
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	f7ff fcd5 	bl	8007c00 <disk_read>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800825c:	f04f 33ff 	mov.w	r3, #4294967295
 8008260:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff ff87 	bl	8008194 <sync_window>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d159      	bne.n	8008344 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b03      	cmp	r3, #3
 8008296:	d149      	bne.n	800832c <sync_fs+0xb4>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d145      	bne.n	800832c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	899b      	ldrh	r3, [r3, #12]
 80082aa:	461a      	mov	r2, r3
 80082ac:	2100      	movs	r1, #0
 80082ae:	f7ff fda8 	bl	8007e02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3334      	adds	r3, #52	; 0x34
 80082b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fd37 	bl	8007d32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3334      	adds	r3, #52	; 0x34
 80082c8:	4921      	ldr	r1, [pc, #132]	; (8008350 <sync_fs+0xd8>)
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fd4c 	bl	8007d68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3334      	adds	r3, #52	; 0x34
 80082d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082d8:	491e      	ldr	r1, [pc, #120]	; (8008354 <sync_fs+0xdc>)
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff fd44 	bl	8007d68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3334      	adds	r3, #52	; 0x34
 80082e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7ff fd3a 	bl	8007d68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3334      	adds	r3, #52	; 0x34
 80082f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7ff fd30 	bl	8007d68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7858      	ldrb	r0, [r3, #1]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008320:	2301      	movs	r3, #1
 8008322:	f7ff fc8d 	bl	8007c40 <disk_write>
			fs->fsi_flag = 0;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff fca3 	bl	8007c80 <disk_ioctl>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <sync_fs+0xcc>
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	41615252 	.word	0x41615252
 8008354:	61417272 	.word	0x61417272

08008358 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	3b02      	subs	r3, #2
 8008366:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	3b02      	subs	r3, #2
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d301      	bcc.n	8008378 <clust2sect+0x20>
 8008374:	2300      	movs	r3, #0
 8008376:	e008      	b.n	800838a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	895b      	ldrh	r3, [r3, #10]
 800837c:	461a      	mov	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	fb03 f202 	mul.w	r2, r3, r2
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	4413      	add	r3, r2
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d904      	bls.n	80083b6 <get_fat+0x20>
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d302      	bcc.n	80083bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80083b6:	2301      	movs	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e0bb      	b.n	8008534 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	f000 8083 	beq.w	80084d2 <get_fat+0x13c>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	f300 80a7 	bgt.w	8008520 <get_fat+0x18a>
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d002      	beq.n	80083dc <get_fat+0x46>
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d056      	beq.n	8008488 <get_fat+0xf2>
 80083da:	e0a1      	b.n	8008520 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	899b      	ldrh	r3, [r3, #12]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083fa:	4413      	add	r3, r2
 80083fc:	4619      	mov	r1, r3
 80083fe:	6938      	ldr	r0, [r7, #16]
 8008400:	f7ff ff0c 	bl	800821c <move_window>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	f040 808d 	bne.w	8008526 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	60fa      	str	r2, [r7, #12]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	8992      	ldrh	r2, [r2, #12]
 8008416:	fbb3 f1f2 	udiv	r1, r3, r2
 800841a:	fb01 f202 	mul.w	r2, r1, r2
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008428:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	899b      	ldrh	r3, [r3, #12]
 8008432:	4619      	mov	r1, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	fbb3 f3f1 	udiv	r3, r3, r1
 800843a:	4413      	add	r3, r2
 800843c:	4619      	mov	r1, r3
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff feec 	bl	800821c <move_window>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d16f      	bne.n	800852a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	899b      	ldrh	r3, [r3, #12]
 800844e:	461a      	mov	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	fbb3 f1f2 	udiv	r1, r3, r2
 8008456:	fb01 f202 	mul.w	r2, r1, r2
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	461a      	mov	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <get_fat+0xe8>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	091b      	lsrs	r3, r3, #4
 800847c:	e002      	b.n	8008484 <get_fat+0xee>
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008484:	617b      	str	r3, [r7, #20]
			break;
 8008486:	e055      	b.n	8008534 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	899b      	ldrh	r3, [r3, #12]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	b29b      	uxth	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	fbb3 f3f1 	udiv	r3, r3, r1
 800849c:	4413      	add	r3, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	6938      	ldr	r0, [r7, #16]
 80084a2:	f7ff febb 	bl	800821c <move_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d140      	bne.n	800852e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	8992      	ldrh	r2, [r2, #12]
 80084ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80084be:	fb00 f202 	mul.w	r2, r0, r2
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	440b      	add	r3, r1
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fbf8 	bl	8007cbc <ld_word>
 80084cc:	4603      	mov	r3, r0
 80084ce:	617b      	str	r3, [r7, #20]
			break;
 80084d0:	e030      	b.n	8008534 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	899b      	ldrh	r3, [r3, #12]
 80084da:	089b      	lsrs	r3, r3, #2
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084e6:	4413      	add	r3, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	6938      	ldr	r0, [r7, #16]
 80084ec:	f7ff fe96 	bl	800821c <move_window>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11d      	bne.n	8008532 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	8992      	ldrh	r2, [r2, #12]
 8008504:	fbb3 f0f2 	udiv	r0, r3, r2
 8008508:	fb00 f202 	mul.w	r2, r0, r2
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	440b      	add	r3, r1
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fbeb 	bl	8007cec <ld_dword>
 8008516:	4603      	mov	r3, r0
 8008518:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800851c:	617b      	str	r3, [r7, #20]
			break;
 800851e:	e009      	b.n	8008534 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008520:	2301      	movs	r3, #1
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e006      	b.n	8008534 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008526:	bf00      	nop
 8008528:	e004      	b.n	8008534 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008532:	bf00      	nop
		}
	}

	return val;
 8008534:	697b      	ldr	r3, [r7, #20]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800853e:	b590      	push	{r4, r7, lr}
 8008540:	b089      	sub	sp, #36	; 0x24
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800854a:	2302      	movs	r3, #2
 800854c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b01      	cmp	r3, #1
 8008552:	f240 8102 	bls.w	800875a <put_fat+0x21c>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	429a      	cmp	r2, r3
 800855e:	f080 80fc 	bcs.w	800875a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b03      	cmp	r3, #3
 8008568:	f000 80b6 	beq.w	80086d8 <put_fat+0x19a>
 800856c:	2b03      	cmp	r3, #3
 800856e:	f300 80fd 	bgt.w	800876c <put_fat+0x22e>
 8008572:	2b01      	cmp	r3, #1
 8008574:	d003      	beq.n	800857e <put_fat+0x40>
 8008576:	2b02      	cmp	r3, #2
 8008578:	f000 8083 	beq.w	8008682 <put_fat+0x144>
 800857c:	e0f6      	b.n	800876c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4413      	add	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	899b      	ldrh	r3, [r3, #12]
 8008594:	4619      	mov	r1, r3
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	fbb3 f3f1 	udiv	r3, r3, r1
 800859c:	4413      	add	r3, r2
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fe3b 	bl	800821c <move_window>
 80085a6:	4603      	mov	r3, r0
 80085a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085aa:	7ffb      	ldrb	r3, [r7, #31]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 80d6 	bne.w	800875e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	61ba      	str	r2, [r7, #24]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	8992      	ldrh	r2, [r2, #12]
 80085c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80085c6:	fb00 f202 	mul.w	r2, r0, r2
 80085ca:	1a9b      	subs	r3, r3, r2
 80085cc:	440b      	add	r3, r1
 80085ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <put_fat+0xb8>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	f003 030f 	and.w	r3, r3, #15
 80085e4:	b25a      	sxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	b25b      	sxtb	r3, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	e001      	b.n	80085fa <put_fat+0xbc>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	899b      	ldrh	r3, [r3, #12]
 800860c:	4619      	mov	r1, r3
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	fbb3 f3f1 	udiv	r3, r3, r1
 8008614:	4413      	add	r3, r2
 8008616:	4619      	mov	r1, r3
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff fdff 	bl	800821c <move_window>
 800861e:	4603      	mov	r3, r0
 8008620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008622:	7ffb      	ldrb	r3, [r7, #31]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 809c 	bne.w	8008762 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	899b      	ldrh	r3, [r3, #12]
 8008634:	461a      	mov	r2, r3
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	fbb3 f0f2 	udiv	r0, r3, r2
 800863c:	fb00 f202 	mul.w	r2, r0, r2
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	440b      	add	r3, r1
 8008644:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <put_fat+0x11a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	091b      	lsrs	r3, r3, #4
 8008654:	b2db      	uxtb	r3, r3
 8008656:	e00e      	b.n	8008676 <put_fat+0x138>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b25b      	sxtb	r3, r3
 800865e:	f023 030f 	bic.w	r3, r3, #15
 8008662:	b25a      	sxtb	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b25b      	sxtb	r3, r3
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	b25b      	sxtb	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b25b      	sxtb	r3, r3
 8008674:	b2db      	uxtb	r3, r3
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	70da      	strb	r2, [r3, #3]
			break;
 8008680:	e074      	b.n	800876c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	899b      	ldrh	r3, [r3, #12]
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	b29b      	uxth	r3, r3
 800868e:	4619      	mov	r1, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	fbb3 f3f1 	udiv	r3, r3, r1
 8008696:	4413      	add	r3, r2
 8008698:	4619      	mov	r1, r3
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7ff fdbe 	bl	800821c <move_window>
 80086a0:	4603      	mov	r3, r0
 80086a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086a4:	7ffb      	ldrb	r3, [r7, #31]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d15d      	bne.n	8008766 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	8992      	ldrh	r2, [r2, #12]
 80086b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80086bc:	fb00 f202 	mul.w	r2, r0, r2
 80086c0:	1a9b      	subs	r3, r3, r2
 80086c2:	440b      	add	r3, r1
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	b292      	uxth	r2, r2
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fb31 	bl	8007d32 <st_word>
			fs->wflag = 1;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	70da      	strb	r2, [r3, #3]
			break;
 80086d6:	e049      	b.n	800876c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	899b      	ldrh	r3, [r3, #12]
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	4619      	mov	r1, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ec:	4413      	add	r3, r2
 80086ee:	4619      	mov	r1, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fd93 	bl	800821c <move_window>
 80086f6:	4603      	mov	r3, r0
 80086f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086fa:	7ffb      	ldrb	r3, [r7, #31]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d134      	bne.n	800876a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	8992      	ldrh	r2, [r2, #12]
 8008714:	fbb3 f0f2 	udiv	r0, r3, r2
 8008718:	fb00 f202 	mul.w	r2, r0, r2
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	440b      	add	r3, r1
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fae3 	bl	8007cec <ld_dword>
 8008726:	4603      	mov	r3, r0
 8008728:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800872c:	4323      	orrs	r3, r4
 800872e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	8992      	ldrh	r2, [r2, #12]
 800873e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008742:	fb00 f202 	mul.w	r2, r0, r2
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	440b      	add	r3, r1
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fb0b 	bl	8007d68 <st_dword>
			fs->wflag = 1;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	70da      	strb	r2, [r3, #3]
			break;
 8008758:	e008      	b.n	800876c <put_fat+0x22e>
		}
	}
 800875a:	bf00      	nop
 800875c:	e006      	b.n	800876c <put_fat+0x22e>
			if (res != FR_OK) break;
 800875e:	bf00      	nop
 8008760:	e004      	b.n	800876c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <put_fat+0x22e>
			if (res != FR_OK) break;
 800876a:	bf00      	nop
	return res;
 800876c:	7ffb      	ldrb	r3, [r7, #31]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3724      	adds	r7, #36	; 0x24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd90      	pop	{r4, r7, pc}

08008776 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d904      	bls.n	800879c <remove_chain+0x26>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d301      	bcc.n	80087a0 <remove_chain+0x2a>
 800879c:	2302      	movs	r3, #2
 800879e:	e04b      	b.n	8008838 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00c      	beq.n	80087c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	69b8      	ldr	r0, [r7, #24]
 80087ae:	f7ff fec6 	bl	800853e <put_fat>
 80087b2:	4603      	mov	r3, r0
 80087b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80087b6:	7ffb      	ldrb	r3, [r7, #31]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <remove_chain+0x4a>
 80087bc:	7ffb      	ldrb	r3, [r7, #31]
 80087be:	e03b      	b.n	8008838 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fde7 	bl	8008396 <get_fat>
 80087c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d031      	beq.n	8008834 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <remove_chain+0x64>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e02e      	b.n	8008838 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d101      	bne.n	80087e6 <remove_chain+0x70>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e028      	b.n	8008838 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087e6:	2200      	movs	r2, #0
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	69b8      	ldr	r0, [r7, #24]
 80087ec:	f7ff fea7 	bl	800853e <put_fat>
 80087f0:	4603      	mov	r3, r0
 80087f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80087f4:	7ffb      	ldrb	r3, [r7, #31]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <remove_chain+0x88>
 80087fa:	7ffb      	ldrb	r3, [r7, #31]
 80087fc:	e01c      	b.n	8008838 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	695a      	ldr	r2, [r3, #20]
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	3b02      	subs	r3, #2
 8008808:	429a      	cmp	r2, r3
 800880a:	d20b      	bcs.n	8008824 <remove_chain+0xae>
			fs->free_clst++;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	d3c6      	bcc.n	80087c0 <remove_chain+0x4a>
 8008832:	e000      	b.n	8008836 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008834:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10d      	bne.n	8008872 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <create_chain+0x2c>
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	429a      	cmp	r2, r3
 800886a:	d31b      	bcc.n	80088a4 <create_chain+0x64>
 800886c:	2301      	movs	r3, #1
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	e018      	b.n	80088a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fd8e 	bl	8008396 <get_fat>
 800887a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d801      	bhi.n	8008886 <create_chain+0x46>
 8008882:	2301      	movs	r3, #1
 8008884:	e070      	b.n	8008968 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d101      	bne.n	8008892 <create_chain+0x52>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e06a      	b.n	8008968 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	429a      	cmp	r2, r3
 800889a:	d201      	bcs.n	80088a0 <create_chain+0x60>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	e063      	b.n	8008968 <create_chain+0x128>
		scl = clst;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d307      	bcc.n	80088c8 <create_chain+0x88>
				ncl = 2;
 80088b8:	2302      	movs	r3, #2
 80088ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d901      	bls.n	80088c8 <create_chain+0x88>
 80088c4:	2300      	movs	r3, #0
 80088c6:	e04f      	b.n	8008968 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80088c8:	69f9      	ldr	r1, [r7, #28]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff fd63 	bl	8008396 <get_fat>
 80088d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d003      	beq.n	80088e6 <create_chain+0xa6>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d101      	bne.n	80088ea <create_chain+0xaa>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	e03e      	b.n	8008968 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d1da      	bne.n	80088a8 <create_chain+0x68>
 80088f2:	2300      	movs	r3, #0
 80088f4:	e038      	b.n	8008968 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80088f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	6938      	ldr	r0, [r7, #16]
 8008900:	f7ff fe1d 	bl	800853e <put_fat>
 8008904:	4603      	mov	r3, r0
 8008906:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <create_chain+0xe2>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6938      	ldr	r0, [r7, #16]
 800891a:	f7ff fe10 	bl	800853e <put_fat>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d116      	bne.n	8008956 <create_chain+0x116>
		fs->last_clst = ncl;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	3b02      	subs	r3, #2
 8008938:	429a      	cmp	r2, r3
 800893a:	d804      	bhi.n	8008946 <create_chain+0x106>
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	1e5a      	subs	r2, r3, #1
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	711a      	strb	r2, [r3, #4]
 8008954:	e007      	b.n	8008966 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d102      	bne.n	8008962 <create_chain+0x122>
 800895c:	f04f 33ff 	mov.w	r3, #4294967295
 8008960:	e000      	b.n	8008964 <create_chain+0x124>
 8008962:	2301      	movs	r3, #1
 8008964:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008966:	69fb      	ldr	r3, [r7, #28]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	3304      	adds	r3, #4
 8008986:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	899b      	ldrh	r3, [r3, #12]
 800898c:	461a      	mov	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	fbb3 f3f2 	udiv	r3, r3, r2
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	8952      	ldrh	r2, [r2, #10]
 8008998:	fbb3 f3f2 	udiv	r3, r3, r2
 800899c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1d1a      	adds	r2, r3, #4
 80089a2:	613a      	str	r2, [r7, #16]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <clmt_clust+0x42>
 80089ae:	2300      	movs	r3, #0
 80089b0:	e010      	b.n	80089d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d307      	bcc.n	80089ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3304      	adds	r3, #4
 80089c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089c8:	e7e9      	b.n	800899e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80089ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	4413      	add	r3, r2
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089f6:	d204      	bcs.n	8008a02 <dir_sdi+0x22>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a02:	2302      	movs	r3, #2
 8008a04:	e071      	b.n	8008aea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <dir_sdi+0x46>
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d902      	bls.n	8008a26 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10c      	bne.n	8008a46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	8912      	ldrh	r2, [r2, #8]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d301      	bcc.n	8008a3c <dir_sdi+0x5c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e056      	b.n	8008aea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	61da      	str	r2, [r3, #28]
 8008a44:	e02d      	b.n	8008aa2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	895b      	ldrh	r3, [r3, #10]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	899b      	ldrh	r3, [r3, #12]
 8008a50:	fb02 f303 	mul.w	r3, r2, r3
 8008a54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a56:	e019      	b.n	8008a8c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fc9a 	bl	8008396 <get_fat>
 8008a62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d101      	bne.n	8008a70 <dir_sdi+0x90>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e03c      	b.n	8008aea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d904      	bls.n	8008a80 <dir_sdi+0xa0>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d301      	bcc.n	8008a84 <dir_sdi+0xa4>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e032      	b.n	8008aea <dir_sdi+0x10a>
			ofs -= csz;
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d2e1      	bcs.n	8008a58 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008a94:	6979      	ldr	r1, [r7, #20]
 8008a96:	6938      	ldr	r0, [r7, #16]
 8008a98:	f7ff fc5e 	bl	8008358 <clust2sect>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <dir_sdi+0xd4>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e01a      	b.n	8008aea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	899b      	ldrh	r3, [r3, #12]
 8008abc:	4619      	mov	r1, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ac4:	441a      	add	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	899b      	ldrh	r3, [r3, #12]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008adc:	fb00 f202 	mul.w	r2, r0, r2
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	18ca      	adds	r2, r1, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	3320      	adds	r3, #32
 8008b08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <dir_next+0x28>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b18:	d301      	bcc.n	8008b1e <dir_next+0x2c>
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	e0bb      	b.n	8008c96 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	899b      	ldrh	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b2a:	fb01 f202 	mul.w	r2, r1, r2
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f040 809d 	bne.w	8008c70 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	8912      	ldrh	r2, [r2, #8]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	f0c0 808d 	bcc.w	8008c70 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	61da      	str	r2, [r3, #28]
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	e09a      	b.n	8008c96 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	899b      	ldrh	r3, [r3, #12]
 8008b64:	461a      	mov	r2, r3
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	8952      	ldrh	r2, [r2, #10]
 8008b70:	3a01      	subs	r2, #1
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d17b      	bne.n	8008c70 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f7ff fc08 	bl	8008396 <get_fat>
 8008b86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d801      	bhi.n	8008b92 <dir_next+0xa0>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e081      	b.n	8008c96 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d101      	bne.n	8008b9e <dir_next+0xac>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e07b      	b.n	8008c96 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d359      	bcc.n	8008c5c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d104      	bne.n	8008bb8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	61da      	str	r2, [r3, #28]
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	e06e      	b.n	8008c96 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7ff fe3d 	bl	8008840 <create_chain>
 8008bc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <dir_next+0xe0>
 8008bce:	2307      	movs	r3, #7
 8008bd0:	e061      	b.n	8008c96 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <dir_next+0xea>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e05c      	b.n	8008c96 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be2:	d101      	bne.n	8008be8 <dir_next+0xf6>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e056      	b.n	8008c96 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff fad3 	bl	8008194 <sync_window>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <dir_next+0x106>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e04e      	b.n	8008c96 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	461a      	mov	r2, r3
 8008c04:	2100      	movs	r1, #0
 8008c06:	f7ff f8fc 	bl	8007e02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	6979      	ldr	r1, [r7, #20]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fba1 	bl	8008358 <clust2sect>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8008c1c:	e012      	b.n	8008c44 <dir_next+0x152>
						fs->wflag = 1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fab5 	bl	8008194 <sync_window>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <dir_next+0x142>
 8008c30:	2301      	movs	r3, #1
 8008c32:	e030      	b.n	8008c96 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	3301      	adds	r3, #1
 8008c38:	613b      	str	r3, [r7, #16]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	631a      	str	r2, [r3, #48]	; 0x30
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	895b      	ldrh	r3, [r3, #10]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d3e6      	bcc.n	8008c1e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff fb77 	bl	8008358 <clust2sect>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c88:	fb00 f202 	mul.w	r2, r0, r2
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	18ca      	adds	r2, r1, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b086      	sub	sp, #24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fe95 	bl	80089e0 <dir_sdi>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d12b      	bne.n	8008d18 <dir_alloc+0x7a>
		n = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7ff faa6 	bl	800821c <move_window>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11d      	bne.n	8008d16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2be5      	cmp	r3, #229	; 0xe5
 8008ce2:	d004      	beq.n	8008cee <dir_alloc+0x50>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d102      	bne.n	8008d02 <dir_alloc+0x64>
 8008cfc:	e00c      	b.n	8008d18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008d02:	2101      	movs	r1, #1
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fef4 	bl	8008af2 <dir_next>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0d7      	beq.n	8008cc4 <dir_alloc+0x26>
 8008d14:	e000      	b.n	8008d18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d101      	bne.n	8008d22 <dir_alloc+0x84>
 8008d1e:	2307      	movs	r3, #7
 8008d20:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	331a      	adds	r3, #26
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe ffbe 	bl	8007cbc <ld_word>
 8008d40:	4603      	mov	r3, r0
 8008d42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d109      	bne.n	8008d60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe ffb3 	bl	8007cbc <ld_word>
 8008d56:	4603      	mov	r3, r0
 8008d58:	041b      	lsls	r3, r3, #16
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d60:	68fb      	ldr	r3, [r7, #12]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	331a      	adds	r3, #26
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	b292      	uxth	r2, r2
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe ffd6 	bl	8007d32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d109      	bne.n	8008da2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f103 0214 	add.w	r2, r3, #20
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	0c1b      	lsrs	r3, r3, #16
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f7fe ffc8 	bl	8007d32 <st_word>
	}
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fe10 	bl	80089e0 <dir_sdi>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <dir_find+0x24>
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	e03e      	b.n	8008e4c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6938      	ldr	r0, [r7, #16]
 8008dd6:	f7ff fa21 	bl	800821c <move_window>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d12f      	bne.n	8008e44 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <dir_find+0x4e>
 8008df2:	2304      	movs	r3, #4
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	e028      	b.n	8008e4a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	330b      	adds	r3, #11
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	330b      	adds	r3, #11
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <dir_find+0x86>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a18      	ldr	r0, [r3, #32]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3324      	adds	r3, #36	; 0x24
 8008e22:	220b      	movs	r2, #11
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7ff f807 	bl	8007e38 <mem_cmp>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fe5d 	bl	8008af2 <dir_next>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0c5      	beq.n	8008dce <dir_find+0x24>
 8008e42:	e002      	b.n	8008e4a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e48:	bf00      	nop

	return res;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008e62:	2101      	movs	r1, #1
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff1a 	bl	8008c9e <dir_alloc>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11c      	bne.n	8008eae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	68b8      	ldr	r0, [r7, #8]
 8008e7c:	f7ff f9ce 	bl	800821c <move_window>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d111      	bne.n	8008eae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe ffb5 	bl	8007e02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a18      	ldr	r0, [r3, #32]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	220b      	movs	r2, #11
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f7fe ff8c 	bl	8007dc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff f9a5 	bl	800821c <move_window>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	22e5      	movs	r2, #229	; 0xe5
 8008ee2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d04e      	beq.n	8008faa <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008f14:	e021      	b.n	8008f5a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1a      	ldr	r2, [r3, #32]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	1c59      	adds	r1, r3, #1
 8008f1e:	6179      	str	r1, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d100      	bne.n	8008f2e <get_fileinfo+0x3a>
 8008f2c:	e015      	b.n	8008f5a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b05      	cmp	r3, #5
 8008f32:	d101      	bne.n	8008f38 <get_fileinfo+0x44>
 8008f34:	23e5      	movs	r3, #229	; 0xe5
 8008f36:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b09      	cmp	r3, #9
 8008f3c:	d106      	bne.n	8008f4c <get_fileinfo+0x58>
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	613a      	str	r2, [r7, #16]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	4413      	add	r3, r2
 8008f48:	222e      	movs	r2, #46	; 0x2e
 8008f4a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	613a      	str	r2, [r7, #16]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	7bfa      	ldrb	r2, [r7, #15]
 8008f58:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b0a      	cmp	r3, #10
 8008f5e:	d9da      	bls.n	8008f16 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	4413      	add	r3, r2
 8008f66:	3309      	adds	r3, #9
 8008f68:	2200      	movs	r2, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	7ada      	ldrb	r2, [r3, #11]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	331c      	adds	r3, #28
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe feb5 	bl	8007cec <ld_dword>
 8008f82:	4602      	mov	r2, r0
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	3316      	adds	r3, #22
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe feac 	bl	8007cec <ld_dword>
 8008f94:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	80da      	strh	r2, [r3, #6]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	809a      	strh	r2, [r3, #4]
 8008fa8:	e000      	b.n	8008fac <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008faa:	bf00      	nop
}
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008fca:	220b      	movs	r2, #11
 8008fcc:	2120      	movs	r1, #32
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f7fe ff17 	bl	8007e02 <mem_set>
	si = i = 0; ni = 8;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	2308      	movs	r3, #8
 8008fde:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	61fa      	str	r2, [r7, #28]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008fee:	7efb      	ldrb	r3, [r7, #27]
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d94e      	bls.n	8009092 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ff4:	7efb      	ldrb	r3, [r7, #27]
 8008ff6:	2b2f      	cmp	r3, #47	; 0x2f
 8008ff8:	d006      	beq.n	8009008 <create_name+0x54>
 8008ffa:	7efb      	ldrb	r3, [r7, #27]
 8008ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8008ffe:	d110      	bne.n	8009022 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009000:	e002      	b.n	8009008 <create_name+0x54>
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3301      	adds	r3, #1
 8009006:	61fb      	str	r3, [r7, #28]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b2f      	cmp	r3, #47	; 0x2f
 8009012:	d0f6      	beq.n	8009002 <create_name+0x4e>
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b5c      	cmp	r3, #92	; 0x5c
 800901e:	d0f0      	beq.n	8009002 <create_name+0x4e>
			break;
 8009020:	e038      	b.n	8009094 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009022:	7efb      	ldrb	r3, [r7, #27]
 8009024:	2b2e      	cmp	r3, #46	; 0x2e
 8009026:	d003      	beq.n	8009030 <create_name+0x7c>
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	429a      	cmp	r2, r3
 800902e:	d30c      	bcc.n	800904a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2b0b      	cmp	r3, #11
 8009034:	d002      	beq.n	800903c <create_name+0x88>
 8009036:	7efb      	ldrb	r3, [r7, #27]
 8009038:	2b2e      	cmp	r3, #46	; 0x2e
 800903a:	d001      	beq.n	8009040 <create_name+0x8c>
 800903c:	2306      	movs	r3, #6
 800903e:	e044      	b.n	80090ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009040:	2308      	movs	r3, #8
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	230b      	movs	r3, #11
 8009046:	617b      	str	r3, [r7, #20]
			continue;
 8009048:	e022      	b.n	8009090 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800904a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800904e:	2b00      	cmp	r3, #0
 8009050:	da04      	bge.n	800905c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009052:	7efb      	ldrb	r3, [r7, #27]
 8009054:	3b80      	subs	r3, #128	; 0x80
 8009056:	4a1f      	ldr	r2, [pc, #124]	; (80090d4 <create_name+0x120>)
 8009058:	5cd3      	ldrb	r3, [r2, r3]
 800905a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800905c:	7efb      	ldrb	r3, [r7, #27]
 800905e:	4619      	mov	r1, r3
 8009060:	481d      	ldr	r0, [pc, #116]	; (80090d8 <create_name+0x124>)
 8009062:	f7fe ff10 	bl	8007e86 <chk_chr>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <create_name+0xbc>
 800906c:	2306      	movs	r3, #6
 800906e:	e02c      	b.n	80090ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009070:	7efb      	ldrb	r3, [r7, #27]
 8009072:	2b60      	cmp	r3, #96	; 0x60
 8009074:	d905      	bls.n	8009082 <create_name+0xce>
 8009076:	7efb      	ldrb	r3, [r7, #27]
 8009078:	2b7a      	cmp	r3, #122	; 0x7a
 800907a:	d802      	bhi.n	8009082 <create_name+0xce>
 800907c:	7efb      	ldrb	r3, [r7, #27]
 800907e:	3b20      	subs	r3, #32
 8009080:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	613a      	str	r2, [r7, #16]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	4413      	add	r3, r2
 800908c:	7efa      	ldrb	r2, [r7, #27]
 800908e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009090:	e7a6      	b.n	8008fe0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009092:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	441a      	add	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <create_name+0xf4>
 80090a4:	2306      	movs	r3, #6
 80090a6:	e010      	b.n	80090ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2be5      	cmp	r3, #229	; 0xe5
 80090ae:	d102      	bne.n	80090b6 <create_name+0x102>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2205      	movs	r2, #5
 80090b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80090b6:	7efb      	ldrb	r3, [r7, #27]
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d801      	bhi.n	80090c0 <create_name+0x10c>
 80090bc:	2204      	movs	r2, #4
 80090be:	e000      	b.n	80090c2 <create_name+0x10e>
 80090c0:	2200      	movs	r2, #0
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	330b      	adds	r3, #11
 80090c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80090c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	0800e6a4 	.word	0x0800e6a4
 80090d8:	0800e62c 	.word	0x0800e62c

080090dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80090f0:	e002      	b.n	80090f8 <follow_path+0x1c>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b2f      	cmp	r3, #47	; 0x2f
 80090fe:	d0f8      	beq.n	80090f2 <follow_path+0x16>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b5c      	cmp	r3, #92	; 0x5c
 8009106:	d0f4      	beq.n	80090f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2200      	movs	r2, #0
 800910c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b1f      	cmp	r3, #31
 8009114:	d80a      	bhi.n	800912c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2280      	movs	r2, #128	; 0x80
 800911a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800911e:	2100      	movs	r1, #0
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fc5d 	bl	80089e0 <dir_sdi>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]
 800912a:	e048      	b.n	80091be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800912c:	463b      	mov	r3, r7
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff3f 	bl	8008fb4 <create_name>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d139      	bne.n	80091b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fe32 	bl	8008daa <dir_find>
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009150:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d12c      	bne.n	80091b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800915e:	7afb      	ldrb	r3, [r7, #11]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d127      	bne.n	80091b8 <follow_path+0xdc>
 8009168:	2305      	movs	r3, #5
 800916a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800916c:	e024      	b.n	80091b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d121      	bne.n	80091bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	799b      	ldrb	r3, [r3, #6]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009184:	2305      	movs	r3, #5
 8009186:	75fb      	strb	r3, [r7, #23]
 8009188:	e019      	b.n	80091be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	8992      	ldrh	r2, [r2, #12]
 8009198:	fbb3 f0f2 	udiv	r0, r3, r2
 800919c:	fb00 f202 	mul.w	r2, r0, r2
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	440b      	add	r3, r1
 80091a4:	4619      	mov	r1, r3
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff fdc0 	bl	8008d2c <ld_clust>
 80091ac:	4602      	mov	r2, r0
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091b2:	e7bb      	b.n	800912c <follow_path+0x50>
			if (res != FR_OK) break;
 80091b4:	bf00      	nop
 80091b6:	e002      	b.n	80091be <follow_path+0xe2>
				break;
 80091b8:	bf00      	nop
 80091ba:	e000      	b.n	80091be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091bc:	bf00      	nop
			}
		}
	}

	return res;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80091d0:	f04f 33ff 	mov.w	r3, #4294967295
 80091d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d031      	beq.n	8009242 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e002      	b.n	80091ec <get_ldnumber+0x24>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	3301      	adds	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d903      	bls.n	80091fc <get_ldnumber+0x34>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b3a      	cmp	r3, #58	; 0x3a
 80091fa:	d1f4      	bne.n	80091e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b3a      	cmp	r3, #58	; 0x3a
 8009202:	d11c      	bne.n	800923e <get_ldnumber+0x76>
			tp = *path;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	60fa      	str	r2, [r7, #12]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	3b30      	subs	r3, #48	; 0x30
 8009214:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b09      	cmp	r3, #9
 800921a:	d80e      	bhi.n	800923a <get_ldnumber+0x72>
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	429a      	cmp	r2, r3
 8009222:	d10a      	bne.n	800923a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <get_ldnumber+0x72>
					vol = (int)i;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	3301      	adds	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	e002      	b.n	8009244 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009242:	693b      	ldr	r3, [r7, #16]
}
 8009244:	4618      	mov	r0, r3
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	70da      	strb	r2, [r3, #3]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fe ffd6 	bl	800821c <move_window>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <check_fs+0x2a>
 8009276:	2304      	movs	r3, #4
 8009278:	e038      	b.n	80092ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3334      	adds	r3, #52	; 0x34
 800927e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fd1a 	bl	8007cbc <ld_word>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009290:	429a      	cmp	r2, r3
 8009292:	d001      	beq.n	8009298 <check_fs+0x48>
 8009294:	2303      	movs	r3, #3
 8009296:	e029      	b.n	80092ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800929e:	2be9      	cmp	r3, #233	; 0xe9
 80092a0:	d009      	beq.n	80092b6 <check_fs+0x66>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092a8:	2beb      	cmp	r3, #235	; 0xeb
 80092aa:	d11e      	bne.n	80092ea <check_fs+0x9a>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80092b2:	2b90      	cmp	r3, #144	; 0x90
 80092b4:	d119      	bne.n	80092ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3334      	adds	r3, #52	; 0x34
 80092ba:	3336      	adds	r3, #54	; 0x36
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fd15 	bl	8007cec <ld_dword>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092c8:	4a0a      	ldr	r2, [pc, #40]	; (80092f4 <check_fs+0xa4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d101      	bne.n	80092d2 <check_fs+0x82>
 80092ce:	2300      	movs	r3, #0
 80092d0:	e00c      	b.n	80092ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3334      	adds	r3, #52	; 0x34
 80092d6:	3352      	adds	r3, #82	; 0x52
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fd07 	bl	8007cec <ld_dword>
 80092de:	4603      	mov	r3, r0
 80092e0:	4a05      	ldr	r2, [pc, #20]	; (80092f8 <check_fs+0xa8>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d101      	bne.n	80092ea <check_fs+0x9a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	e000      	b.n	80092ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80092ea:	2302      	movs	r3, #2
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	00544146 	.word	0x00544146
 80092f8:	33544146 	.word	0x33544146

080092fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b096      	sub	sp, #88	; 0x58
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff ff59 	bl	80091c8 <get_ldnumber>
 8009316:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	da01      	bge.n	8009322 <find_volume+0x26>
 800931e:	230b      	movs	r3, #11
 8009320:	e262      	b.n	80097e8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009322:	4a9f      	ldr	r2, [pc, #636]	; (80095a0 <find_volume+0x2a4>)
 8009324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800932a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <find_volume+0x3a>
 8009332:	230c      	movs	r3, #12
 8009334:	e258      	b.n	80097e8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800933a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	f023 0301 	bic.w	r3, r3, #1
 8009342:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fc15 	bl	8007b80 <disk_status>
 8009356:	4603      	mov	r3, r0
 8009358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800935c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10c      	bne.n	8009382 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <find_volume+0x82>
 800936e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800937a:	230a      	movs	r3, #10
 800937c:	e234      	b.n	80097e8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800937e:	2300      	movs	r3, #0
 8009380:	e232      	b.n	80097e8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	2200      	movs	r2, #0
 8009386:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	b2da      	uxtb	r2, r3
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe fc0d 	bl	8007bb4 <disk_initialize>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80093ac:	2303      	movs	r3, #3
 80093ae:	e21b      	b.n	80097e8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d007      	beq.n	80093c6 <find_volume+0xca>
 80093b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80093c2:	230a      	movs	r3, #10
 80093c4:	e210      	b.n	80097e8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	7858      	ldrb	r0, [r3, #1]
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	330c      	adds	r3, #12
 80093ce:	461a      	mov	r2, r3
 80093d0:	2102      	movs	r1, #2
 80093d2:	f7fe fc55 	bl	8007c80 <disk_ioctl>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <find_volume+0xe4>
 80093dc:	2301      	movs	r3, #1
 80093de:	e203      	b.n	80097e8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	899b      	ldrh	r3, [r3, #12]
 80093e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e8:	d80d      	bhi.n	8009406 <find_volume+0x10a>
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	899b      	ldrh	r3, [r3, #12]
 80093ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f2:	d308      	bcc.n	8009406 <find_volume+0x10a>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	899b      	ldrh	r3, [r3, #12]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	899b      	ldrh	r3, [r3, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	4013      	ands	r3, r2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <find_volume+0x10e>
 8009406:	2301      	movs	r3, #1
 8009408:	e1ee      	b.n	80097e8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800940e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009412:	f7ff ff1d 	bl	8009250 <check_fs>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800941c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009420:	2b02      	cmp	r3, #2
 8009422:	d149      	bne.n	80094b8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009424:	2300      	movs	r3, #0
 8009426:	643b      	str	r3, [r7, #64]	; 0x40
 8009428:	e01e      	b.n	8009468 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009438:	4413      	add	r3, r2
 800943a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	3304      	adds	r3, #4
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d006      	beq.n	8009454 <find_volume+0x158>
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	3308      	adds	r3, #8
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fc4e 	bl	8007cec <ld_dword>
 8009450:	4602      	mov	r2, r0
 8009452:	e000      	b.n	8009456 <find_volume+0x15a>
 8009454:	2200      	movs	r2, #0
 8009456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	3358      	adds	r3, #88	; 0x58
 800945c:	443b      	add	r3, r7
 800945e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009464:	3301      	adds	r3, #1
 8009466:	643b      	str	r3, [r7, #64]	; 0x40
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	2b03      	cmp	r3, #3
 800946c:	d9dd      	bls.n	800942a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800946e:	2300      	movs	r3, #0
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <find_volume+0x182>
 8009478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800947a:	3b01      	subs	r3, #1
 800947c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800947e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	3358      	adds	r3, #88	; 0x58
 8009484:	443b      	add	r3, r7
 8009486:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800948a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800948c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <find_volume+0x1a2>
 8009492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009496:	f7ff fedb 	bl	8009250 <check_fs>
 800949a:	4603      	mov	r3, r0
 800949c:	e000      	b.n	80094a0 <find_volume+0x1a4>
 800949e:	2303      	movs	r3, #3
 80094a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80094a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d905      	bls.n	80094b8 <find_volume+0x1bc>
 80094ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ae:	3301      	adds	r3, #1
 80094b0:	643b      	str	r3, [r7, #64]	; 0x40
 80094b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d9e2      	bls.n	800947e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d101      	bne.n	80094c4 <find_volume+0x1c8>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e191      	b.n	80097e8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80094c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d901      	bls.n	80094d0 <find_volume+0x1d4>
 80094cc:	230d      	movs	r3, #13
 80094ce:	e18b      	b.n	80097e8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	3334      	adds	r3, #52	; 0x34
 80094d4:	330b      	adds	r3, #11
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fbf0 	bl	8007cbc <ld_word>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	899b      	ldrh	r3, [r3, #12]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d001      	beq.n	80094ec <find_volume+0x1f0>
 80094e8:	230d      	movs	r3, #13
 80094ea:	e17d      	b.n	80097e8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	3334      	adds	r3, #52	; 0x34
 80094f0:	3316      	adds	r3, #22
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fbe2 	bl	8007cbc <ld_word>
 80094f8:	4603      	mov	r3, r0
 80094fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80094fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <find_volume+0x214>
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	3334      	adds	r3, #52	; 0x34
 8009506:	3324      	adds	r3, #36	; 0x24
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fbef 	bl	8007cec <ld_dword>
 800950e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009514:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	789b      	ldrb	r3, [r3, #2]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d005      	beq.n	8009534 <find_volume+0x238>
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	789b      	ldrb	r3, [r3, #2]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d001      	beq.n	8009534 <find_volume+0x238>
 8009530:	230d      	movs	r3, #13
 8009532:	e159      	b.n	80097e8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	789b      	ldrb	r3, [r3, #2]
 8009538:	461a      	mov	r2, r3
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	fb02 f303 	mul.w	r3, r2, r3
 8009540:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009548:	b29a      	uxth	r2, r3
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	895b      	ldrh	r3, [r3, #10]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d008      	beq.n	8009568 <find_volume+0x26c>
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	895b      	ldrh	r3, [r3, #10]
 800955a:	461a      	mov	r2, r3
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	895b      	ldrh	r3, [r3, #10]
 8009560:	3b01      	subs	r3, #1
 8009562:	4013      	ands	r3, r2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <find_volume+0x270>
 8009568:	230d      	movs	r3, #13
 800956a:	e13d      	b.n	80097e8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	3334      	adds	r3, #52	; 0x34
 8009570:	3311      	adds	r3, #17
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fba2 	bl	8007cbc <ld_word>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	891b      	ldrh	r3, [r3, #8]
 8009584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009586:	8992      	ldrh	r2, [r2, #12]
 8009588:	0952      	lsrs	r2, r2, #5
 800958a:	b292      	uxth	r2, r2
 800958c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009590:	fb01 f202 	mul.w	r2, r1, r2
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <find_volume+0x2a8>
 800959c:	230d      	movs	r3, #13
 800959e:	e123      	b.n	80097e8 <find_volume+0x4ec>
 80095a0:	200031cc 	.word	0x200031cc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	3334      	adds	r3, #52	; 0x34
 80095a8:	3313      	adds	r3, #19
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fb86 	bl	8007cbc <ld_word>
 80095b0:	4603      	mov	r3, r0
 80095b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80095b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <find_volume+0x2cc>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	3334      	adds	r3, #52	; 0x34
 80095be:	3320      	adds	r3, #32
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fb93 	bl	8007cec <ld_dword>
 80095c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	3334      	adds	r3, #52	; 0x34
 80095cc:	330e      	adds	r3, #14
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fb74 	bl	8007cbc <ld_word>
 80095d4:	4603      	mov	r3, r0
 80095d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80095d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <find_volume+0x2e6>
 80095de:	230d      	movs	r3, #13
 80095e0:	e102      	b.n	80097e8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80095e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e6:	4413      	add	r3, r2
 80095e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ea:	8911      	ldrh	r1, [r2, #8]
 80095ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ee:	8992      	ldrh	r2, [r2, #12]
 80095f0:	0952      	lsrs	r2, r2, #5
 80095f2:	b292      	uxth	r2, r2
 80095f4:	fbb1 f2f2 	udiv	r2, r1, r2
 80095f8:	b292      	uxth	r2, r2
 80095fa:	4413      	add	r3, r2
 80095fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	429a      	cmp	r2, r3
 8009604:	d201      	bcs.n	800960a <find_volume+0x30e>
 8009606:	230d      	movs	r3, #13
 8009608:	e0ee      	b.n	80097e8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800960a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009612:	8952      	ldrh	r2, [r2, #10]
 8009614:	fbb3 f3f2 	udiv	r3, r3, r2
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <find_volume+0x328>
 8009620:	230d      	movs	r3, #13
 8009622:	e0e1      	b.n	80097e8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009624:	2303      	movs	r3, #3
 8009626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009630:	4293      	cmp	r3, r2
 8009632:	d802      	bhi.n	800963a <find_volume+0x33e>
 8009634:	2302      	movs	r3, #2
 8009636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009640:	4293      	cmp	r3, r2
 8009642:	d802      	bhi.n	800964a <find_volume+0x34e>
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	1c9a      	adds	r2, r3, #2
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009656:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009658:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800965a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965c:	441a      	add	r2, r3
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009662:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	441a      	add	r2, r3
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800966c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009670:	2b03      	cmp	r3, #3
 8009672:	d11e      	bne.n	80096b2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	3334      	adds	r3, #52	; 0x34
 8009678:	332a      	adds	r3, #42	; 0x2a
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fb1e 	bl	8007cbc <ld_word>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <find_volume+0x38e>
 8009686:	230d      	movs	r3, #13
 8009688:	e0ae      	b.n	80097e8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	891b      	ldrh	r3, [r3, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <find_volume+0x39a>
 8009692:	230d      	movs	r3, #13
 8009694:	e0a8      	b.n	80097e8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	3334      	adds	r3, #52	; 0x34
 800969a:	332c      	adds	r3, #44	; 0x2c
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe fb25 	bl	8007cec <ld_dword>
 80096a2:	4602      	mov	r2, r0
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	647b      	str	r3, [r7, #68]	; 0x44
 80096b0:	e01f      	b.n	80096f2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	891b      	ldrh	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <find_volume+0x3c2>
 80096ba:	230d      	movs	r3, #13
 80096bc:	e094      	b.n	80097e8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c4:	441a      	add	r2, r3
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80096ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d103      	bne.n	80096da <find_volume+0x3de>
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	e00a      	b.n	80096f0 <find_volume+0x3f4>
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	699a      	ldr	r2, [r3, #24]
 80096de:	4613      	mov	r3, r2
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	4413      	add	r3, r2
 80096e4:	085a      	lsrs	r2, r3, #1
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80096f0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	69da      	ldr	r2, [r3, #28]
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	899b      	ldrh	r3, [r3, #12]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fe:	440b      	add	r3, r1
 8009700:	3b01      	subs	r3, #1
 8009702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009704:	8989      	ldrh	r1, [r1, #12]
 8009706:	fbb3 f3f1 	udiv	r3, r3, r1
 800970a:	429a      	cmp	r2, r3
 800970c:	d201      	bcs.n	8009712 <find_volume+0x416>
 800970e:	230d      	movs	r3, #13
 8009710:	e06a      	b.n	80097e8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	f04f 32ff 	mov.w	r2, #4294967295
 8009718:	615a      	str	r2, [r3, #20]
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	695a      	ldr	r2, [r3, #20]
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800972c:	2b03      	cmp	r3, #3
 800972e:	d149      	bne.n	80097c4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	3334      	adds	r3, #52	; 0x34
 8009734:	3330      	adds	r3, #48	; 0x30
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe fac0 	bl	8007cbc <ld_word>
 800973c:	4603      	mov	r3, r0
 800973e:	2b01      	cmp	r3, #1
 8009740:	d140      	bne.n	80097c4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009744:	3301      	adds	r3, #1
 8009746:	4619      	mov	r1, r3
 8009748:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800974a:	f7fe fd67 	bl	800821c <move_window>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d137      	bne.n	80097c4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	2200      	movs	r2, #0
 8009758:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	3334      	adds	r3, #52	; 0x34
 800975e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe faaa 	bl	8007cbc <ld_word>
 8009768:	4603      	mov	r3, r0
 800976a:	461a      	mov	r2, r3
 800976c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009770:	429a      	cmp	r2, r3
 8009772:	d127      	bne.n	80097c4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	3334      	adds	r3, #52	; 0x34
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fab7 	bl	8007cec <ld_dword>
 800977e:	4603      	mov	r3, r0
 8009780:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <find_volume+0x4f4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d11e      	bne.n	80097c4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	3334      	adds	r3, #52	; 0x34
 800978a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe faac 	bl	8007cec <ld_dword>
 8009794:	4603      	mov	r3, r0
 8009796:	4a17      	ldr	r2, [pc, #92]	; (80097f4 <find_volume+0x4f8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d113      	bne.n	80097c4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	3334      	adds	r3, #52	; 0x34
 80097a0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe faa1 	bl	8007cec <ld_dword>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	3334      	adds	r3, #52	; 0x34
 80097b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fa97 	bl	8007cec <ld_dword>
 80097be:	4602      	mov	r2, r0
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80097ca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <find_volume+0x4fc>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	3301      	adds	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <find_volume+0x4fc>)
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <find_volume+0x4fc>)
 80097da:	881a      	ldrh	r2, [r3, #0]
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80097e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097e2:	f7fe fcb3 	bl	800814c <clear_lock>
#endif
	return FR_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3758      	adds	r7, #88	; 0x58
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	41615252 	.word	0x41615252
 80097f4:	61417272 	.word	0x61417272
 80097f8:	200031d0 	.word	0x200031d0

080097fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009806:	2309      	movs	r3, #9
 8009808:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01c      	beq.n	800984a <validate+0x4e>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d018      	beq.n	800984a <validate+0x4e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d013      	beq.n	800984a <validate+0x4e>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	889a      	ldrh	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	88db      	ldrh	r3, [r3, #6]
 800982c:	429a      	cmp	r2, r3
 800982e:	d10c      	bne.n	800984a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe f9a2 	bl	8007b80 <disk_status>
 800983c:	4603      	mov	r3, r0
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <validate+0x4e>
			res = FR_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <validate+0x5a>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	e000      	b.n	8009858 <validate+0x5c>
 8009856:	2300      	movs	r3, #0
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	6013      	str	r3, [r2, #0]
	return res;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800987a:	f107 0310 	add.w	r3, r7, #16
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fca2 	bl	80091c8 <get_ldnumber>
 8009884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	da01      	bge.n	8009890 <f_mount+0x28>
 800988c:	230b      	movs	r3, #11
 800988e:	e02b      	b.n	80098e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009890:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <f_mount+0x88>)
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80098a0:	69b8      	ldr	r0, [r7, #24]
 80098a2:	f7fe fc53 	bl	800814c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	490d      	ldr	r1, [pc, #52]	; (80098f0 <f_mount+0x88>)
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <f_mount+0x66>
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d001      	beq.n	80098d2 <f_mount+0x6a>
 80098ce:	2300      	movs	r3, #0
 80098d0:	e00a      	b.n	80098e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098d2:	f107 010c 	add.w	r1, r7, #12
 80098d6:	f107 0308 	add.w	r3, r7, #8
 80098da:	2200      	movs	r2, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fd0d 	bl	80092fc <find_volume>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200031cc 	.word	0x200031cc

080098f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b098      	sub	sp, #96	; 0x60
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <f_open+0x18>
 8009908:	2309      	movs	r3, #9
 800990a:	e1bb      	b.n	8009c84 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009912:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009914:	79fa      	ldrb	r2, [r7, #7]
 8009916:	f107 0110 	add.w	r1, r7, #16
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fcec 	bl	80092fc <find_volume>
 8009924:	4603      	mov	r3, r0
 8009926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800992a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 819f 	bne.w	8009c72 <f_open+0x37e>
		dj.obj.fs = fs;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	f107 0314 	add.w	r3, r7, #20
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff fbcb 	bl	80090dc <follow_path>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800994c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009954:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009958:	b25b      	sxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	da03      	bge.n	8009966 <f_open+0x72>
				res = FR_INVALID_NAME;
 800995e:	2306      	movs	r3, #6
 8009960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009964:	e011      	b.n	800998a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	bf14      	ite	ne
 8009970:	2301      	movne	r3, #1
 8009972:	2300      	moveq	r3, #0
 8009974:	b2db      	uxtb	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	f107 0314 	add.w	r3, r7, #20
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fa9c 	bl	8007ebc <chk_lock>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	f003 031c 	and.w	r3, r3, #28
 8009990:	2b00      	cmp	r3, #0
 8009992:	d07f      	beq.n	8009a94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009998:	2b00      	cmp	r3, #0
 800999a:	d017      	beq.n	80099cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800999c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d10e      	bne.n	80099c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80099a4:	f7fe fae6 	bl	8007f74 <enq_lock>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d006      	beq.n	80099bc <f_open+0xc8>
 80099ae:	f107 0314 	add.w	r3, r7, #20
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fa4e 	bl	8008e54 <dir_register>
 80099b8:	4603      	mov	r3, r0
 80099ba:	e000      	b.n	80099be <f_open+0xca>
 80099bc:	2312      	movs	r3, #18
 80099be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	f043 0308 	orr.w	r3, r3, #8
 80099c8:	71fb      	strb	r3, [r7, #7]
 80099ca:	e010      	b.n	80099ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099cc:	7ebb      	ldrb	r3, [r7, #26]
 80099ce:	f003 0311 	and.w	r3, r3, #17
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <f_open+0xea>
					res = FR_DENIED;
 80099d6:	2307      	movs	r3, #7
 80099d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099dc:	e007      	b.n	80099ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <f_open+0xfa>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80099ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d168      	bne.n	8009ac8 <f_open+0x1d4>
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d063      	beq.n	8009ac8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a00:	f7fd ff04 	bl	800780c <get_fattime>
 8009a04:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	330e      	adds	r3, #14
 8009a0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f9ab 	bl	8007d68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a14:	3316      	adds	r3, #22
 8009a16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe f9a5 	bl	8007d68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	330b      	adds	r3, #11
 8009a22:	2220      	movs	r2, #32
 8009a24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff f97d 	bl	8008d2c <ld_clust>
 8009a32:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff f995 	bl	8008d6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a42:	331c      	adds	r3, #28
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe f98e 	bl	8007d68 <st_dword>
					fs->wflag = 1;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d037      	beq.n	8009ac8 <f_open+0x1d4>
						dw = fs->winsect;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a5e:	f107 0314 	add.w	r3, r7, #20
 8009a62:	2200      	movs	r2, #0
 8009a64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fe85 	bl	8008776 <remove_chain>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d126      	bne.n	8009ac8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fbcc 	bl	800821c <move_window>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a8e:	3a01      	subs	r2, #1
 8009a90:	611a      	str	r2, [r3, #16]
 8009a92:	e019      	b.n	8009ac8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d115      	bne.n	8009ac8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a9c:	7ebb      	ldrb	r3, [r7, #26]
 8009a9e:	f003 0310 	and.w	r3, r3, #16
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <f_open+0x1ba>
					res = FR_NO_FILE;
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009aac:	e00c      	b.n	8009ac8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <f_open+0x1d4>
 8009ab8:	7ebb      	ldrb	r3, [r7, #26]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <f_open+0x1d4>
						res = FR_DENIED;
 8009ac2:	2307      	movs	r3, #7
 8009ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d128      	bne.n	8009b22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	f003 0308 	and.w	r3, r3, #8
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	f023 0301 	bic.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bf14      	ite	ne
 8009afa:	2301      	movne	r3, #1
 8009afc:	2300      	moveq	r3, #0
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fa55 	bl	8007fb8 <inc_lock>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <f_open+0x22e>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f040 80a3 	bne.w	8009c72 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff f8fa 	bl	8008d2c <ld_clust>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	331c      	adds	r3, #28
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe f8d2 	bl	8007cec <ld_dword>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	88da      	ldrh	r2, [r3, #6]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	79fa      	ldrb	r2, [r7, #7]
 8009b66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3330      	adds	r3, #48	; 0x30
 8009b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b82:	2100      	movs	r1, #0
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fe f93c 	bl	8007e02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d06e      	beq.n	8009c72 <f_open+0x37e>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d06a      	beq.n	8009c72 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	895b      	ldrh	r3, [r3, #10]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	899b      	ldrh	r3, [r3, #12]
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8009bc0:	e016      	b.n	8009bf0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fbe5 	bl	8008396 <get_fat>
 8009bcc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d802      	bhi.n	8009bda <f_open+0x2e6>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d102      	bne.n	8009be8 <f_open+0x2f4>
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	657b      	str	r3, [r7, #84]	; 0x54
 8009bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <f_open+0x30c>
 8009bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d8e0      	bhi.n	8009bc2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d131      	bne.n	8009c72 <f_open+0x37e>
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	899b      	ldrh	r3, [r3, #12]
 8009c12:	461a      	mov	r2, r3
 8009c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c1a:	fb01 f202 	mul.w	r2, r1, r2
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d026      	beq.n	8009c72 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fb95 	bl	8008358 <clust2sect>
 8009c2e:	6478      	str	r0, [r7, #68]	; 0x44
 8009c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <f_open+0x34a>
						res = FR_INT_ERR;
 8009c36:	2302      	movs	r3, #2
 8009c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c3c:	e019      	b.n	8009c72 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	899b      	ldrh	r3, [r3, #12]
 8009c42:	461a      	mov	r2, r3
 8009c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	7858      	ldrb	r0, [r3, #1]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a1a      	ldr	r2, [r3, #32]
 8009c60:	2301      	movs	r3, #1
 8009c62:	f7fd ffcd 	bl	8007c00 <disk_read>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <f_open+0x37e>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <f_open+0x38c>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3760      	adds	r7, #96	; 0x60
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08c      	sub	sp, #48	; 0x30
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f107 0210 	add.w	r2, r7, #16
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff fda5 	bl	80097fc <validate>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d107      	bne.n	8009cd0 <f_write+0x44>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	7d5b      	ldrb	r3, [r3, #21]
 8009cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <f_write+0x4a>
 8009cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cd4:	e16a      	b.n	8009fac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	7d1b      	ldrb	r3, [r3, #20]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <f_write+0x5a>
 8009ce2:	2307      	movs	r3, #7
 8009ce4:	e162      	b.n	8009fac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	441a      	add	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	f080 814c 	bcs.w	8009f90 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d00:	e146      	b.n	8009f90 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	8992      	ldrh	r2, [r2, #12]
 8009d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d0e:	fb01 f202 	mul.w	r2, r1, r2
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f040 80f1 	bne.w	8009efc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	8992      	ldrh	r2, [r2, #12]
 8009d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	8952      	ldrh	r2, [r2, #10]
 8009d2a:	3a01      	subs	r2, #1
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d143      	bne.n	8009dbe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10c      	bne.n	8009d58 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d11a      	bne.n	8009d80 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe fd76 	bl	8008840 <create_chain>
 8009d54:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d56:	e013      	b.n	8009d80 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	4619      	mov	r1, r3
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7fe fe02 	bl	8008970 <clmt_clust>
 8009d6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d6e:	e007      	b.n	8009d80 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fe fd61 	bl	8008840 <create_chain>
 8009d7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8109 	beq.w	8009f9a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d104      	bne.n	8009d98 <f_write+0x10c>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2202      	movs	r2, #2
 8009d92:	755a      	strb	r2, [r3, #21]
 8009d94:	2302      	movs	r3, #2
 8009d96:	e109      	b.n	8009fac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9e:	d104      	bne.n	8009daa <f_write+0x11e>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	755a      	strb	r2, [r3, #21]
 8009da6:	2301      	movs	r3, #1
 8009da8:	e100      	b.n	8009fac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <f_write+0x132>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	7d1b      	ldrb	r3, [r3, #20]
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	da18      	bge.n	8009dfa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	7858      	ldrb	r0, [r3, #1]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a1a      	ldr	r2, [r3, #32]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f7fd ff32 	bl	8007c40 <disk_write>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <f_write+0x160>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2201      	movs	r2, #1
 8009de6:	755a      	strb	r2, [r3, #21]
 8009de8:	2301      	movs	r3, #1
 8009dea:	e0df      	b.n	8009fac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	7d1b      	ldrb	r3, [r3, #20]
 8009df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	4619      	mov	r1, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	f7fe faa8 	bl	8008358 <clust2sect>
 8009e08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <f_write+0x18e>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2202      	movs	r2, #2
 8009e14:	755a      	strb	r2, [r3, #21]
 8009e16:	2302      	movs	r3, #2
 8009e18:	e0c8      	b.n	8009fac <f_write+0x320>
			sect += csect;
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	4413      	add	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	899b      	ldrh	r3, [r3, #12]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d043      	beq.n	8009ebe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	8952      	ldrh	r2, [r2, #10]
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d905      	bls.n	8009e50 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	895b      	ldrh	r3, [r3, #10]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	7858      	ldrb	r0, [r3, #1]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	69f9      	ldr	r1, [r7, #28]
 8009e5a:	f7fd fef1 	bl	8007c40 <disk_write>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <f_write+0x1e2>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	755a      	strb	r2, [r3, #21]
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e09e      	b.n	8009fac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1a      	ldr	r2, [r3, #32]
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	6a3a      	ldr	r2, [r7, #32]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d918      	bls.n	8009eae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6a1a      	ldr	r2, [r3, #32]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	8992      	ldrh	r2, [r2, #12]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	18d1      	adds	r1, r2, r3
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	899b      	ldrh	r3, [r3, #12]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7fd ff90 	bl	8007dc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	7d1b      	ldrb	r3, [r3, #20]
 8009ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	899b      	ldrh	r3, [r3, #12]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009ebc:	e04b      	b.n	8009f56 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d016      	beq.n	8009ef6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	699a      	ldr	r2, [r3, #24]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d210      	bcs.n	8009ef6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	7858      	ldrb	r0, [r3, #1]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ede:	2301      	movs	r3, #1
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	f7fd fe8d 	bl	8007c00 <disk_read>
 8009ee6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	755a      	strb	r2, [r3, #21]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e05a      	b.n	8009fac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	899b      	ldrh	r3, [r3, #12]
 8009f00:	4618      	mov	r0, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	8992      	ldrh	r2, [r2, #12]
 8009f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f0e:	fb01 f202 	mul.w	r2, r1, r2
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	1ac3      	subs	r3, r0, r3
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d901      	bls.n	8009f24 <f_write+0x298>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	8992      	ldrh	r2, [r2, #12]
 8009f32:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f36:	fb00 f202 	mul.w	r2, r0, r2
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	440b      	add	r3, r1
 8009f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f40:	69f9      	ldr	r1, [r7, #28]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd ff3c 	bl	8007dc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	7d1b      	ldrb	r3, [r3, #20]
 8009f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	4413      	add	r3, r2
 8009f5c:	61fb      	str	r3, [r7, #28]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	441a      	add	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	619a      	str	r2, [r3, #24]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	bf38      	it	cc
 8009f76:	461a      	movcc	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	60da      	str	r2, [r3, #12]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	441a      	add	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f47f aeb5 	bne.w	8009d02 <f_write+0x76>
 8009f98:	e000      	b.n	8009f9c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3730      	adds	r7, #48	; 0x30
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f107 0208 	add.w	r2, r7, #8
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fc19 	bl	80097fc <validate>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d168      	bne.n	800a0a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7d1b      	ldrb	r3, [r3, #20]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d062      	beq.n	800a0a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7d1b      	ldrb	r3, [r3, #20]
 8009fe4:	b25b      	sxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da15      	bge.n	800a016 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	7858      	ldrb	r0, [r3, #1]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a1a      	ldr	r2, [r3, #32]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f7fd fe21 	bl	8007c40 <disk_write>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <f_sync+0x54>
 800a004:	2301      	movs	r3, #1
 800a006:	e04f      	b.n	800a0a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7d1b      	ldrb	r3, [r3, #20]
 800a00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a016:	f7fd fbf9 	bl	800780c <get_fattime>
 800a01a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f7fe f8f9 	bl	800821c <move_window>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d138      	bne.n	800a0a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	330b      	adds	r3, #11
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	330b      	adds	r3, #11
 800a044:	f042 0220 	orr.w	r2, r2, #32
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	461a      	mov	r2, r3
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	f7fe fe87 	bl	8008d6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f103 021c 	add.w	r2, r3, #28
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f7fd fe7d 	bl	8007d68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3316      	adds	r3, #22
 800a072:	6939      	ldr	r1, [r7, #16]
 800a074:	4618      	mov	r0, r3
 800a076:	f7fd fe77 	bl	8007d68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3312      	adds	r3, #18
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fe56 	bl	8007d32 <st_word>
					fs->wflag = 1;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2201      	movs	r2, #1
 800a08a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe f8f2 	bl	8008278 <sync_fs>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
 800a09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ff7b 	bl	8009fb4 <f_sync>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d118      	bne.n	800a0fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f107 0208 	add.w	r2, r7, #8
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff fb93 	bl	80097fc <validate>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10c      	bne.n	800a0fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fd fff5 	bl	80080d4 <dec_lock>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b090      	sub	sp, #64	; 0x40
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f107 0208 	add.w	r2, r7, #8
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fb70 	bl	80097fc <validate>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a122:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a126:	2b00      	cmp	r3, #0
 800a128:	d103      	bne.n	800a132 <f_lseek+0x2e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7d5b      	ldrb	r3, [r3, #21]
 800a12e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <f_lseek+0x3c>
 800a13a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a13e:	e201      	b.n	800a544 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 80d9 	beq.w	800a2fc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d15a      	bne.n	800a208 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	1d1a      	adds	r2, r3, #4
 800a15c:	627a      	str	r2, [r7, #36]	; 0x24
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	2302      	movs	r3, #2
 800a164:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d03a      	beq.n	800a1e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	613b      	str	r3, [r7, #16]
 800a176:	2300      	movs	r3, #0
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	3302      	adds	r3, #2
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	3301      	adds	r3, #1
 800a188:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe f901 	bl	8008396 <get_fat>
 800a194:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d804      	bhi.n	800a1a6 <f_lseek+0xa2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	755a      	strb	r2, [r3, #21]
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e1ce      	b.n	800a544 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d104      	bne.n	800a1b8 <f_lseek+0xb4>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	755a      	strb	r2, [r3, #21]
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e1c5      	b.n	800a544 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d0de      	beq.n	800a180 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d809      	bhi.n	800a1de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	1d1a      	adds	r2, r3, #4
 800a1ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	1d1a      	adds	r2, r3, #4
 800a1d8:	627a      	str	r2, [r7, #36]	; 0x24
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d3c4      	bcc.n	800a172 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d803      	bhi.n	800a200 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	e19f      	b.n	800a540 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a200:	2311      	movs	r3, #17
 800a202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a206:	e19b      	b.n	800a540 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d902      	bls.n	800a218 <f_lseek+0x114>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 818d 	beq.w	800a540 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	3b01      	subs	r3, #1
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7fe fb9f 	bl	8008970 <clmt_clust>
 800a232:	4602      	mov	r2, r0
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f7fe f889 	bl	8008358 <clust2sect>
 800a246:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d104      	bne.n	800a258 <f_lseek+0x154>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2202      	movs	r2, #2
 800a252:	755a      	strb	r2, [r3, #21]
 800a254:	2302      	movs	r3, #2
 800a256:	e175      	b.n	800a544 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	8992      	ldrh	r2, [r2, #12]
 800a260:	fbb3 f3f2 	udiv	r3, r3, r2
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	8952      	ldrh	r2, [r2, #10]
 800a268:	3a01      	subs	r2, #1
 800a26a:	4013      	ands	r3, r2
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4413      	add	r3, r2
 800a270:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	8992      	ldrh	r2, [r2, #12]
 800a27a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a27e:	fb01 f202 	mul.w	r2, r1, r2
 800a282:	1a9b      	subs	r3, r3, r2
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 815b 	beq.w	800a540 <f_lseek+0x43c>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	429a      	cmp	r2, r3
 800a292:	f000 8155 	beq.w	800a540 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	7d1b      	ldrb	r3, [r3, #20]
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da18      	bge.n	800a2d2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	7858      	ldrb	r0, [r3, #1]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1a      	ldr	r2, [r3, #32]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f7fd fcc6 	bl	8007c40 <disk_write>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <f_lseek+0x1c0>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	755a      	strb	r2, [r3, #21]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e13f      	b.n	800a544 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7d1b      	ldrb	r3, [r3, #20]
 800a2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	7858      	ldrb	r0, [r3, #1]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2dc:	2301      	movs	r3, #1
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	f7fd fc8e 	bl	8007c00 <disk_read>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <f_lseek+0x1f0>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	755a      	strb	r2, [r3, #21]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e127      	b.n	800a544 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	621a      	str	r2, [r3, #32]
 800a2fa:	e121      	b.n	800a540 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d908      	bls.n	800a318 <f_lseek+0x214>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7d1b      	ldrb	r3, [r3, #20]
 800a30a:	f003 0302 	and.w	r3, r3, #2
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d102      	bne.n	800a318 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a326:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 80b5 	beq.w	800a49a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	895b      	ldrh	r3, [r3, #10]
 800a334:	461a      	mov	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	899b      	ldrh	r3, [r3, #12]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01b      	beq.n	800a37e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	1e59      	subs	r1, r3, #1
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d30f      	bcc.n	800a37e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	425b      	negs	r3, r3
 800a366:	401a      	ands	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a37c:	e022      	b.n	800a3c4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d119      	bne.n	800a3be <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fa56 	bl	8008840 <create_chain>
 800a394:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d104      	bne.n	800a3a6 <f_lseek+0x2a2>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	755a      	strb	r2, [r3, #21]
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e0ce      	b.n	800a544 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ac:	d104      	bne.n	800a3b8 <f_lseek+0x2b4>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	755a      	strb	r2, [r3, #21]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0c5      	b.n	800a544 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d067      	beq.n	800a49a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a3ca:	e03a      	b.n	800a442 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699a      	ldr	r2, [r3, #24]
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	441a      	add	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fa25 	bl	8008840 <create_chain>
 800a3f6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d108      	bne.n	800a410 <f_lseek+0x30c>
							ofs = 0; break;
 800a3fe:	2300      	movs	r3, #0
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	e022      	b.n	800a44a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd ffc4 	bl	8008396 <get_fat>
 800a40e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d104      	bne.n	800a422 <f_lseek+0x31e>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	755a      	strb	r2, [r3, #21]
 800a41e:	2301      	movs	r3, #1
 800a420:	e090      	b.n	800a544 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2b01      	cmp	r3, #1
 800a426:	d904      	bls.n	800a432 <f_lseek+0x32e>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42e:	429a      	cmp	r2, r3
 800a430:	d304      	bcc.n	800a43c <f_lseek+0x338>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2202      	movs	r2, #2
 800a436:	755a      	strb	r2, [r3, #21]
 800a438:	2302      	movs	r3, #2
 800a43a:	e083      	b.n	800a544 <f_lseek+0x440>
					fp->clust = clst;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a440:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	429a      	cmp	r2, r3
 800a448:	d8c0      	bhi.n	800a3cc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699a      	ldr	r2, [r3, #24]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	441a      	add	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	899b      	ldrh	r3, [r3, #12]
 800a45a:	461a      	mov	r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a462:	fb01 f202 	mul.w	r2, r1, r2
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d016      	beq.n	800a49a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a470:	4618      	mov	r0, r3
 800a472:	f7fd ff71 	bl	8008358 <clust2sect>
 800a476:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d104      	bne.n	800a488 <f_lseek+0x384>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	755a      	strb	r2, [r3, #21]
 800a484:	2302      	movs	r3, #2
 800a486:	e05d      	b.n	800a544 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	899b      	ldrh	r3, [r3, #12]
 800a48c:	461a      	mov	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	fbb3 f3f2 	udiv	r3, r3, r2
 800a494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a496:	4413      	add	r3, r2
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d90a      	bls.n	800a4bc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	7d1b      	ldrb	r3, [r3, #20]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	8992      	ldrh	r2, [r2, #12]
 800a4c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c8:	fb01 f202 	mul.w	r2, r1, r2
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d036      	beq.n	800a540 <f_lseek+0x43c>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d031      	beq.n	800a540 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7d1b      	ldrb	r3, [r3, #20]
 800a4e0:	b25b      	sxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	da18      	bge.n	800a518 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	7858      	ldrb	r0, [r3, #1]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f7fd fba3 	bl	8007c40 <disk_write>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <f_lseek+0x406>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	755a      	strb	r2, [r3, #21]
 800a506:	2301      	movs	r3, #1
 800a508:	e01c      	b.n	800a544 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	7858      	ldrb	r0, [r3, #1]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a522:	2301      	movs	r3, #1
 800a524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a526:	f7fd fb6b 	bl	8007c00 <disk_read>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <f_lseek+0x436>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	755a      	strb	r2, [r3, #21]
 800a536:	2301      	movs	r3, #1
 800a538:	e004      	b.n	800a544 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a53e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a540:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a544:	4618      	mov	r0, r3
 800a546:	3740      	adds	r7, #64	; 0x40
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b090      	sub	sp, #64	; 0x40
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a556:	f107 010c 	add.w	r1, r7, #12
 800a55a:	1d3b      	adds	r3, r7, #4
 800a55c:	2200      	movs	r2, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fecc 	bl	80092fc <find_volume>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800a56a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d11f      	bne.n	800a5b2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4611      	mov	r1, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fdae 	bl	80090dc <follow_path>
 800a580:	4603      	mov	r3, r0
 800a582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d111      	bne.n	800a5b2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a58e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a592:	b25b      	sxtb	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	da03      	bge.n	800a5a0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a598:	2306      	movs	r3, #6
 800a59a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a59e:	e008      	b.n	800a5b2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <f_stat+0x66>
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fca1 	bl	8008ef4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a5b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3740      	adds	r7, #64	; 0x40
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800a5be:	b590      	push	{r4, r7, lr}
 800a5c0:	b0a5      	sub	sp, #148	; 0x94
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fdfc 	bl	80091c8 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800a5d0:	f107 0120 	add.w	r1, r7, #32
 800a5d4:	1d3b      	adds	r3, r7, #4
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe fe8f 	bl	80092fc <find_volume>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800a5e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f040 80db 	bne.w	800a7a4 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	657b      	str	r3, [r7, #84]	; 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fd6e 	bl	80090dc <follow_path>
 800a600:	4603      	mov	r3, r0
 800a602:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800a606:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d108      	bne.n	800a620 <f_rename+0x62>
 800a60e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a612:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <f_rename+0x62>
 800a61a:	2306      	movs	r3, #6
 800a61c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800a620:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a624:	2b00      	cmp	r3, #0
 800a626:	d108      	bne.n	800a63a <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800a628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a62c:	2102      	movs	r1, #2
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fc44 	bl	8007ebc <chk_lock>
 800a634:	4603      	mov	r3, r0
 800a636:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800a63a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f040 80b0 	bne.w	800a7a4 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800a644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a646:	f103 010b 	add.w	r1, r3, #11
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	2215      	movs	r2, #21
 800a650:	4618      	mov	r0, r3
 800a652:	f7fd fbb5 	bl	8007dc0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800a656:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800a65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a65e:	2230      	movs	r2, #48	; 0x30
 800a660:	4618      	mov	r0, r3
 800a662:	f7fd fbad 	bl	8007dc0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fd34 	bl	80090dc <follow_path>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800a67a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10c      	bne.n	800a69c <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800a682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a686:	429a      	cmp	r2, r3
 800a688:	d105      	bne.n	800a696 <f_rename+0xd8>
 800a68a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a68c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a68e:	429a      	cmp	r2, r3
 800a690:	d101      	bne.n	800a696 <f_rename+0xd8>
 800a692:	2304      	movs	r3, #4
 800a694:	e000      	b.n	800a698 <f_rename+0xda>
 800a696:	2308      	movs	r3, #8
 800a698:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800a69c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d168      	bne.n	800a776 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800a6a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fbd3 	bl	8008e54 <dir_register>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK) {
 800a6b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d15c      	bne.n	800a776 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800a6c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6c6:	f103 000d 	add.w	r0, r3, #13
 800a6ca:	f107 0308 	add.w	r3, r7, #8
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	2213      	movs	r2, #19
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f7fd fb74 	bl	8007dc0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800a6d8:	7a3a      	ldrb	r2, [r7, #8]
 800a6da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6de:	330b      	adds	r3, #11
 800a6e0:	f042 0220 	orr.w	r2, r2, #32
 800a6e4:	b2d2      	uxtb	r2, r2
 800a6e6:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800a6ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6f2:	330b      	adds	r3, #11
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	f003 0310 	and.w	r3, r3, #16
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d03b      	beq.n	800a776 <f_rename+0x1b8>
 800a6fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	429a      	cmp	r2, r3
 800a704:	d037      	beq.n	800a776 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800a706:	6a3c      	ldr	r4, [r7, #32]
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fb0c 	bl	8008d2c <ld_clust>
 800a714:	4603      	mov	r3, r0
 800a716:	4619      	mov	r1, r3
 800a718:	4620      	mov	r0, r4
 800a71a:	f7fd fe1d 	bl	8008358 <clust2sect>
 800a71e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							if (!dw) {
 800a722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a726:	2b00      	cmp	r3, #0
 800a728:	d103      	bne.n	800a732 <f_rename+0x174>
								res = FR_INT_ERR;
 800a72a:	2302      	movs	r3, #2
 800a72c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a730:	e021      	b.n	800a776 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fd fd6f 	bl	800821c <move_window>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	3334      	adds	r3, #52	; 0x34
 800a748:	3320      	adds	r3, #32
 800a74a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
								if (res == FR_OK && dir[1] == '.') {
 800a74e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10f      	bne.n	800a776 <f_rename+0x1b8>
 800a756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75a:	3301      	adds	r3, #1
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b2e      	cmp	r3, #46	; 0x2e
 800a760:	d109      	bne.n	800a776 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a766:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fafd 	bl	8008d6a <st_clust>
									fs->wflag = 1;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	2201      	movs	r2, #1
 800a774:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800a776:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d112      	bne.n	800a7a4 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800a77e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fb98 	bl	8008eb8 <dir_remove>
 800a788:	4603      	mov	r3, r0
 800a78a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {
 800a78e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a792:	2b00      	cmp	r3, #0
 800a794:	d106      	bne.n	800a7a4 <f_rename+0x1e6>
					res = sync_fs(fs);
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fd fd6d 	bl	8008278 <sync_fs>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a7a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3794      	adds	r7, #148	; 0x94
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd90      	pop	{r4, r7, pc}

0800a7b0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	2b0a      	cmp	r3, #10
 800a7c0:	d103      	bne.n	800a7ca <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a7c2:	210d      	movs	r1, #13
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff fff3 	bl	800a7b0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db25      	blt.n	800a822 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	60fa      	str	r2, [r7, #12]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b3c      	cmp	r3, #60	; 0x3c
 800a7e8:	dd12      	ble.n	800a810 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f103 010c 	add.w	r1, r3, #12
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	f7ff fa47 	bl	8009c8c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	429a      	cmp	r2, r3
 800a804:	d101      	bne.n	800a80a <putc_bfd+0x5a>
 800a806:	2300      	movs	r3, #0
 800a808:	e001      	b.n	800a80e <putc_bfd+0x5e>
 800a80a:	f04f 33ff 	mov.w	r3, #4294967295
 800a80e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	609a      	str	r2, [r3, #8]
 800a820:	e000      	b.n	800a824 <putc_bfd+0x74>
	if (i < 0) return;
 800a822:	bf00      	nop
}
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	db16      	blt.n	800a868 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f103 010c 	add.w	r1, r3, #12
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	461a      	mov	r2, r3
 800a84a:	f107 030c 	add.w	r3, r7, #12
 800a84e:	f7ff fa1d 	bl	8009c8c <f_write>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d107      	bne.n	800a868 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4293      	cmp	r3, r2
 800a860:	d102      	bne.n	800a868 <putc_flush+0x3e>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	e001      	b.n	800a86c <putc_flush+0x42>
	return EOF;
 800a868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	605a      	str	r2, [r3, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	609a      	str	r2, [r3, #8]
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a8a0:	b40e      	push	{r1, r2, r3}
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b0a7      	sub	sp, #156	; 0x9c
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a8aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff ffdf 	bl	800a874 <putc_init>

	va_start(arp, fmt);
 800a8b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a8ba:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a8bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a8cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 81f2 	beq.w	800acba <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800a8d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a8da:	2b25      	cmp	r3, #37	; 0x25
 800a8dc:	d008      	beq.n	800a8f0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a8de:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a8e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff ff61 	bl	800a7b0 <putc_bfd>
			continue;
 800a8ee:	e1e3      	b.n	800acb8 <f_printf+0x418>
		}
		w = f = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a8fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a90c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a910:	2b30      	cmp	r3, #48	; 0x30
 800a912:	d10b      	bne.n	800a92c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a914:	2301      	movs	r3, #1
 800a916:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a91a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a92a:	e024      	b.n	800a976 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a92c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a930:	2b2d      	cmp	r3, #45	; 0x2d
 800a932:	d120      	bne.n	800a976 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a934:	2302      	movs	r3, #2
 800a936:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a93a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a94a:	e014      	b.n	800a976 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a94c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	461a      	mov	r2, r3
 800a95a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a95e:	4413      	add	r3, r2
 800a960:	3b30      	subs	r3, #48	; 0x30
 800a962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a976:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a97a:	2b2f      	cmp	r3, #47	; 0x2f
 800a97c:	d903      	bls.n	800a986 <f_printf+0xe6>
 800a97e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a982:	2b39      	cmp	r3, #57	; 0x39
 800a984:	d9e2      	bls.n	800a94c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a986:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a98a:	2b6c      	cmp	r3, #108	; 0x6c
 800a98c:	d003      	beq.n	800a996 <f_printf+0xf6>
 800a98e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a992:	2b4c      	cmp	r3, #76	; 0x4c
 800a994:	d10d      	bne.n	800a9b2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a996:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a99a:	f043 0304 	orr.w	r3, r3, #4
 800a99e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a9a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a9b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8181 	beq.w	800acbe <f_printf+0x41e>
		d = c;
 800a9bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9c0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a9c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9c8:	2b60      	cmp	r3, #96	; 0x60
 800a9ca:	d908      	bls.n	800a9de <f_printf+0x13e>
 800a9cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9d0:	2b7a      	cmp	r3, #122	; 0x7a
 800a9d2:	d804      	bhi.n	800a9de <f_printf+0x13e>
 800a9d4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9d8:	3b20      	subs	r3, #32
 800a9da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a9de:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9e2:	3b42      	subs	r3, #66	; 0x42
 800a9e4:	2b16      	cmp	r3, #22
 800a9e6:	f200 8098 	bhi.w	800ab1a <f_printf+0x27a>
 800a9ea:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <f_printf+0x150>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aafb 	.word	0x0800aafb
 800a9f4:	0800aae3 	.word	0x0800aae3
 800a9f8:	0800ab0b 	.word	0x0800ab0b
 800a9fc:	0800ab1b 	.word	0x0800ab1b
 800aa00:	0800ab1b 	.word	0x0800ab1b
 800aa04:	0800ab1b 	.word	0x0800ab1b
 800aa08:	0800ab1b 	.word	0x0800ab1b
 800aa0c:	0800ab1b 	.word	0x0800ab1b
 800aa10:	0800ab1b 	.word	0x0800ab1b
 800aa14:	0800ab1b 	.word	0x0800ab1b
 800aa18:	0800ab1b 	.word	0x0800ab1b
 800aa1c:	0800ab1b 	.word	0x0800ab1b
 800aa20:	0800ab1b 	.word	0x0800ab1b
 800aa24:	0800ab03 	.word	0x0800ab03
 800aa28:	0800ab1b 	.word	0x0800ab1b
 800aa2c:	0800ab1b 	.word	0x0800ab1b
 800aa30:	0800ab1b 	.word	0x0800ab1b
 800aa34:	0800aa4d 	.word	0x0800aa4d
 800aa38:	0800ab1b 	.word	0x0800ab1b
 800aa3c:	0800ab0b 	.word	0x0800ab0b
 800aa40:	0800ab1b 	.word	0x0800ab1b
 800aa44:	0800ab1b 	.word	0x0800ab1b
 800aa48:	0800ab13 	.word	0x0800ab13
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800aa4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa4e:	1d1a      	adds	r2, r3, #4
 800aa50:	67ba      	str	r2, [r7, #120]	; 0x78
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa5c:	e004      	b.n	800aa68 <f_printf+0x1c8>
 800aa5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa62:	3301      	adds	r3, #1
 800aa64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1f3      	bne.n	800aa5e <f_printf+0x1be>
			if (!(f & 2)) {
 800aa76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d11a      	bne.n	800aab8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800aa82:	e005      	b.n	800aa90 <f_printf+0x1f0>
 800aa84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa88:	2120      	movs	r1, #32
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff fe90 	bl	800a7b0 <putc_bfd>
 800aa90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d8f0      	bhi.n	800aa84 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800aaa2:	e009      	b.n	800aab8 <f_printf+0x218>
 800aaa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aaaa:	781a      	ldrb	r2, [r3, #0]
 800aaac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fe7c 	bl	800a7b0 <putc_bfd>
 800aab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f1      	bne.n	800aaa4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800aac0:	e005      	b.n	800aace <f_printf+0x22e>
 800aac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aac6:	2120      	movs	r1, #32
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fe71 	bl	800a7b0 <putc_bfd>
 800aace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aad8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aadc:	429a      	cmp	r2, r3
 800aade:	d8f0      	bhi.n	800aac2 <f_printf+0x222>
			continue;
 800aae0:	e0ea      	b.n	800acb8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800aae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aae4:	1d1a      	adds	r2, r3, #4
 800aae6:	67ba      	str	r2, [r7, #120]	; 0x78
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff fe5c 	bl	800a7b0 <putc_bfd>
 800aaf8:	e0de      	b.n	800acb8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800aafa:	2302      	movs	r3, #2
 800aafc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab00:	e014      	b.n	800ab2c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ab02:	2308      	movs	r3, #8
 800ab04:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab08:	e010      	b.n	800ab2c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ab0a:	230a      	movs	r3, #10
 800ab0c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab10:	e00c      	b.n	800ab2c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ab12:	2310      	movs	r3, #16
 800ab14:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ab18:	e008      	b.n	800ab2c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ab1a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ab1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab22:	4611      	mov	r1, r2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff fe43 	bl	800a7b0 <putc_bfd>
 800ab2a:	e0c5      	b.n	800acb8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ab2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d004      	beq.n	800ab42 <f_printf+0x2a2>
 800ab38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab3a:	1d1a      	adds	r2, r3, #4
 800ab3c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	e00c      	b.n	800ab5c <f_printf+0x2bc>
 800ab42:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab46:	2b44      	cmp	r3, #68	; 0x44
 800ab48:	d104      	bne.n	800ab54 <f_printf+0x2b4>
 800ab4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab4c:	1d1a      	adds	r2, r3, #4
 800ab4e:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	e003      	b.n	800ab5c <f_printf+0x2bc>
 800ab54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ab60:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab64:	2b44      	cmp	r3, #68	; 0x44
 800ab66:	d10e      	bne.n	800ab86 <f_printf+0x2e6>
 800ab68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da0a      	bge.n	800ab86 <f_printf+0x2e6>
			v = 0 - v;
 800ab70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab74:	425b      	negs	r3, r3
 800ab76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ab7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ab7e:	f043 0308 	orr.w	r3, r3, #8
 800ab82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ab8c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ab90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab94:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab98:	fb01 f202 	mul.w	r2, r1, r2
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800aba2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800aba6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800abb2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	d90b      	bls.n	800abd2 <f_printf+0x332>
 800abba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abbe:	2b78      	cmp	r3, #120	; 0x78
 800abc0:	d101      	bne.n	800abc6 <f_printf+0x326>
 800abc2:	2227      	movs	r2, #39	; 0x27
 800abc4:	e000      	b.n	800abc8 <f_printf+0x328>
 800abc6:	2207      	movs	r2, #7
 800abc8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800abcc:	4413      	add	r3, r2
 800abce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800abd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800abdc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800abe0:	3230      	adds	r2, #48	; 0x30
 800abe2:	b2d2      	uxtb	r2, r2
 800abe4:	3398      	adds	r3, #152	; 0x98
 800abe6:	443b      	add	r3, r7
 800abe8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800abec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <f_printf+0x35c>
 800abf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abf8:	2b1f      	cmp	r3, #31
 800abfa:	d9c7      	bls.n	800ab8c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800abfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d009      	beq.n	800ac1c <f_printf+0x37c>
 800ac08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ac12:	3398      	adds	r3, #152	; 0x98
 800ac14:	443b      	add	r3, r7
 800ac16:	222d      	movs	r2, #45	; 0x2d
 800ac18:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ac1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <f_printf+0x394>
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	e000      	b.n	800ac36 <f_printf+0x396>
 800ac34:	2320      	movs	r3, #32
 800ac36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ac3a:	e007      	b.n	800ac4c <f_printf+0x3ac>
 800ac3c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ac40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fdb2 	bl	800a7b0 <putc_bfd>
 800ac4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d108      	bne.n	800ac6a <f_printf+0x3ca>
 800ac58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d8e8      	bhi.n	800ac3c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ac6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac74:	f107 020c 	add.w	r2, r7, #12
 800ac78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac7c:	4413      	add	r3, r2
 800ac7e:	781a      	ldrb	r2, [r3, #0]
 800ac80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac84:	4611      	mov	r1, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff fd92 	bl	800a7b0 <putc_bfd>
		} while (i);
 800ac8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ea      	bne.n	800ac6a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ac94:	e007      	b.n	800aca6 <f_printf+0x406>
 800ac96:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ac9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fd85 	bl	800a7b0 <putc_bfd>
 800aca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d8ee      	bhi.n	800ac96 <f_printf+0x3f6>
		c = *fmt++;
 800acb8:	e600      	b.n	800a8bc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <f_printf+0x420>
		if (!c) break;
 800acbe:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800acc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff fdb0 	bl	800a82a <putc_flush>
 800acca:	4603      	mov	r3, r0
}
 800accc:	4618      	mov	r0, r3
 800acce:	379c      	adds	r7, #156	; 0x9c
 800acd0:	46bd      	mov	sp, r7
 800acd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acd6:	b003      	add	sp, #12
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop

0800acdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acea:	2301      	movs	r3, #1
 800acec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acf2:	4b1f      	ldr	r3, [pc, #124]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800acf4:	7a5b      	ldrb	r3, [r3, #9]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d131      	bne.n	800ad60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acfc:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800acfe:	7a5b      	ldrb	r3, [r3, #9]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad06:	2100      	movs	r1, #0
 800ad08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad0c:	7a5b      	ldrb	r3, [r3, #9]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	4a17      	ldr	r2, [pc, #92]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad1a:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad1c:	7a5b      	ldrb	r3, [r3, #9]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad24:	4413      	add	r3, r2
 800ad26:	79fa      	ldrb	r2, [r7, #7]
 800ad28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad2a:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad2c:	7a5b      	ldrb	r3, [r3, #9]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	b2d1      	uxtb	r1, r2
 800ad34:	4a0e      	ldr	r2, [pc, #56]	; (800ad70 <FATFS_LinkDriverEx+0x94>)
 800ad36:	7251      	strb	r1, [r2, #9]
 800ad38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad3a:	7dbb      	ldrb	r3, [r7, #22]
 800ad3c:	3330      	adds	r3, #48	; 0x30
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	3301      	adds	r3, #1
 800ad48:	223a      	movs	r2, #58	; 0x3a
 800ad4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	3302      	adds	r3, #2
 800ad50:	222f      	movs	r2, #47	; 0x2f
 800ad52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	3303      	adds	r3, #3
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	371c      	adds	r7, #28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	200031f4 	.word	0x200031f4

0800ad74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad7e:	2200      	movs	r2, #0
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff ffaa 	bl	800acdc <FATFS_LinkDriverEx>
 800ad88:	4603      	mov	r3, r0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <__errno>:
 800ad94:	4b01      	ldr	r3, [pc, #4]	; (800ad9c <__errno+0x8>)
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	2000000c 	.word	0x2000000c

0800ada0 <__libc_init_array>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4d0d      	ldr	r5, [pc, #52]	; (800add8 <__libc_init_array+0x38>)
 800ada4:	4c0d      	ldr	r4, [pc, #52]	; (800addc <__libc_init_array+0x3c>)
 800ada6:	1b64      	subs	r4, r4, r5
 800ada8:	10a4      	asrs	r4, r4, #2
 800adaa:	2600      	movs	r6, #0
 800adac:	42a6      	cmp	r6, r4
 800adae:	d109      	bne.n	800adc4 <__libc_init_array+0x24>
 800adb0:	4d0b      	ldr	r5, [pc, #44]	; (800ade0 <__libc_init_array+0x40>)
 800adb2:	4c0c      	ldr	r4, [pc, #48]	; (800ade4 <__libc_init_array+0x44>)
 800adb4:	f003 fb0e 	bl	800e3d4 <_init>
 800adb8:	1b64      	subs	r4, r4, r5
 800adba:	10a4      	asrs	r4, r4, #2
 800adbc:	2600      	movs	r6, #0
 800adbe:	42a6      	cmp	r6, r4
 800adc0:	d105      	bne.n	800adce <__libc_init_array+0x2e>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc8:	4798      	blx	r3
 800adca:	3601      	adds	r6, #1
 800adcc:	e7ee      	b.n	800adac <__libc_init_array+0xc>
 800adce:	f855 3b04 	ldr.w	r3, [r5], #4
 800add2:	4798      	blx	r3
 800add4:	3601      	adds	r6, #1
 800add6:	e7f2      	b.n	800adbe <__libc_init_array+0x1e>
 800add8:	0800eb04 	.word	0x0800eb04
 800addc:	0800eb04 	.word	0x0800eb04
 800ade0:	0800eb04 	.word	0x0800eb04
 800ade4:	0800eb08 	.word	0x0800eb08

0800ade8 <memset>:
 800ade8:	4402      	add	r2, r0
 800adea:	4603      	mov	r3, r0
 800adec:	4293      	cmp	r3, r2
 800adee:	d100      	bne.n	800adf2 <memset+0xa>
 800adf0:	4770      	bx	lr
 800adf2:	f803 1b01 	strb.w	r1, [r3], #1
 800adf6:	e7f9      	b.n	800adec <memset+0x4>

0800adf8 <__cvt>:
 800adf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adfc:	ec55 4b10 	vmov	r4, r5, d0
 800ae00:	2d00      	cmp	r5, #0
 800ae02:	460e      	mov	r6, r1
 800ae04:	4619      	mov	r1, r3
 800ae06:	462b      	mov	r3, r5
 800ae08:	bfbb      	ittet	lt
 800ae0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae0e:	461d      	movlt	r5, r3
 800ae10:	2300      	movge	r3, #0
 800ae12:	232d      	movlt	r3, #45	; 0x2d
 800ae14:	700b      	strb	r3, [r1, #0]
 800ae16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae1c:	4691      	mov	r9, r2
 800ae1e:	f023 0820 	bic.w	r8, r3, #32
 800ae22:	bfbc      	itt	lt
 800ae24:	4622      	movlt	r2, r4
 800ae26:	4614      	movlt	r4, r2
 800ae28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae2c:	d005      	beq.n	800ae3a <__cvt+0x42>
 800ae2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae32:	d100      	bne.n	800ae36 <__cvt+0x3e>
 800ae34:	3601      	adds	r6, #1
 800ae36:	2102      	movs	r1, #2
 800ae38:	e000      	b.n	800ae3c <__cvt+0x44>
 800ae3a:	2103      	movs	r1, #3
 800ae3c:	ab03      	add	r3, sp, #12
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	ab02      	add	r3, sp, #8
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	ec45 4b10 	vmov	d0, r4, r5
 800ae48:	4653      	mov	r3, sl
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	f000 fe4c 	bl	800bae8 <_dtoa_r>
 800ae50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae54:	4607      	mov	r7, r0
 800ae56:	d102      	bne.n	800ae5e <__cvt+0x66>
 800ae58:	f019 0f01 	tst.w	r9, #1
 800ae5c:	d022      	beq.n	800aea4 <__cvt+0xac>
 800ae5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae62:	eb07 0906 	add.w	r9, r7, r6
 800ae66:	d110      	bne.n	800ae8a <__cvt+0x92>
 800ae68:	783b      	ldrb	r3, [r7, #0]
 800ae6a:	2b30      	cmp	r3, #48	; 0x30
 800ae6c:	d10a      	bne.n	800ae84 <__cvt+0x8c>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	f7f5 fe47 	bl	8000b08 <__aeabi_dcmpeq>
 800ae7a:	b918      	cbnz	r0, 800ae84 <__cvt+0x8c>
 800ae7c:	f1c6 0601 	rsb	r6, r6, #1
 800ae80:	f8ca 6000 	str.w	r6, [sl]
 800ae84:	f8da 3000 	ldr.w	r3, [sl]
 800ae88:	4499      	add	r9, r3
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7f5 fe39 	bl	8000b08 <__aeabi_dcmpeq>
 800ae96:	b108      	cbz	r0, 800ae9c <__cvt+0xa4>
 800ae98:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae9c:	2230      	movs	r2, #48	; 0x30
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	454b      	cmp	r3, r9
 800aea2:	d307      	bcc.n	800aeb4 <__cvt+0xbc>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea8:	1bdb      	subs	r3, r3, r7
 800aeaa:	4638      	mov	r0, r7
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	b004      	add	sp, #16
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	1c59      	adds	r1, r3, #1
 800aeb6:	9103      	str	r1, [sp, #12]
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	e7f0      	b.n	800ae9e <__cvt+0xa6>

0800aebc <__exponent>:
 800aebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aebe:	4603      	mov	r3, r0
 800aec0:	2900      	cmp	r1, #0
 800aec2:	bfb8      	it	lt
 800aec4:	4249      	neglt	r1, r1
 800aec6:	f803 2b02 	strb.w	r2, [r3], #2
 800aeca:	bfb4      	ite	lt
 800aecc:	222d      	movlt	r2, #45	; 0x2d
 800aece:	222b      	movge	r2, #43	; 0x2b
 800aed0:	2909      	cmp	r1, #9
 800aed2:	7042      	strb	r2, [r0, #1]
 800aed4:	dd2a      	ble.n	800af2c <__exponent+0x70>
 800aed6:	f10d 0407 	add.w	r4, sp, #7
 800aeda:	46a4      	mov	ip, r4
 800aedc:	270a      	movs	r7, #10
 800aede:	46a6      	mov	lr, r4
 800aee0:	460a      	mov	r2, r1
 800aee2:	fb91 f6f7 	sdiv	r6, r1, r7
 800aee6:	fb07 1516 	mls	r5, r7, r6, r1
 800aeea:	3530      	adds	r5, #48	; 0x30
 800aeec:	2a63      	cmp	r2, #99	; 0x63
 800aeee:	f104 34ff 	add.w	r4, r4, #4294967295
 800aef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aef6:	4631      	mov	r1, r6
 800aef8:	dcf1      	bgt.n	800aede <__exponent+0x22>
 800aefa:	3130      	adds	r1, #48	; 0x30
 800aefc:	f1ae 0502 	sub.w	r5, lr, #2
 800af00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af04:	1c44      	adds	r4, r0, #1
 800af06:	4629      	mov	r1, r5
 800af08:	4561      	cmp	r1, ip
 800af0a:	d30a      	bcc.n	800af22 <__exponent+0x66>
 800af0c:	f10d 0209 	add.w	r2, sp, #9
 800af10:	eba2 020e 	sub.w	r2, r2, lr
 800af14:	4565      	cmp	r5, ip
 800af16:	bf88      	it	hi
 800af18:	2200      	movhi	r2, #0
 800af1a:	4413      	add	r3, r2
 800af1c:	1a18      	subs	r0, r3, r0
 800af1e:	b003      	add	sp, #12
 800af20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af2a:	e7ed      	b.n	800af08 <__exponent+0x4c>
 800af2c:	2330      	movs	r3, #48	; 0x30
 800af2e:	3130      	adds	r1, #48	; 0x30
 800af30:	7083      	strb	r3, [r0, #2]
 800af32:	70c1      	strb	r1, [r0, #3]
 800af34:	1d03      	adds	r3, r0, #4
 800af36:	e7f1      	b.n	800af1c <__exponent+0x60>

0800af38 <_printf_float>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ed2d 8b02 	vpush	{d8}
 800af40:	b08d      	sub	sp, #52	; 0x34
 800af42:	460c      	mov	r4, r1
 800af44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af48:	4616      	mov	r6, r2
 800af4a:	461f      	mov	r7, r3
 800af4c:	4605      	mov	r5, r0
 800af4e:	f001 fd71 	bl	800ca34 <_localeconv_r>
 800af52:	f8d0 a000 	ldr.w	sl, [r0]
 800af56:	4650      	mov	r0, sl
 800af58:	f7f5 f95a 	bl	8000210 <strlen>
 800af5c:	2300      	movs	r3, #0
 800af5e:	930a      	str	r3, [sp, #40]	; 0x28
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	f8d8 3000 	ldr.w	r3, [r8]
 800af68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af6c:	3307      	adds	r3, #7
 800af6e:	f023 0307 	bic.w	r3, r3, #7
 800af72:	f103 0208 	add.w	r2, r3, #8
 800af76:	f8c8 2000 	str.w	r2, [r8]
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af8a:	9307      	str	r3, [sp, #28]
 800af8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800af90:	ee08 0a10 	vmov	s16, r0
 800af94:	4b9f      	ldr	r3, [pc, #636]	; (800b214 <_printf_float+0x2dc>)
 800af96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295
 800af9e:	f7f5 fde5 	bl	8000b6c <__aeabi_dcmpun>
 800afa2:	bb88      	cbnz	r0, 800b008 <_printf_float+0xd0>
 800afa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa8:	4b9a      	ldr	r3, [pc, #616]	; (800b214 <_printf_float+0x2dc>)
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295
 800afae:	f7f5 fdbf 	bl	8000b30 <__aeabi_dcmple>
 800afb2:	bb48      	cbnz	r0, 800b008 <_printf_float+0xd0>
 800afb4:	2200      	movs	r2, #0
 800afb6:	2300      	movs	r3, #0
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 fdae 	bl	8000b1c <__aeabi_dcmplt>
 800afc0:	b110      	cbz	r0, 800afc8 <_printf_float+0x90>
 800afc2:	232d      	movs	r3, #45	; 0x2d
 800afc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc8:	4b93      	ldr	r3, [pc, #588]	; (800b218 <_printf_float+0x2e0>)
 800afca:	4894      	ldr	r0, [pc, #592]	; (800b21c <_printf_float+0x2e4>)
 800afcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afd0:	bf94      	ite	ls
 800afd2:	4698      	movls	r8, r3
 800afd4:	4680      	movhi	r8, r0
 800afd6:	2303      	movs	r3, #3
 800afd8:	6123      	str	r3, [r4, #16]
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	f023 0204 	bic.w	r2, r3, #4
 800afe0:	6022      	str	r2, [r4, #0]
 800afe2:	f04f 0900 	mov.w	r9, #0
 800afe6:	9700      	str	r7, [sp, #0]
 800afe8:	4633      	mov	r3, r6
 800afea:	aa0b      	add	r2, sp, #44	; 0x2c
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 f9d8 	bl	800b3a4 <_printf_common>
 800aff4:	3001      	adds	r0, #1
 800aff6:	f040 8090 	bne.w	800b11a <_printf_float+0x1e2>
 800affa:	f04f 30ff 	mov.w	r0, #4294967295
 800affe:	b00d      	add	sp, #52	; 0x34
 800b000:	ecbd 8b02 	vpop	{d8}
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 fdac 	bl	8000b6c <__aeabi_dcmpun>
 800b014:	b140      	cbz	r0, 800b028 <_printf_float+0xf0>
 800b016:	464b      	mov	r3, r9
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfbc      	itt	lt
 800b01c:	232d      	movlt	r3, #45	; 0x2d
 800b01e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b022:	487f      	ldr	r0, [pc, #508]	; (800b220 <_printf_float+0x2e8>)
 800b024:	4b7f      	ldr	r3, [pc, #508]	; (800b224 <_printf_float+0x2ec>)
 800b026:	e7d1      	b.n	800afcc <_printf_float+0x94>
 800b028:	6863      	ldr	r3, [r4, #4]
 800b02a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b02e:	9206      	str	r2, [sp, #24]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	d13f      	bne.n	800b0b4 <_printf_float+0x17c>
 800b034:	2306      	movs	r3, #6
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	6861      	ldr	r1, [r4, #4]
 800b03c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b040:	2300      	movs	r3, #0
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	ab0a      	add	r3, sp, #40	; 0x28
 800b046:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b04a:	ab09      	add	r3, sp, #36	; 0x24
 800b04c:	ec49 8b10 	vmov	d0, r8, r9
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	6022      	str	r2, [r4, #0]
 800b054:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b058:	4628      	mov	r0, r5
 800b05a:	f7ff fecd 	bl	800adf8 <__cvt>
 800b05e:	9b06      	ldr	r3, [sp, #24]
 800b060:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b062:	2b47      	cmp	r3, #71	; 0x47
 800b064:	4680      	mov	r8, r0
 800b066:	d108      	bne.n	800b07a <_printf_float+0x142>
 800b068:	1cc8      	adds	r0, r1, #3
 800b06a:	db02      	blt.n	800b072 <_printf_float+0x13a>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	4299      	cmp	r1, r3
 800b070:	dd41      	ble.n	800b0f6 <_printf_float+0x1be>
 800b072:	f1ab 0b02 	sub.w	fp, fp, #2
 800b076:	fa5f fb8b 	uxtb.w	fp, fp
 800b07a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b07e:	d820      	bhi.n	800b0c2 <_printf_float+0x18a>
 800b080:	3901      	subs	r1, #1
 800b082:	465a      	mov	r2, fp
 800b084:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b088:	9109      	str	r1, [sp, #36]	; 0x24
 800b08a:	f7ff ff17 	bl	800aebc <__exponent>
 800b08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b090:	1813      	adds	r3, r2, r0
 800b092:	2a01      	cmp	r2, #1
 800b094:	4681      	mov	r9, r0
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	dc02      	bgt.n	800b0a0 <_printf_float+0x168>
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	07d2      	lsls	r2, r2, #31
 800b09e:	d501      	bpl.n	800b0a4 <_printf_float+0x16c>
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d09c      	beq.n	800afe6 <_printf_float+0xae>
 800b0ac:	232d      	movs	r3, #45	; 0x2d
 800b0ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b2:	e798      	b.n	800afe6 <_printf_float+0xae>
 800b0b4:	9a06      	ldr	r2, [sp, #24]
 800b0b6:	2a47      	cmp	r2, #71	; 0x47
 800b0b8:	d1be      	bne.n	800b038 <_printf_float+0x100>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1bc      	bne.n	800b038 <_printf_float+0x100>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e7b9      	b.n	800b036 <_printf_float+0xfe>
 800b0c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0c6:	d118      	bne.n	800b0fa <_printf_float+0x1c2>
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	6863      	ldr	r3, [r4, #4]
 800b0cc:	dd0b      	ble.n	800b0e6 <_printf_float+0x1ae>
 800b0ce:	6121      	str	r1, [r4, #16]
 800b0d0:	b913      	cbnz	r3, 800b0d8 <_printf_float+0x1a0>
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	07d0      	lsls	r0, r2, #31
 800b0d6:	d502      	bpl.n	800b0de <_printf_float+0x1a6>
 800b0d8:	3301      	adds	r3, #1
 800b0da:	440b      	add	r3, r1
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0e0:	f04f 0900 	mov.w	r9, #0
 800b0e4:	e7de      	b.n	800b0a4 <_printf_float+0x16c>
 800b0e6:	b913      	cbnz	r3, 800b0ee <_printf_float+0x1b6>
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	07d2      	lsls	r2, r2, #31
 800b0ec:	d501      	bpl.n	800b0f2 <_printf_float+0x1ba>
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	e7f4      	b.n	800b0dc <_printf_float+0x1a4>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e7f2      	b.n	800b0dc <_printf_float+0x1a4>
 800b0f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fc:	4299      	cmp	r1, r3
 800b0fe:	db05      	blt.n	800b10c <_printf_float+0x1d4>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	6121      	str	r1, [r4, #16]
 800b104:	07d8      	lsls	r0, r3, #31
 800b106:	d5ea      	bpl.n	800b0de <_printf_float+0x1a6>
 800b108:	1c4b      	adds	r3, r1, #1
 800b10a:	e7e7      	b.n	800b0dc <_printf_float+0x1a4>
 800b10c:	2900      	cmp	r1, #0
 800b10e:	bfd4      	ite	le
 800b110:	f1c1 0202 	rsble	r2, r1, #2
 800b114:	2201      	movgt	r2, #1
 800b116:	4413      	add	r3, r2
 800b118:	e7e0      	b.n	800b0dc <_printf_float+0x1a4>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	055a      	lsls	r2, r3, #21
 800b11e:	d407      	bmi.n	800b130 <_printf_float+0x1f8>
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	4642      	mov	r2, r8
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	47b8      	blx	r7
 800b12a:	3001      	adds	r0, #1
 800b12c:	d12c      	bne.n	800b188 <_printf_float+0x250>
 800b12e:	e764      	b.n	800affa <_printf_float+0xc2>
 800b130:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b134:	f240 80e0 	bls.w	800b2f8 <_printf_float+0x3c0>
 800b138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b13c:	2200      	movs	r2, #0
 800b13e:	2300      	movs	r3, #0
 800b140:	f7f5 fce2 	bl	8000b08 <__aeabi_dcmpeq>
 800b144:	2800      	cmp	r0, #0
 800b146:	d034      	beq.n	800b1b2 <_printf_float+0x27a>
 800b148:	4a37      	ldr	r2, [pc, #220]	; (800b228 <_printf_float+0x2f0>)
 800b14a:	2301      	movs	r3, #1
 800b14c:	4631      	mov	r1, r6
 800b14e:	4628      	mov	r0, r5
 800b150:	47b8      	blx	r7
 800b152:	3001      	adds	r0, #1
 800b154:	f43f af51 	beq.w	800affa <_printf_float+0xc2>
 800b158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b15c:	429a      	cmp	r2, r3
 800b15e:	db02      	blt.n	800b166 <_printf_float+0x22e>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	07d8      	lsls	r0, r3, #31
 800b164:	d510      	bpl.n	800b188 <_printf_float+0x250>
 800b166:	ee18 3a10 	vmov	r3, s16
 800b16a:	4652      	mov	r2, sl
 800b16c:	4631      	mov	r1, r6
 800b16e:	4628      	mov	r0, r5
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	f43f af41 	beq.w	800affa <_printf_float+0xc2>
 800b178:	f04f 0800 	mov.w	r8, #0
 800b17c:	f104 091a 	add.w	r9, r4, #26
 800b180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b182:	3b01      	subs	r3, #1
 800b184:	4543      	cmp	r3, r8
 800b186:	dc09      	bgt.n	800b19c <_printf_float+0x264>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	079b      	lsls	r3, r3, #30
 800b18c:	f100 8105 	bmi.w	800b39a <_printf_float+0x462>
 800b190:	68e0      	ldr	r0, [r4, #12]
 800b192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b194:	4298      	cmp	r0, r3
 800b196:	bfb8      	it	lt
 800b198:	4618      	movlt	r0, r3
 800b19a:	e730      	b.n	800affe <_printf_float+0xc6>
 800b19c:	2301      	movs	r3, #1
 800b19e:	464a      	mov	r2, r9
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f43f af27 	beq.w	800affa <_printf_float+0xc2>
 800b1ac:	f108 0801 	add.w	r8, r8, #1
 800b1b0:	e7e6      	b.n	800b180 <_printf_float+0x248>
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dc39      	bgt.n	800b22c <_printf_float+0x2f4>
 800b1b8:	4a1b      	ldr	r2, [pc, #108]	; (800b228 <_printf_float+0x2f0>)
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	f43f af19 	beq.w	800affa <_printf_float+0xc2>
 800b1c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	d102      	bne.n	800b1d6 <_printf_float+0x29e>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	07d9      	lsls	r1, r3, #31
 800b1d4:	d5d8      	bpl.n	800b188 <_printf_float+0x250>
 800b1d6:	ee18 3a10 	vmov	r3, s16
 800b1da:	4652      	mov	r2, sl
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f43f af09 	beq.w	800affa <_printf_float+0xc2>
 800b1e8:	f04f 0900 	mov.w	r9, #0
 800b1ec:	f104 0a1a 	add.w	sl, r4, #26
 800b1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f2:	425b      	negs	r3, r3
 800b1f4:	454b      	cmp	r3, r9
 800b1f6:	dc01      	bgt.n	800b1fc <_printf_float+0x2c4>
 800b1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fa:	e792      	b.n	800b122 <_printf_float+0x1ea>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4652      	mov	r2, sl
 800b200:	4631      	mov	r1, r6
 800b202:	4628      	mov	r0, r5
 800b204:	47b8      	blx	r7
 800b206:	3001      	adds	r0, #1
 800b208:	f43f aef7 	beq.w	800affa <_printf_float+0xc2>
 800b20c:	f109 0901 	add.w	r9, r9, #1
 800b210:	e7ee      	b.n	800b1f0 <_printf_float+0x2b8>
 800b212:	bf00      	nop
 800b214:	7fefffff 	.word	0x7fefffff
 800b218:	0800e728 	.word	0x0800e728
 800b21c:	0800e72c 	.word	0x0800e72c
 800b220:	0800e734 	.word	0x0800e734
 800b224:	0800e730 	.word	0x0800e730
 800b228:	0800e738 	.word	0x0800e738
 800b22c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b22e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b230:	429a      	cmp	r2, r3
 800b232:	bfa8      	it	ge
 800b234:	461a      	movge	r2, r3
 800b236:	2a00      	cmp	r2, #0
 800b238:	4691      	mov	r9, r2
 800b23a:	dc37      	bgt.n	800b2ac <_printf_float+0x374>
 800b23c:	f04f 0b00 	mov.w	fp, #0
 800b240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b244:	f104 021a 	add.w	r2, r4, #26
 800b248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	eba3 0309 	sub.w	r3, r3, r9
 800b250:	455b      	cmp	r3, fp
 800b252:	dc33      	bgt.n	800b2bc <_printf_float+0x384>
 800b254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b258:	429a      	cmp	r2, r3
 800b25a:	db3b      	blt.n	800b2d4 <_printf_float+0x39c>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	07da      	lsls	r2, r3, #31
 800b260:	d438      	bmi.n	800b2d4 <_printf_float+0x39c>
 800b262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b264:	9a05      	ldr	r2, [sp, #20]
 800b266:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b268:	1a9a      	subs	r2, r3, r2
 800b26a:	eba3 0901 	sub.w	r9, r3, r1
 800b26e:	4591      	cmp	r9, r2
 800b270:	bfa8      	it	ge
 800b272:	4691      	movge	r9, r2
 800b274:	f1b9 0f00 	cmp.w	r9, #0
 800b278:	dc35      	bgt.n	800b2e6 <_printf_float+0x3ae>
 800b27a:	f04f 0800 	mov.w	r8, #0
 800b27e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b282:	f104 0a1a 	add.w	sl, r4, #26
 800b286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	eba3 0309 	sub.w	r3, r3, r9
 800b290:	4543      	cmp	r3, r8
 800b292:	f77f af79 	ble.w	800b188 <_printf_float+0x250>
 800b296:	2301      	movs	r3, #1
 800b298:	4652      	mov	r2, sl
 800b29a:	4631      	mov	r1, r6
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b8      	blx	r7
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	f43f aeaa 	beq.w	800affa <_printf_float+0xc2>
 800b2a6:	f108 0801 	add.w	r8, r8, #1
 800b2aa:	e7ec      	b.n	800b286 <_printf_float+0x34e>
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d1c0      	bne.n	800b23c <_printf_float+0x304>
 800b2ba:	e69e      	b.n	800affa <_printf_float+0xc2>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	9205      	str	r2, [sp, #20]
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f43f ae97 	beq.w	800affa <_printf_float+0xc2>
 800b2cc:	9a05      	ldr	r2, [sp, #20]
 800b2ce:	f10b 0b01 	add.w	fp, fp, #1
 800b2d2:	e7b9      	b.n	800b248 <_printf_float+0x310>
 800b2d4:	ee18 3a10 	vmov	r3, s16
 800b2d8:	4652      	mov	r2, sl
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b8      	blx	r7
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d1be      	bne.n	800b262 <_printf_float+0x32a>
 800b2e4:	e689      	b.n	800affa <_printf_float+0xc2>
 800b2e6:	9a05      	ldr	r2, [sp, #20]
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	4442      	add	r2, r8
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d1c1      	bne.n	800b27a <_printf_float+0x342>
 800b2f6:	e680      	b.n	800affa <_printf_float+0xc2>
 800b2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2fa:	2a01      	cmp	r2, #1
 800b2fc:	dc01      	bgt.n	800b302 <_printf_float+0x3ca>
 800b2fe:	07db      	lsls	r3, r3, #31
 800b300:	d538      	bpl.n	800b374 <_printf_float+0x43c>
 800b302:	2301      	movs	r3, #1
 800b304:	4642      	mov	r2, r8
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	f43f ae74 	beq.w	800affa <_printf_float+0xc2>
 800b312:	ee18 3a10 	vmov	r3, s16
 800b316:	4652      	mov	r2, sl
 800b318:	4631      	mov	r1, r6
 800b31a:	4628      	mov	r0, r5
 800b31c:	47b8      	blx	r7
 800b31e:	3001      	adds	r0, #1
 800b320:	f43f ae6b 	beq.w	800affa <_printf_float+0xc2>
 800b324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b328:	2200      	movs	r2, #0
 800b32a:	2300      	movs	r3, #0
 800b32c:	f7f5 fbec 	bl	8000b08 <__aeabi_dcmpeq>
 800b330:	b9d8      	cbnz	r0, 800b36a <_printf_float+0x432>
 800b332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b334:	f108 0201 	add.w	r2, r8, #1
 800b338:	3b01      	subs	r3, #1
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b8      	blx	r7
 800b340:	3001      	adds	r0, #1
 800b342:	d10e      	bne.n	800b362 <_printf_float+0x42a>
 800b344:	e659      	b.n	800affa <_printf_float+0xc2>
 800b346:	2301      	movs	r3, #1
 800b348:	4652      	mov	r2, sl
 800b34a:	4631      	mov	r1, r6
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b8      	blx	r7
 800b350:	3001      	adds	r0, #1
 800b352:	f43f ae52 	beq.w	800affa <_printf_float+0xc2>
 800b356:	f108 0801 	add.w	r8, r8, #1
 800b35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b35c:	3b01      	subs	r3, #1
 800b35e:	4543      	cmp	r3, r8
 800b360:	dcf1      	bgt.n	800b346 <_printf_float+0x40e>
 800b362:	464b      	mov	r3, r9
 800b364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b368:	e6dc      	b.n	800b124 <_printf_float+0x1ec>
 800b36a:	f04f 0800 	mov.w	r8, #0
 800b36e:	f104 0a1a 	add.w	sl, r4, #26
 800b372:	e7f2      	b.n	800b35a <_printf_float+0x422>
 800b374:	2301      	movs	r3, #1
 800b376:	4642      	mov	r2, r8
 800b378:	e7df      	b.n	800b33a <_printf_float+0x402>
 800b37a:	2301      	movs	r3, #1
 800b37c:	464a      	mov	r2, r9
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f ae38 	beq.w	800affa <_printf_float+0xc2>
 800b38a:	f108 0801 	add.w	r8, r8, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	4543      	cmp	r3, r8
 800b396:	dcf0      	bgt.n	800b37a <_printf_float+0x442>
 800b398:	e6fa      	b.n	800b190 <_printf_float+0x258>
 800b39a:	f04f 0800 	mov.w	r8, #0
 800b39e:	f104 0919 	add.w	r9, r4, #25
 800b3a2:	e7f4      	b.n	800b38e <_printf_float+0x456>

0800b3a4 <_printf_common>:
 800b3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	4699      	mov	r9, r3
 800b3ac:	688a      	ldr	r2, [r1, #8]
 800b3ae:	690b      	ldr	r3, [r1, #16]
 800b3b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	bfb8      	it	lt
 800b3b8:	4613      	movlt	r3, r2
 800b3ba:	6033      	str	r3, [r6, #0]
 800b3bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	b10a      	cbz	r2, 800b3ca <_printf_common+0x26>
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	6033      	str	r3, [r6, #0]
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	0699      	lsls	r1, r3, #26
 800b3ce:	bf42      	ittt	mi
 800b3d0:	6833      	ldrmi	r3, [r6, #0]
 800b3d2:	3302      	addmi	r3, #2
 800b3d4:	6033      	strmi	r3, [r6, #0]
 800b3d6:	6825      	ldr	r5, [r4, #0]
 800b3d8:	f015 0506 	ands.w	r5, r5, #6
 800b3dc:	d106      	bne.n	800b3ec <_printf_common+0x48>
 800b3de:	f104 0a19 	add.w	sl, r4, #25
 800b3e2:	68e3      	ldr	r3, [r4, #12]
 800b3e4:	6832      	ldr	r2, [r6, #0]
 800b3e6:	1a9b      	subs	r3, r3, r2
 800b3e8:	42ab      	cmp	r3, r5
 800b3ea:	dc26      	bgt.n	800b43a <_printf_common+0x96>
 800b3ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3f0:	1e13      	subs	r3, r2, #0
 800b3f2:	6822      	ldr	r2, [r4, #0]
 800b3f4:	bf18      	it	ne
 800b3f6:	2301      	movne	r3, #1
 800b3f8:	0692      	lsls	r2, r2, #26
 800b3fa:	d42b      	bmi.n	800b454 <_printf_common+0xb0>
 800b3fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b400:	4649      	mov	r1, r9
 800b402:	4638      	mov	r0, r7
 800b404:	47c0      	blx	r8
 800b406:	3001      	adds	r0, #1
 800b408:	d01e      	beq.n	800b448 <_printf_common+0xa4>
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	68e5      	ldr	r5, [r4, #12]
 800b40e:	6832      	ldr	r2, [r6, #0]
 800b410:	f003 0306 	and.w	r3, r3, #6
 800b414:	2b04      	cmp	r3, #4
 800b416:	bf08      	it	eq
 800b418:	1aad      	subeq	r5, r5, r2
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	6922      	ldr	r2, [r4, #16]
 800b41e:	bf0c      	ite	eq
 800b420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b424:	2500      	movne	r5, #0
 800b426:	4293      	cmp	r3, r2
 800b428:	bfc4      	itt	gt
 800b42a:	1a9b      	subgt	r3, r3, r2
 800b42c:	18ed      	addgt	r5, r5, r3
 800b42e:	2600      	movs	r6, #0
 800b430:	341a      	adds	r4, #26
 800b432:	42b5      	cmp	r5, r6
 800b434:	d11a      	bne.n	800b46c <_printf_common+0xc8>
 800b436:	2000      	movs	r0, #0
 800b438:	e008      	b.n	800b44c <_printf_common+0xa8>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4652      	mov	r2, sl
 800b43e:	4649      	mov	r1, r9
 800b440:	4638      	mov	r0, r7
 800b442:	47c0      	blx	r8
 800b444:	3001      	adds	r0, #1
 800b446:	d103      	bne.n	800b450 <_printf_common+0xac>
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b450:	3501      	adds	r5, #1
 800b452:	e7c6      	b.n	800b3e2 <_printf_common+0x3e>
 800b454:	18e1      	adds	r1, r4, r3
 800b456:	1c5a      	adds	r2, r3, #1
 800b458:	2030      	movs	r0, #48	; 0x30
 800b45a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b45e:	4422      	add	r2, r4
 800b460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b468:	3302      	adds	r3, #2
 800b46a:	e7c7      	b.n	800b3fc <_printf_common+0x58>
 800b46c:	2301      	movs	r3, #1
 800b46e:	4622      	mov	r2, r4
 800b470:	4649      	mov	r1, r9
 800b472:	4638      	mov	r0, r7
 800b474:	47c0      	blx	r8
 800b476:	3001      	adds	r0, #1
 800b478:	d0e6      	beq.n	800b448 <_printf_common+0xa4>
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7d9      	b.n	800b432 <_printf_common+0x8e>
	...

0800b480 <_printf_i>:
 800b480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	7e0f      	ldrb	r7, [r1, #24]
 800b486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b488:	2f78      	cmp	r7, #120	; 0x78
 800b48a:	4691      	mov	r9, r2
 800b48c:	4680      	mov	r8, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	469a      	mov	sl, r3
 800b492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b496:	d807      	bhi.n	800b4a8 <_printf_i+0x28>
 800b498:	2f62      	cmp	r7, #98	; 0x62
 800b49a:	d80a      	bhi.n	800b4b2 <_printf_i+0x32>
 800b49c:	2f00      	cmp	r7, #0
 800b49e:	f000 80d8 	beq.w	800b652 <_printf_i+0x1d2>
 800b4a2:	2f58      	cmp	r7, #88	; 0x58
 800b4a4:	f000 80a3 	beq.w	800b5ee <_printf_i+0x16e>
 800b4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4b0:	e03a      	b.n	800b528 <_printf_i+0xa8>
 800b4b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4b6:	2b15      	cmp	r3, #21
 800b4b8:	d8f6      	bhi.n	800b4a8 <_printf_i+0x28>
 800b4ba:	a101      	add	r1, pc, #4	; (adr r1, 800b4c0 <_printf_i+0x40>)
 800b4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4c0:	0800b519 	.word	0x0800b519
 800b4c4:	0800b52d 	.word	0x0800b52d
 800b4c8:	0800b4a9 	.word	0x0800b4a9
 800b4cc:	0800b4a9 	.word	0x0800b4a9
 800b4d0:	0800b4a9 	.word	0x0800b4a9
 800b4d4:	0800b4a9 	.word	0x0800b4a9
 800b4d8:	0800b52d 	.word	0x0800b52d
 800b4dc:	0800b4a9 	.word	0x0800b4a9
 800b4e0:	0800b4a9 	.word	0x0800b4a9
 800b4e4:	0800b4a9 	.word	0x0800b4a9
 800b4e8:	0800b4a9 	.word	0x0800b4a9
 800b4ec:	0800b639 	.word	0x0800b639
 800b4f0:	0800b55d 	.word	0x0800b55d
 800b4f4:	0800b61b 	.word	0x0800b61b
 800b4f8:	0800b4a9 	.word	0x0800b4a9
 800b4fc:	0800b4a9 	.word	0x0800b4a9
 800b500:	0800b65b 	.word	0x0800b65b
 800b504:	0800b4a9 	.word	0x0800b4a9
 800b508:	0800b55d 	.word	0x0800b55d
 800b50c:	0800b4a9 	.word	0x0800b4a9
 800b510:	0800b4a9 	.word	0x0800b4a9
 800b514:	0800b623 	.word	0x0800b623
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	1d1a      	adds	r2, r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	602a      	str	r2, [r5, #0]
 800b520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b528:	2301      	movs	r3, #1
 800b52a:	e0a3      	b.n	800b674 <_printf_i+0x1f4>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	6829      	ldr	r1, [r5, #0]
 800b530:	0606      	lsls	r6, r0, #24
 800b532:	f101 0304 	add.w	r3, r1, #4
 800b536:	d50a      	bpl.n	800b54e <_printf_i+0xce>
 800b538:	680e      	ldr	r6, [r1, #0]
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	2e00      	cmp	r6, #0
 800b53e:	da03      	bge.n	800b548 <_printf_i+0xc8>
 800b540:	232d      	movs	r3, #45	; 0x2d
 800b542:	4276      	negs	r6, r6
 800b544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b548:	485e      	ldr	r0, [pc, #376]	; (800b6c4 <_printf_i+0x244>)
 800b54a:	230a      	movs	r3, #10
 800b54c:	e019      	b.n	800b582 <_printf_i+0x102>
 800b54e:	680e      	ldr	r6, [r1, #0]
 800b550:	602b      	str	r3, [r5, #0]
 800b552:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b556:	bf18      	it	ne
 800b558:	b236      	sxthne	r6, r6
 800b55a:	e7ef      	b.n	800b53c <_printf_i+0xbc>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	6820      	ldr	r0, [r4, #0]
 800b560:	1d19      	adds	r1, r3, #4
 800b562:	6029      	str	r1, [r5, #0]
 800b564:	0601      	lsls	r1, r0, #24
 800b566:	d501      	bpl.n	800b56c <_printf_i+0xec>
 800b568:	681e      	ldr	r6, [r3, #0]
 800b56a:	e002      	b.n	800b572 <_printf_i+0xf2>
 800b56c:	0646      	lsls	r6, r0, #25
 800b56e:	d5fb      	bpl.n	800b568 <_printf_i+0xe8>
 800b570:	881e      	ldrh	r6, [r3, #0]
 800b572:	4854      	ldr	r0, [pc, #336]	; (800b6c4 <_printf_i+0x244>)
 800b574:	2f6f      	cmp	r7, #111	; 0x6f
 800b576:	bf0c      	ite	eq
 800b578:	2308      	moveq	r3, #8
 800b57a:	230a      	movne	r3, #10
 800b57c:	2100      	movs	r1, #0
 800b57e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b582:	6865      	ldr	r5, [r4, #4]
 800b584:	60a5      	str	r5, [r4, #8]
 800b586:	2d00      	cmp	r5, #0
 800b588:	bfa2      	ittt	ge
 800b58a:	6821      	ldrge	r1, [r4, #0]
 800b58c:	f021 0104 	bicge.w	r1, r1, #4
 800b590:	6021      	strge	r1, [r4, #0]
 800b592:	b90e      	cbnz	r6, 800b598 <_printf_i+0x118>
 800b594:	2d00      	cmp	r5, #0
 800b596:	d04d      	beq.n	800b634 <_printf_i+0x1b4>
 800b598:	4615      	mov	r5, r2
 800b59a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b59e:	fb03 6711 	mls	r7, r3, r1, r6
 800b5a2:	5dc7      	ldrb	r7, [r0, r7]
 800b5a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5a8:	4637      	mov	r7, r6
 800b5aa:	42bb      	cmp	r3, r7
 800b5ac:	460e      	mov	r6, r1
 800b5ae:	d9f4      	bls.n	800b59a <_printf_i+0x11a>
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	d10b      	bne.n	800b5cc <_printf_i+0x14c>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	07de      	lsls	r6, r3, #31
 800b5b8:	d508      	bpl.n	800b5cc <_printf_i+0x14c>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	6861      	ldr	r1, [r4, #4]
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	bfde      	ittt	le
 800b5c2:	2330      	movle	r3, #48	; 0x30
 800b5c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5cc:	1b52      	subs	r2, r2, r5
 800b5ce:	6122      	str	r2, [r4, #16]
 800b5d0:	f8cd a000 	str.w	sl, [sp]
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	aa03      	add	r2, sp, #12
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4640      	mov	r0, r8
 800b5dc:	f7ff fee2 	bl	800b3a4 <_printf_common>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d14c      	bne.n	800b67e <_printf_i+0x1fe>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b004      	add	sp, #16
 800b5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ee:	4835      	ldr	r0, [pc, #212]	; (800b6c4 <_printf_i+0x244>)
 800b5f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5f4:	6829      	ldr	r1, [r5, #0]
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5fc:	6029      	str	r1, [r5, #0]
 800b5fe:	061d      	lsls	r5, r3, #24
 800b600:	d514      	bpl.n	800b62c <_printf_i+0x1ac>
 800b602:	07df      	lsls	r7, r3, #31
 800b604:	bf44      	itt	mi
 800b606:	f043 0320 	orrmi.w	r3, r3, #32
 800b60a:	6023      	strmi	r3, [r4, #0]
 800b60c:	b91e      	cbnz	r6, 800b616 <_printf_i+0x196>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	f023 0320 	bic.w	r3, r3, #32
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	2310      	movs	r3, #16
 800b618:	e7b0      	b.n	800b57c <_printf_i+0xfc>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	f043 0320 	orr.w	r3, r3, #32
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	2378      	movs	r3, #120	; 0x78
 800b624:	4828      	ldr	r0, [pc, #160]	; (800b6c8 <_printf_i+0x248>)
 800b626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b62a:	e7e3      	b.n	800b5f4 <_printf_i+0x174>
 800b62c:	0659      	lsls	r1, r3, #25
 800b62e:	bf48      	it	mi
 800b630:	b2b6      	uxthmi	r6, r6
 800b632:	e7e6      	b.n	800b602 <_printf_i+0x182>
 800b634:	4615      	mov	r5, r2
 800b636:	e7bb      	b.n	800b5b0 <_printf_i+0x130>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	6826      	ldr	r6, [r4, #0]
 800b63c:	6961      	ldr	r1, [r4, #20]
 800b63e:	1d18      	adds	r0, r3, #4
 800b640:	6028      	str	r0, [r5, #0]
 800b642:	0635      	lsls	r5, r6, #24
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	d501      	bpl.n	800b64c <_printf_i+0x1cc>
 800b648:	6019      	str	r1, [r3, #0]
 800b64a:	e002      	b.n	800b652 <_printf_i+0x1d2>
 800b64c:	0670      	lsls	r0, r6, #25
 800b64e:	d5fb      	bpl.n	800b648 <_printf_i+0x1c8>
 800b650:	8019      	strh	r1, [r3, #0]
 800b652:	2300      	movs	r3, #0
 800b654:	6123      	str	r3, [r4, #16]
 800b656:	4615      	mov	r5, r2
 800b658:	e7ba      	b.n	800b5d0 <_printf_i+0x150>
 800b65a:	682b      	ldr	r3, [r5, #0]
 800b65c:	1d1a      	adds	r2, r3, #4
 800b65e:	602a      	str	r2, [r5, #0]
 800b660:	681d      	ldr	r5, [r3, #0]
 800b662:	6862      	ldr	r2, [r4, #4]
 800b664:	2100      	movs	r1, #0
 800b666:	4628      	mov	r0, r5
 800b668:	f7f4 fdda 	bl	8000220 <memchr>
 800b66c:	b108      	cbz	r0, 800b672 <_printf_i+0x1f2>
 800b66e:	1b40      	subs	r0, r0, r5
 800b670:	6060      	str	r0, [r4, #4]
 800b672:	6863      	ldr	r3, [r4, #4]
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	2300      	movs	r3, #0
 800b678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b67c:	e7a8      	b.n	800b5d0 <_printf_i+0x150>
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	462a      	mov	r2, r5
 800b682:	4649      	mov	r1, r9
 800b684:	4640      	mov	r0, r8
 800b686:	47d0      	blx	sl
 800b688:	3001      	adds	r0, #1
 800b68a:	d0ab      	beq.n	800b5e4 <_printf_i+0x164>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	079b      	lsls	r3, r3, #30
 800b690:	d413      	bmi.n	800b6ba <_printf_i+0x23a>
 800b692:	68e0      	ldr	r0, [r4, #12]
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	4298      	cmp	r0, r3
 800b698:	bfb8      	it	lt
 800b69a:	4618      	movlt	r0, r3
 800b69c:	e7a4      	b.n	800b5e8 <_printf_i+0x168>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	47d0      	blx	sl
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d09b      	beq.n	800b5e4 <_printf_i+0x164>
 800b6ac:	3501      	adds	r5, #1
 800b6ae:	68e3      	ldr	r3, [r4, #12]
 800b6b0:	9903      	ldr	r1, [sp, #12]
 800b6b2:	1a5b      	subs	r3, r3, r1
 800b6b4:	42ab      	cmp	r3, r5
 800b6b6:	dcf2      	bgt.n	800b69e <_printf_i+0x21e>
 800b6b8:	e7eb      	b.n	800b692 <_printf_i+0x212>
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	f104 0619 	add.w	r6, r4, #25
 800b6c0:	e7f5      	b.n	800b6ae <_printf_i+0x22e>
 800b6c2:	bf00      	nop
 800b6c4:	0800e73a 	.word	0x0800e73a
 800b6c8:	0800e74b 	.word	0x0800e74b

0800b6cc <iprintf>:
 800b6cc:	b40f      	push	{r0, r1, r2, r3}
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <iprintf+0x2c>)
 800b6d0:	b513      	push	{r0, r1, r4, lr}
 800b6d2:	681c      	ldr	r4, [r3, #0]
 800b6d4:	b124      	cbz	r4, 800b6e0 <iprintf+0x14>
 800b6d6:	69a3      	ldr	r3, [r4, #24]
 800b6d8:	b913      	cbnz	r3, 800b6e0 <iprintf+0x14>
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f001 f90c 	bl	800c8f8 <__sinit>
 800b6e0:	ab05      	add	r3, sp, #20
 800b6e2:	9a04      	ldr	r2, [sp, #16]
 800b6e4:	68a1      	ldr	r1, [r4, #8]
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f002 f825 	bl	800d738 <_vfiprintf_r>
 800b6ee:	b002      	add	sp, #8
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	b004      	add	sp, #16
 800b6f6:	4770      	bx	lr
 800b6f8:	2000000c 	.word	0x2000000c

0800b6fc <_puts_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	460e      	mov	r6, r1
 800b700:	4605      	mov	r5, r0
 800b702:	b118      	cbz	r0, 800b70c <_puts_r+0x10>
 800b704:	6983      	ldr	r3, [r0, #24]
 800b706:	b90b      	cbnz	r3, 800b70c <_puts_r+0x10>
 800b708:	f001 f8f6 	bl	800c8f8 <__sinit>
 800b70c:	69ab      	ldr	r3, [r5, #24]
 800b70e:	68ac      	ldr	r4, [r5, #8]
 800b710:	b913      	cbnz	r3, 800b718 <_puts_r+0x1c>
 800b712:	4628      	mov	r0, r5
 800b714:	f001 f8f0 	bl	800c8f8 <__sinit>
 800b718:	4b2c      	ldr	r3, [pc, #176]	; (800b7cc <_puts_r+0xd0>)
 800b71a:	429c      	cmp	r4, r3
 800b71c:	d120      	bne.n	800b760 <_puts_r+0x64>
 800b71e:	686c      	ldr	r4, [r5, #4]
 800b720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b722:	07db      	lsls	r3, r3, #31
 800b724:	d405      	bmi.n	800b732 <_puts_r+0x36>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	0598      	lsls	r0, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_puts_r+0x36>
 800b72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72e:	f001 f986 	bl	800ca3e <__retarget_lock_acquire_recursive>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	0719      	lsls	r1, r3, #28
 800b736:	d51d      	bpl.n	800b774 <_puts_r+0x78>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b1db      	cbz	r3, 800b774 <_puts_r+0x78>
 800b73c:	3e01      	subs	r6, #1
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b744:	3b01      	subs	r3, #1
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	bb39      	cbnz	r1, 800b79a <_puts_r+0x9e>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da38      	bge.n	800b7c0 <_puts_r+0xc4>
 800b74e:	4622      	mov	r2, r4
 800b750:	210a      	movs	r1, #10
 800b752:	4628      	mov	r0, r5
 800b754:	f000 f87c 	bl	800b850 <__swbuf_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	d011      	beq.n	800b780 <_puts_r+0x84>
 800b75c:	250a      	movs	r5, #10
 800b75e:	e011      	b.n	800b784 <_puts_r+0x88>
 800b760:	4b1b      	ldr	r3, [pc, #108]	; (800b7d0 <_puts_r+0xd4>)
 800b762:	429c      	cmp	r4, r3
 800b764:	d101      	bne.n	800b76a <_puts_r+0x6e>
 800b766:	68ac      	ldr	r4, [r5, #8]
 800b768:	e7da      	b.n	800b720 <_puts_r+0x24>
 800b76a:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <_puts_r+0xd8>)
 800b76c:	429c      	cmp	r4, r3
 800b76e:	bf08      	it	eq
 800b770:	68ec      	ldreq	r4, [r5, #12]
 800b772:	e7d5      	b.n	800b720 <_puts_r+0x24>
 800b774:	4621      	mov	r1, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f000 f8bc 	bl	800b8f4 <__swsetup_r>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0dd      	beq.n	800b73c <_puts_r+0x40>
 800b780:	f04f 35ff 	mov.w	r5, #4294967295
 800b784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b786:	07da      	lsls	r2, r3, #31
 800b788:	d405      	bmi.n	800b796 <_puts_r+0x9a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	059b      	lsls	r3, r3, #22
 800b78e:	d402      	bmi.n	800b796 <_puts_r+0x9a>
 800b790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b792:	f001 f955 	bl	800ca40 <__retarget_lock_release_recursive>
 800b796:	4628      	mov	r0, r5
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	da04      	bge.n	800b7a8 <_puts_r+0xac>
 800b79e:	69a2      	ldr	r2, [r4, #24]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	dc06      	bgt.n	800b7b2 <_puts_r+0xb6>
 800b7a4:	290a      	cmp	r1, #10
 800b7a6:	d004      	beq.n	800b7b2 <_puts_r+0xb6>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	7019      	strb	r1, [r3, #0]
 800b7b0:	e7c5      	b.n	800b73e <_puts_r+0x42>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f84b 	bl	800b850 <__swbuf_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d1bf      	bne.n	800b73e <_puts_r+0x42>
 800b7be:	e7df      	b.n	800b780 <_puts_r+0x84>
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	250a      	movs	r5, #10
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	6022      	str	r2, [r4, #0]
 800b7c8:	701d      	strb	r5, [r3, #0]
 800b7ca:	e7db      	b.n	800b784 <_puts_r+0x88>
 800b7cc:	0800e80c 	.word	0x0800e80c
 800b7d0:	0800e82c 	.word	0x0800e82c
 800b7d4:	0800e7ec 	.word	0x0800e7ec

0800b7d8 <puts>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <puts+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f7ff bf8d 	b.w	800b6fc <_puts_r>
 800b7e2:	bf00      	nop
 800b7e4:	2000000c 	.word	0x2000000c

0800b7e8 <sniprintf>:
 800b7e8:	b40c      	push	{r2, r3}
 800b7ea:	b530      	push	{r4, r5, lr}
 800b7ec:	4b17      	ldr	r3, [pc, #92]	; (800b84c <sniprintf+0x64>)
 800b7ee:	1e0c      	subs	r4, r1, #0
 800b7f0:	681d      	ldr	r5, [r3, #0]
 800b7f2:	b09d      	sub	sp, #116	; 0x74
 800b7f4:	da08      	bge.n	800b808 <sniprintf+0x20>
 800b7f6:	238b      	movs	r3, #139	; 0x8b
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	b01d      	add	sp, #116	; 0x74
 800b800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b804:	b002      	add	sp, #8
 800b806:	4770      	bx	lr
 800b808:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b80c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b810:	bf14      	ite	ne
 800b812:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b816:	4623      	moveq	r3, r4
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b820:	9002      	str	r0, [sp, #8]
 800b822:	9006      	str	r0, [sp, #24]
 800b824:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b828:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b82a:	ab21      	add	r3, sp, #132	; 0x84
 800b82c:	a902      	add	r1, sp, #8
 800b82e:	4628      	mov	r0, r5
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	f001 fe57 	bl	800d4e4 <_svfiprintf_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	bfbc      	itt	lt
 800b83a:	238b      	movlt	r3, #139	; 0x8b
 800b83c:	602b      	strlt	r3, [r5, #0]
 800b83e:	2c00      	cmp	r4, #0
 800b840:	d0dd      	beq.n	800b7fe <sniprintf+0x16>
 800b842:	9b02      	ldr	r3, [sp, #8]
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
 800b848:	e7d9      	b.n	800b7fe <sniprintf+0x16>
 800b84a:	bf00      	nop
 800b84c:	2000000c 	.word	0x2000000c

0800b850 <__swbuf_r>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	460e      	mov	r6, r1
 800b854:	4614      	mov	r4, r2
 800b856:	4605      	mov	r5, r0
 800b858:	b118      	cbz	r0, 800b862 <__swbuf_r+0x12>
 800b85a:	6983      	ldr	r3, [r0, #24]
 800b85c:	b90b      	cbnz	r3, 800b862 <__swbuf_r+0x12>
 800b85e:	f001 f84b 	bl	800c8f8 <__sinit>
 800b862:	4b21      	ldr	r3, [pc, #132]	; (800b8e8 <__swbuf_r+0x98>)
 800b864:	429c      	cmp	r4, r3
 800b866:	d12b      	bne.n	800b8c0 <__swbuf_r+0x70>
 800b868:	686c      	ldr	r4, [r5, #4]
 800b86a:	69a3      	ldr	r3, [r4, #24]
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	071a      	lsls	r2, r3, #28
 800b872:	d52f      	bpl.n	800b8d4 <__swbuf_r+0x84>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	b36b      	cbz	r3, 800b8d4 <__swbuf_r+0x84>
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	6963      	ldr	r3, [r4, #20]
 800b880:	b2f6      	uxtb	r6, r6
 800b882:	4283      	cmp	r3, r0
 800b884:	4637      	mov	r7, r6
 800b886:	dc04      	bgt.n	800b892 <__swbuf_r+0x42>
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 ffa0 	bl	800c7d0 <_fflush_r>
 800b890:	bb30      	cbnz	r0, 800b8e0 <__swbuf_r+0x90>
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	3b01      	subs	r3, #1
 800b896:	60a3      	str	r3, [r4, #8]
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	701e      	strb	r6, [r3, #0]
 800b8a0:	6963      	ldr	r3, [r4, #20]
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	4283      	cmp	r3, r0
 800b8a6:	d004      	beq.n	800b8b2 <__swbuf_r+0x62>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	07db      	lsls	r3, r3, #31
 800b8ac:	d506      	bpl.n	800b8bc <__swbuf_r+0x6c>
 800b8ae:	2e0a      	cmp	r6, #10
 800b8b0:	d104      	bne.n	800b8bc <__swbuf_r+0x6c>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 ff8b 	bl	800c7d0 <_fflush_r>
 800b8ba:	b988      	cbnz	r0, 800b8e0 <__swbuf_r+0x90>
 800b8bc:	4638      	mov	r0, r7
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <__swbuf_r+0x9c>)
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	d101      	bne.n	800b8ca <__swbuf_r+0x7a>
 800b8c6:	68ac      	ldr	r4, [r5, #8]
 800b8c8:	e7cf      	b.n	800b86a <__swbuf_r+0x1a>
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <__swbuf_r+0xa0>)
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	bf08      	it	eq
 800b8d0:	68ec      	ldreq	r4, [r5, #12]
 800b8d2:	e7ca      	b.n	800b86a <__swbuf_r+0x1a>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 f80c 	bl	800b8f4 <__swsetup_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d0cb      	beq.n	800b878 <__swbuf_r+0x28>
 800b8e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e4:	e7ea      	b.n	800b8bc <__swbuf_r+0x6c>
 800b8e6:	bf00      	nop
 800b8e8:	0800e80c 	.word	0x0800e80c
 800b8ec:	0800e82c 	.word	0x0800e82c
 800b8f0:	0800e7ec 	.word	0x0800e7ec

0800b8f4 <__swsetup_r>:
 800b8f4:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <__swsetup_r+0xcc>)
 800b8f6:	b570      	push	{r4, r5, r6, lr}
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	b125      	cbz	r5, 800b90a <__swsetup_r+0x16>
 800b900:	69ab      	ldr	r3, [r5, #24]
 800b902:	b913      	cbnz	r3, 800b90a <__swsetup_r+0x16>
 800b904:	4628      	mov	r0, r5
 800b906:	f000 fff7 	bl	800c8f8 <__sinit>
 800b90a:	4b2e      	ldr	r3, [pc, #184]	; (800b9c4 <__swsetup_r+0xd0>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d10f      	bne.n	800b930 <__swsetup_r+0x3c>
 800b910:	686c      	ldr	r4, [r5, #4]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b918:	0719      	lsls	r1, r3, #28
 800b91a:	d42c      	bmi.n	800b976 <__swsetup_r+0x82>
 800b91c:	06dd      	lsls	r5, r3, #27
 800b91e:	d411      	bmi.n	800b944 <__swsetup_r+0x50>
 800b920:	2309      	movs	r3, #9
 800b922:	6033      	str	r3, [r6, #0]
 800b924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	e03e      	b.n	800b9ae <__swsetup_r+0xba>
 800b930:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <__swsetup_r+0xd4>)
 800b932:	429c      	cmp	r4, r3
 800b934:	d101      	bne.n	800b93a <__swsetup_r+0x46>
 800b936:	68ac      	ldr	r4, [r5, #8]
 800b938:	e7eb      	b.n	800b912 <__swsetup_r+0x1e>
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <__swsetup_r+0xd8>)
 800b93c:	429c      	cmp	r4, r3
 800b93e:	bf08      	it	eq
 800b940:	68ec      	ldreq	r4, [r5, #12]
 800b942:	e7e6      	b.n	800b912 <__swsetup_r+0x1e>
 800b944:	0758      	lsls	r0, r3, #29
 800b946:	d512      	bpl.n	800b96e <__swsetup_r+0x7a>
 800b948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b94a:	b141      	cbz	r1, 800b95e <__swsetup_r+0x6a>
 800b94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__swsetup_r+0x66>
 800b954:	4630      	mov	r0, r6
 800b956:	f001 fc89 	bl	800d26c <_free_r>
 800b95a:	2300      	movs	r3, #0
 800b95c:	6363      	str	r3, [r4, #52]	; 0x34
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b964:	81a3      	strh	r3, [r4, #12]
 800b966:	2300      	movs	r3, #0
 800b968:	6063      	str	r3, [r4, #4]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	f043 0308 	orr.w	r3, r3, #8
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	b94b      	cbnz	r3, 800b98e <__swsetup_r+0x9a>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b984:	d003      	beq.n	800b98e <__swsetup_r+0x9a>
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f001 f87f 	bl	800ca8c <__smakebuf_r>
 800b98e:	89a0      	ldrh	r0, [r4, #12]
 800b990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b994:	f010 0301 	ands.w	r3, r0, #1
 800b998:	d00a      	beq.n	800b9b0 <__swsetup_r+0xbc>
 800b99a:	2300      	movs	r3, #0
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6963      	ldr	r3, [r4, #20]
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	61a3      	str	r3, [r4, #24]
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	b943      	cbnz	r3, 800b9ba <__swsetup_r+0xc6>
 800b9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9ac:	d1ba      	bne.n	800b924 <__swsetup_r+0x30>
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	0781      	lsls	r1, r0, #30
 800b9b2:	bf58      	it	pl
 800b9b4:	6963      	ldrpl	r3, [r4, #20]
 800b9b6:	60a3      	str	r3, [r4, #8]
 800b9b8:	e7f4      	b.n	800b9a4 <__swsetup_r+0xb0>
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	e7f7      	b.n	800b9ae <__swsetup_r+0xba>
 800b9be:	bf00      	nop
 800b9c0:	2000000c 	.word	0x2000000c
 800b9c4:	0800e80c 	.word	0x0800e80c
 800b9c8:	0800e82c 	.word	0x0800e82c
 800b9cc:	0800e7ec 	.word	0x0800e7ec

0800b9d0 <quorem>:
 800b9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	6903      	ldr	r3, [r0, #16]
 800b9d6:	690c      	ldr	r4, [r1, #16]
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	4607      	mov	r7, r0
 800b9dc:	f2c0 8081 	blt.w	800bae2 <quorem+0x112>
 800b9e0:	3c01      	subs	r4, #1
 800b9e2:	f101 0814 	add.w	r8, r1, #20
 800b9e6:	f100 0514 	add.w	r5, r0, #20
 800b9ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba04:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba08:	d331      	bcc.n	800ba6e <quorem+0x9e>
 800ba0a:	f04f 0e00 	mov.w	lr, #0
 800ba0e:	4640      	mov	r0, r8
 800ba10:	46ac      	mov	ip, r5
 800ba12:	46f2      	mov	sl, lr
 800ba14:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba18:	b293      	uxth	r3, r2
 800ba1a:	fb06 e303 	mla	r3, r6, r3, lr
 800ba1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	ebaa 0303 	sub.w	r3, sl, r3
 800ba28:	f8dc a000 	ldr.w	sl, [ip]
 800ba2c:	0c12      	lsrs	r2, r2, #16
 800ba2e:	fa13 f38a 	uxtah	r3, r3, sl
 800ba32:	fb06 e202 	mla	r2, r6, r2, lr
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	9b00      	ldr	r3, [sp, #0]
 800ba3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba3e:	b292      	uxth	r2, r2
 800ba40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba48:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba4c:	4581      	cmp	r9, r0
 800ba4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba52:	f84c 3b04 	str.w	r3, [ip], #4
 800ba56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba5a:	d2db      	bcs.n	800ba14 <quorem+0x44>
 800ba5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba60:	b92b      	cbnz	r3, 800ba6e <quorem+0x9e>
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	3b04      	subs	r3, #4
 800ba66:	429d      	cmp	r5, r3
 800ba68:	461a      	mov	r2, r3
 800ba6a:	d32e      	bcc.n	800baca <quorem+0xfa>
 800ba6c:	613c      	str	r4, [r7, #16]
 800ba6e:	4638      	mov	r0, r7
 800ba70:	f001 fae4 	bl	800d03c <__mcmp>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	db24      	blt.n	800bac2 <quorem+0xf2>
 800ba78:	3601      	adds	r6, #1
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f04f 0c00 	mov.w	ip, #0
 800ba80:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba84:	f8d0 e000 	ldr.w	lr, [r0]
 800ba88:	b293      	uxth	r3, r2
 800ba8a:	ebac 0303 	sub.w	r3, ip, r3
 800ba8e:	0c12      	lsrs	r2, r2, #16
 800ba90:	fa13 f38e 	uxtah	r3, r3, lr
 800ba94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baa2:	45c1      	cmp	r9, r8
 800baa4:	f840 3b04 	str.w	r3, [r0], #4
 800baa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800baac:	d2e8      	bcs.n	800ba80 <quorem+0xb0>
 800baae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bab6:	b922      	cbnz	r2, 800bac2 <quorem+0xf2>
 800bab8:	3b04      	subs	r3, #4
 800baba:	429d      	cmp	r5, r3
 800babc:	461a      	mov	r2, r3
 800babe:	d30a      	bcc.n	800bad6 <quorem+0x106>
 800bac0:	613c      	str	r4, [r7, #16]
 800bac2:	4630      	mov	r0, r6
 800bac4:	b003      	add	sp, #12
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	6812      	ldr	r2, [r2, #0]
 800bacc:	3b04      	subs	r3, #4
 800bace:	2a00      	cmp	r2, #0
 800bad0:	d1cc      	bne.n	800ba6c <quorem+0x9c>
 800bad2:	3c01      	subs	r4, #1
 800bad4:	e7c7      	b.n	800ba66 <quorem+0x96>
 800bad6:	6812      	ldr	r2, [r2, #0]
 800bad8:	3b04      	subs	r3, #4
 800bada:	2a00      	cmp	r2, #0
 800badc:	d1f0      	bne.n	800bac0 <quorem+0xf0>
 800bade:	3c01      	subs	r4, #1
 800bae0:	e7eb      	b.n	800baba <quorem+0xea>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e7ee      	b.n	800bac4 <quorem+0xf4>
	...

0800bae8 <_dtoa_r>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	ed2d 8b04 	vpush	{d8-d9}
 800baf0:	ec57 6b10 	vmov	r6, r7, d0
 800baf4:	b093      	sub	sp, #76	; 0x4c
 800baf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800baf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bafc:	9106      	str	r1, [sp, #24]
 800bafe:	ee10 aa10 	vmov	sl, s0
 800bb02:	4604      	mov	r4, r0
 800bb04:	9209      	str	r2, [sp, #36]	; 0x24
 800bb06:	930c      	str	r3, [sp, #48]	; 0x30
 800bb08:	46bb      	mov	fp, r7
 800bb0a:	b975      	cbnz	r5, 800bb2a <_dtoa_r+0x42>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f000 fffd 	bl	800cb0c <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6260      	str	r0, [r4, #36]	; 0x24
 800bb16:	b920      	cbnz	r0, 800bb22 <_dtoa_r+0x3a>
 800bb18:	4ba7      	ldr	r3, [pc, #668]	; (800bdb8 <_dtoa_r+0x2d0>)
 800bb1a:	21ea      	movs	r1, #234	; 0xea
 800bb1c:	48a7      	ldr	r0, [pc, #668]	; (800bdbc <_dtoa_r+0x2d4>)
 800bb1e:	f001 ffa1 	bl	800da64 <__assert_func>
 800bb22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb26:	6005      	str	r5, [r0, #0]
 800bb28:	60c5      	str	r5, [r0, #12]
 800bb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb2c:	6819      	ldr	r1, [r3, #0]
 800bb2e:	b151      	cbz	r1, 800bb46 <_dtoa_r+0x5e>
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	604a      	str	r2, [r1, #4]
 800bb34:	2301      	movs	r3, #1
 800bb36:	4093      	lsls	r3, r2
 800bb38:	608b      	str	r3, [r1, #8]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f001 f83c 	bl	800cbb8 <_Bfree>
 800bb40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	1e3b      	subs	r3, r7, #0
 800bb48:	bfaa      	itet	ge
 800bb4a:	2300      	movge	r3, #0
 800bb4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bb50:	f8c8 3000 	strge.w	r3, [r8]
 800bb54:	4b9a      	ldr	r3, [pc, #616]	; (800bdc0 <_dtoa_r+0x2d8>)
 800bb56:	bfbc      	itt	lt
 800bb58:	2201      	movlt	r2, #1
 800bb5a:	f8c8 2000 	strlt.w	r2, [r8]
 800bb5e:	ea33 030b 	bics.w	r3, r3, fp
 800bb62:	d11b      	bne.n	800bb9c <_dtoa_r+0xb4>
 800bb64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb66:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb70:	4333      	orrs	r3, r6
 800bb72:	f000 8592 	beq.w	800c69a <_dtoa_r+0xbb2>
 800bb76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb78:	b963      	cbnz	r3, 800bb94 <_dtoa_r+0xac>
 800bb7a:	4b92      	ldr	r3, [pc, #584]	; (800bdc4 <_dtoa_r+0x2dc>)
 800bb7c:	e022      	b.n	800bbc4 <_dtoa_r+0xdc>
 800bb7e:	4b92      	ldr	r3, [pc, #584]	; (800bdc8 <_dtoa_r+0x2e0>)
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	3308      	adds	r3, #8
 800bb84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	9801      	ldr	r0, [sp, #4]
 800bb8a:	b013      	add	sp, #76	; 0x4c
 800bb8c:	ecbd 8b04 	vpop	{d8-d9}
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	4b8b      	ldr	r3, [pc, #556]	; (800bdc4 <_dtoa_r+0x2dc>)
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	3303      	adds	r3, #3
 800bb9a:	e7f3      	b.n	800bb84 <_dtoa_r+0x9c>
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2300      	movs	r3, #0
 800bba0:	4650      	mov	r0, sl
 800bba2:	4659      	mov	r1, fp
 800bba4:	f7f4 ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 800bba8:	ec4b ab19 	vmov	d9, sl, fp
 800bbac:	4680      	mov	r8, r0
 800bbae:	b158      	cbz	r0, 800bbc8 <_dtoa_r+0xe0>
 800bbb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 856b 	beq.w	800c694 <_dtoa_r+0xbac>
 800bbbe:	4883      	ldr	r0, [pc, #524]	; (800bdcc <_dtoa_r+0x2e4>)
 800bbc0:	6018      	str	r0, [r3, #0]
 800bbc2:	1e43      	subs	r3, r0, #1
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	e7df      	b.n	800bb88 <_dtoa_r+0xa0>
 800bbc8:	ec4b ab10 	vmov	d0, sl, fp
 800bbcc:	aa10      	add	r2, sp, #64	; 0x40
 800bbce:	a911      	add	r1, sp, #68	; 0x44
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f001 fad9 	bl	800d188 <__d2b>
 800bbd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bbda:	ee08 0a10 	vmov	s16, r0
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	f000 8084 	beq.w	800bcec <_dtoa_r+0x204>
 800bbe4:	ee19 3a90 	vmov	r3, s19
 800bbe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bbf0:	4656      	mov	r6, sl
 800bbf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bbf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bbfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bbfe:	4b74      	ldr	r3, [pc, #464]	; (800bdd0 <_dtoa_r+0x2e8>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fb5f 	bl	80002c8 <__aeabi_dsub>
 800bc0a:	a365      	add	r3, pc, #404	; (adr r3, 800bda0 <_dtoa_r+0x2b8>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fd12 	bl	8000638 <__aeabi_dmul>
 800bc14:	a364      	add	r3, pc, #400	; (adr r3, 800bda8 <_dtoa_r+0x2c0>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f7f4 fb57 	bl	80002cc <__adddf3>
 800bc1e:	4606      	mov	r6, r0
 800bc20:	4628      	mov	r0, r5
 800bc22:	460f      	mov	r7, r1
 800bc24:	f7f4 fc9e 	bl	8000564 <__aeabi_i2d>
 800bc28:	a361      	add	r3, pc, #388	; (adr r3, 800bdb0 <_dtoa_r+0x2c8>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f7f4 fd03 	bl	8000638 <__aeabi_dmul>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	4630      	mov	r0, r6
 800bc38:	4639      	mov	r1, r7
 800bc3a:	f7f4 fb47 	bl	80002cc <__adddf3>
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	f7f4 ffa9 	bl	8000b98 <__aeabi_d2iz>
 800bc46:	2200      	movs	r2, #0
 800bc48:	9000      	str	r0, [sp, #0]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	4639      	mov	r1, r7
 800bc50:	f7f4 ff64 	bl	8000b1c <__aeabi_dcmplt>
 800bc54:	b150      	cbz	r0, 800bc6c <_dtoa_r+0x184>
 800bc56:	9800      	ldr	r0, [sp, #0]
 800bc58:	f7f4 fc84 	bl	8000564 <__aeabi_i2d>
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	f7f4 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 800bc64:	b910      	cbnz	r0, 800bc6c <_dtoa_r+0x184>
 800bc66:	9b00      	ldr	r3, [sp, #0]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	9b00      	ldr	r3, [sp, #0]
 800bc6e:	2b16      	cmp	r3, #22
 800bc70:	d85a      	bhi.n	800bd28 <_dtoa_r+0x240>
 800bc72:	9a00      	ldr	r2, [sp, #0]
 800bc74:	4b57      	ldr	r3, [pc, #348]	; (800bdd4 <_dtoa_r+0x2ec>)
 800bc76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	ec51 0b19 	vmov	r0, r1, d9
 800bc82:	f7f4 ff4b 	bl	8000b1c <__aeabi_dcmplt>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d050      	beq.n	800bd2c <_dtoa_r+0x244>
 800bc8a:	9b00      	ldr	r3, [sp, #0]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	2300      	movs	r3, #0
 800bc92:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc96:	1b5d      	subs	r5, r3, r5
 800bc98:	1e6b      	subs	r3, r5, #1
 800bc9a:	9305      	str	r3, [sp, #20]
 800bc9c:	bf45      	ittet	mi
 800bc9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bca2:	9304      	strmi	r3, [sp, #16]
 800bca4:	2300      	movpl	r3, #0
 800bca6:	2300      	movmi	r3, #0
 800bca8:	bf4c      	ite	mi
 800bcaa:	9305      	strmi	r3, [sp, #20]
 800bcac:	9304      	strpl	r3, [sp, #16]
 800bcae:	9b00      	ldr	r3, [sp, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	db3d      	blt.n	800bd30 <_dtoa_r+0x248>
 800bcb4:	9b05      	ldr	r3, [sp, #20]
 800bcb6:	9a00      	ldr	r2, [sp, #0]
 800bcb8:	920a      	str	r2, [sp, #40]	; 0x28
 800bcba:	4413      	add	r3, r2
 800bcbc:	9305      	str	r3, [sp, #20]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9307      	str	r3, [sp, #28]
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	2b09      	cmp	r3, #9
 800bcc6:	f200 8089 	bhi.w	800bddc <_dtoa_r+0x2f4>
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	bfc4      	itt	gt
 800bcce:	3b04      	subgt	r3, #4
 800bcd0:	9306      	strgt	r3, [sp, #24]
 800bcd2:	9b06      	ldr	r3, [sp, #24]
 800bcd4:	f1a3 0302 	sub.w	r3, r3, #2
 800bcd8:	bfcc      	ite	gt
 800bcda:	2500      	movgt	r5, #0
 800bcdc:	2501      	movle	r5, #1
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	f200 8087 	bhi.w	800bdf2 <_dtoa_r+0x30a>
 800bce4:	e8df f003 	tbb	[pc, r3]
 800bce8:	59383a2d 	.word	0x59383a2d
 800bcec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bcf0:	441d      	add	r5, r3
 800bcf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	bfc1      	itttt	gt
 800bcfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bd02:	fa0b f303 	lslgt.w	r3, fp, r3
 800bd06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bd0a:	bfda      	itte	le
 800bd0c:	f1c3 0320 	rsble	r3, r3, #32
 800bd10:	fa06 f003 	lslle.w	r0, r6, r3
 800bd14:	4318      	orrgt	r0, r3
 800bd16:	f7f4 fc15 	bl	8000544 <__aeabi_ui2d>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bd22:	3d01      	subs	r5, #1
 800bd24:	930e      	str	r3, [sp, #56]	; 0x38
 800bd26:	e76a      	b.n	800bbfe <_dtoa_r+0x116>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e7b2      	b.n	800bc92 <_dtoa_r+0x1aa>
 800bd2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd2e:	e7b1      	b.n	800bc94 <_dtoa_r+0x1ac>
 800bd30:	9b04      	ldr	r3, [sp, #16]
 800bd32:	9a00      	ldr	r2, [sp, #0]
 800bd34:	1a9b      	subs	r3, r3, r2
 800bd36:	9304      	str	r3, [sp, #16]
 800bd38:	4253      	negs	r3, r2
 800bd3a:	9307      	str	r3, [sp, #28]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd40:	e7bf      	b.n	800bcc2 <_dtoa_r+0x1da>
 800bd42:	2300      	movs	r3, #0
 800bd44:	9308      	str	r3, [sp, #32]
 800bd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dc55      	bgt.n	800bdf8 <_dtoa_r+0x310>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd52:	461a      	mov	r2, r3
 800bd54:	9209      	str	r2, [sp, #36]	; 0x24
 800bd56:	e00c      	b.n	800bd72 <_dtoa_r+0x28a>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f3      	b.n	800bd44 <_dtoa_r+0x25c>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd60:	9308      	str	r3, [sp, #32]
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	4413      	add	r3, r2
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	9303      	str	r3, [sp, #12]
 800bd6e:	bfb8      	it	lt
 800bd70:	2301      	movlt	r3, #1
 800bd72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd74:	2200      	movs	r2, #0
 800bd76:	6042      	str	r2, [r0, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	f102 0614 	add.w	r6, r2, #20
 800bd7e:	429e      	cmp	r6, r3
 800bd80:	6841      	ldr	r1, [r0, #4]
 800bd82:	d93d      	bls.n	800be00 <_dtoa_r+0x318>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fed7 	bl	800cb38 <_Balloc>
 800bd8a:	9001      	str	r0, [sp, #4]
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d13b      	bne.n	800be08 <_dtoa_r+0x320>
 800bd90:	4b11      	ldr	r3, [pc, #68]	; (800bdd8 <_dtoa_r+0x2f0>)
 800bd92:	4602      	mov	r2, r0
 800bd94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd98:	e6c0      	b.n	800bb1c <_dtoa_r+0x34>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e7df      	b.n	800bd5e <_dtoa_r+0x276>
 800bd9e:	bf00      	nop
 800bda0:	636f4361 	.word	0x636f4361
 800bda4:	3fd287a7 	.word	0x3fd287a7
 800bda8:	8b60c8b3 	.word	0x8b60c8b3
 800bdac:	3fc68a28 	.word	0x3fc68a28
 800bdb0:	509f79fb 	.word	0x509f79fb
 800bdb4:	3fd34413 	.word	0x3fd34413
 800bdb8:	0800e769 	.word	0x0800e769
 800bdbc:	0800e780 	.word	0x0800e780
 800bdc0:	7ff00000 	.word	0x7ff00000
 800bdc4:	0800e765 	.word	0x0800e765
 800bdc8:	0800e75c 	.word	0x0800e75c
 800bdcc:	0800e739 	.word	0x0800e739
 800bdd0:	3ff80000 	.word	0x3ff80000
 800bdd4:	0800e8d0 	.word	0x0800e8d0
 800bdd8:	0800e7db 	.word	0x0800e7db
 800bddc:	2501      	movs	r5, #1
 800bdde:	2300      	movs	r3, #0
 800bde0:	9306      	str	r3, [sp, #24]
 800bde2:	9508      	str	r5, [sp, #32]
 800bde4:	f04f 33ff 	mov.w	r3, #4294967295
 800bde8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdec:	2200      	movs	r2, #0
 800bdee:	2312      	movs	r3, #18
 800bdf0:	e7b0      	b.n	800bd54 <_dtoa_r+0x26c>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	9308      	str	r3, [sp, #32]
 800bdf6:	e7f5      	b.n	800bde4 <_dtoa_r+0x2fc>
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdfe:	e7b8      	b.n	800bd72 <_dtoa_r+0x28a>
 800be00:	3101      	adds	r1, #1
 800be02:	6041      	str	r1, [r0, #4]
 800be04:	0052      	lsls	r2, r2, #1
 800be06:	e7b8      	b.n	800bd7a <_dtoa_r+0x292>
 800be08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be0a:	9a01      	ldr	r2, [sp, #4]
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	2b0e      	cmp	r3, #14
 800be12:	f200 809d 	bhi.w	800bf50 <_dtoa_r+0x468>
 800be16:	2d00      	cmp	r5, #0
 800be18:	f000 809a 	beq.w	800bf50 <_dtoa_r+0x468>
 800be1c:	9b00      	ldr	r3, [sp, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dd32      	ble.n	800be88 <_dtoa_r+0x3a0>
 800be22:	4ab7      	ldr	r2, [pc, #732]	; (800c100 <_dtoa_r+0x618>)
 800be24:	f003 030f 	and.w	r3, r3, #15
 800be28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be30:	9b00      	ldr	r3, [sp, #0]
 800be32:	05d8      	lsls	r0, r3, #23
 800be34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800be38:	d516      	bpl.n	800be68 <_dtoa_r+0x380>
 800be3a:	4bb2      	ldr	r3, [pc, #712]	; (800c104 <_dtoa_r+0x61c>)
 800be3c:	ec51 0b19 	vmov	r0, r1, d9
 800be40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be44:	f7f4 fd22 	bl	800088c <__aeabi_ddiv>
 800be48:	f007 070f 	and.w	r7, r7, #15
 800be4c:	4682      	mov	sl, r0
 800be4e:	468b      	mov	fp, r1
 800be50:	2503      	movs	r5, #3
 800be52:	4eac      	ldr	r6, [pc, #688]	; (800c104 <_dtoa_r+0x61c>)
 800be54:	b957      	cbnz	r7, 800be6c <_dtoa_r+0x384>
 800be56:	4642      	mov	r2, r8
 800be58:	464b      	mov	r3, r9
 800be5a:	4650      	mov	r0, sl
 800be5c:	4659      	mov	r1, fp
 800be5e:	f7f4 fd15 	bl	800088c <__aeabi_ddiv>
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	e028      	b.n	800beba <_dtoa_r+0x3d2>
 800be68:	2502      	movs	r5, #2
 800be6a:	e7f2      	b.n	800be52 <_dtoa_r+0x36a>
 800be6c:	07f9      	lsls	r1, r7, #31
 800be6e:	d508      	bpl.n	800be82 <_dtoa_r+0x39a>
 800be70:	4640      	mov	r0, r8
 800be72:	4649      	mov	r1, r9
 800be74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be78:	f7f4 fbde 	bl	8000638 <__aeabi_dmul>
 800be7c:	3501      	adds	r5, #1
 800be7e:	4680      	mov	r8, r0
 800be80:	4689      	mov	r9, r1
 800be82:	107f      	asrs	r7, r7, #1
 800be84:	3608      	adds	r6, #8
 800be86:	e7e5      	b.n	800be54 <_dtoa_r+0x36c>
 800be88:	f000 809b 	beq.w	800bfc2 <_dtoa_r+0x4da>
 800be8c:	9b00      	ldr	r3, [sp, #0]
 800be8e:	4f9d      	ldr	r7, [pc, #628]	; (800c104 <_dtoa_r+0x61c>)
 800be90:	425e      	negs	r6, r3
 800be92:	4b9b      	ldr	r3, [pc, #620]	; (800c100 <_dtoa_r+0x618>)
 800be94:	f006 020f 	and.w	r2, r6, #15
 800be98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	ec51 0b19 	vmov	r0, r1, d9
 800bea4:	f7f4 fbc8 	bl	8000638 <__aeabi_dmul>
 800bea8:	1136      	asrs	r6, r6, #4
 800beaa:	4682      	mov	sl, r0
 800beac:	468b      	mov	fp, r1
 800beae:	2300      	movs	r3, #0
 800beb0:	2502      	movs	r5, #2
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d17a      	bne.n	800bfac <_dtoa_r+0x4c4>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1d3      	bne.n	800be62 <_dtoa_r+0x37a>
 800beba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8082 	beq.w	800bfc6 <_dtoa_r+0x4de>
 800bec2:	4b91      	ldr	r3, [pc, #580]	; (800c108 <_dtoa_r+0x620>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	4650      	mov	r0, sl
 800bec8:	4659      	mov	r1, fp
 800beca:	f7f4 fe27 	bl	8000b1c <__aeabi_dcmplt>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d079      	beq.n	800bfc6 <_dtoa_r+0x4de>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d076      	beq.n	800bfc6 <_dtoa_r+0x4de>
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dd36      	ble.n	800bf4c <_dtoa_r+0x464>
 800bede:	9b00      	ldr	r3, [sp, #0]
 800bee0:	4650      	mov	r0, sl
 800bee2:	4659      	mov	r1, fp
 800bee4:	1e5f      	subs	r7, r3, #1
 800bee6:	2200      	movs	r2, #0
 800bee8:	4b88      	ldr	r3, [pc, #544]	; (800c10c <_dtoa_r+0x624>)
 800beea:	f7f4 fba5 	bl	8000638 <__aeabi_dmul>
 800beee:	9e02      	ldr	r6, [sp, #8]
 800bef0:	4682      	mov	sl, r0
 800bef2:	468b      	mov	fp, r1
 800bef4:	3501      	adds	r5, #1
 800bef6:	4628      	mov	r0, r5
 800bef8:	f7f4 fb34 	bl	8000564 <__aeabi_i2d>
 800befc:	4652      	mov	r2, sl
 800befe:	465b      	mov	r3, fp
 800bf00:	f7f4 fb9a 	bl	8000638 <__aeabi_dmul>
 800bf04:	4b82      	ldr	r3, [pc, #520]	; (800c110 <_dtoa_r+0x628>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	f7f4 f9e0 	bl	80002cc <__adddf3>
 800bf0c:	46d0      	mov	r8, sl
 800bf0e:	46d9      	mov	r9, fp
 800bf10:	4682      	mov	sl, r0
 800bf12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bf16:	2e00      	cmp	r6, #0
 800bf18:	d158      	bne.n	800bfcc <_dtoa_r+0x4e4>
 800bf1a:	4b7e      	ldr	r3, [pc, #504]	; (800c114 <_dtoa_r+0x62c>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	4640      	mov	r0, r8
 800bf20:	4649      	mov	r1, r9
 800bf22:	f7f4 f9d1 	bl	80002c8 <__aeabi_dsub>
 800bf26:	4652      	mov	r2, sl
 800bf28:	465b      	mov	r3, fp
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	4689      	mov	r9, r1
 800bf2e:	f7f4 fe13 	bl	8000b58 <__aeabi_dcmpgt>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f040 8295 	bne.w	800c462 <_dtoa_r+0x97a>
 800bf38:	4652      	mov	r2, sl
 800bf3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf3e:	4640      	mov	r0, r8
 800bf40:	4649      	mov	r1, r9
 800bf42:	f7f4 fdeb 	bl	8000b1c <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f040 8289 	bne.w	800c45e <_dtoa_r+0x976>
 800bf4c:	ec5b ab19 	vmov	sl, fp, d9
 800bf50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f2c0 8148 	blt.w	800c1e8 <_dtoa_r+0x700>
 800bf58:	9a00      	ldr	r2, [sp, #0]
 800bf5a:	2a0e      	cmp	r2, #14
 800bf5c:	f300 8144 	bgt.w	800c1e8 <_dtoa_r+0x700>
 800bf60:	4b67      	ldr	r3, [pc, #412]	; (800c100 <_dtoa_r+0x618>)
 800bf62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f280 80d5 	bge.w	800c11c <_dtoa_r+0x634>
 800bf72:	9b03      	ldr	r3, [sp, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f300 80d1 	bgt.w	800c11c <_dtoa_r+0x634>
 800bf7a:	f040 826f 	bne.w	800c45c <_dtoa_r+0x974>
 800bf7e:	4b65      	ldr	r3, [pc, #404]	; (800c114 <_dtoa_r+0x62c>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 fb57 	bl	8000638 <__aeabi_dmul>
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	465b      	mov	r3, fp
 800bf8e:	f7f4 fdd9 	bl	8000b44 <__aeabi_dcmpge>
 800bf92:	9e03      	ldr	r6, [sp, #12]
 800bf94:	4637      	mov	r7, r6
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f040 8245 	bne.w	800c426 <_dtoa_r+0x93e>
 800bf9c:	9d01      	ldr	r5, [sp, #4]
 800bf9e:	2331      	movs	r3, #49	; 0x31
 800bfa0:	f805 3b01 	strb.w	r3, [r5], #1
 800bfa4:	9b00      	ldr	r3, [sp, #0]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	e240      	b.n	800c42e <_dtoa_r+0x946>
 800bfac:	07f2      	lsls	r2, r6, #31
 800bfae:	d505      	bpl.n	800bfbc <_dtoa_r+0x4d4>
 800bfb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb4:	f7f4 fb40 	bl	8000638 <__aeabi_dmul>
 800bfb8:	3501      	adds	r5, #1
 800bfba:	2301      	movs	r3, #1
 800bfbc:	1076      	asrs	r6, r6, #1
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	e777      	b.n	800beb2 <_dtoa_r+0x3ca>
 800bfc2:	2502      	movs	r5, #2
 800bfc4:	e779      	b.n	800beba <_dtoa_r+0x3d2>
 800bfc6:	9f00      	ldr	r7, [sp, #0]
 800bfc8:	9e03      	ldr	r6, [sp, #12]
 800bfca:	e794      	b.n	800bef6 <_dtoa_r+0x40e>
 800bfcc:	9901      	ldr	r1, [sp, #4]
 800bfce:	4b4c      	ldr	r3, [pc, #304]	; (800c100 <_dtoa_r+0x618>)
 800bfd0:	4431      	add	r1, r6
 800bfd2:	910d      	str	r1, [sp, #52]	; 0x34
 800bfd4:	9908      	ldr	r1, [sp, #32]
 800bfd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d043      	beq.n	800c06a <_dtoa_r+0x582>
 800bfe2:	494d      	ldr	r1, [pc, #308]	; (800c118 <_dtoa_r+0x630>)
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	f7f4 fc51 	bl	800088c <__aeabi_ddiv>
 800bfea:	4652      	mov	r2, sl
 800bfec:	465b      	mov	r3, fp
 800bfee:	f7f4 f96b 	bl	80002c8 <__aeabi_dsub>
 800bff2:	9d01      	ldr	r5, [sp, #4]
 800bff4:	4682      	mov	sl, r0
 800bff6:	468b      	mov	fp, r1
 800bff8:	4649      	mov	r1, r9
 800bffa:	4640      	mov	r0, r8
 800bffc:	f7f4 fdcc 	bl	8000b98 <__aeabi_d2iz>
 800c000:	4606      	mov	r6, r0
 800c002:	f7f4 faaf 	bl	8000564 <__aeabi_i2d>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4640      	mov	r0, r8
 800c00c:	4649      	mov	r1, r9
 800c00e:	f7f4 f95b 	bl	80002c8 <__aeabi_dsub>
 800c012:	3630      	adds	r6, #48	; 0x30
 800c014:	f805 6b01 	strb.w	r6, [r5], #1
 800c018:	4652      	mov	r2, sl
 800c01a:	465b      	mov	r3, fp
 800c01c:	4680      	mov	r8, r0
 800c01e:	4689      	mov	r9, r1
 800c020:	f7f4 fd7c 	bl	8000b1c <__aeabi_dcmplt>
 800c024:	2800      	cmp	r0, #0
 800c026:	d163      	bne.n	800c0f0 <_dtoa_r+0x608>
 800c028:	4642      	mov	r2, r8
 800c02a:	464b      	mov	r3, r9
 800c02c:	4936      	ldr	r1, [pc, #216]	; (800c108 <_dtoa_r+0x620>)
 800c02e:	2000      	movs	r0, #0
 800c030:	f7f4 f94a 	bl	80002c8 <__aeabi_dsub>
 800c034:	4652      	mov	r2, sl
 800c036:	465b      	mov	r3, fp
 800c038:	f7f4 fd70 	bl	8000b1c <__aeabi_dcmplt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	f040 80b5 	bne.w	800c1ac <_dtoa_r+0x6c4>
 800c042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c044:	429d      	cmp	r5, r3
 800c046:	d081      	beq.n	800bf4c <_dtoa_r+0x464>
 800c048:	4b30      	ldr	r3, [pc, #192]	; (800c10c <_dtoa_r+0x624>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	4650      	mov	r0, sl
 800c04e:	4659      	mov	r1, fp
 800c050:	f7f4 faf2 	bl	8000638 <__aeabi_dmul>
 800c054:	4b2d      	ldr	r3, [pc, #180]	; (800c10c <_dtoa_r+0x624>)
 800c056:	4682      	mov	sl, r0
 800c058:	468b      	mov	fp, r1
 800c05a:	4640      	mov	r0, r8
 800c05c:	4649      	mov	r1, r9
 800c05e:	2200      	movs	r2, #0
 800c060:	f7f4 faea 	bl	8000638 <__aeabi_dmul>
 800c064:	4680      	mov	r8, r0
 800c066:	4689      	mov	r9, r1
 800c068:	e7c6      	b.n	800bff8 <_dtoa_r+0x510>
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	f7f4 fae3 	bl	8000638 <__aeabi_dmul>
 800c072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c074:	9d01      	ldr	r5, [sp, #4]
 800c076:	930f      	str	r3, [sp, #60]	; 0x3c
 800c078:	4682      	mov	sl, r0
 800c07a:	468b      	mov	fp, r1
 800c07c:	4649      	mov	r1, r9
 800c07e:	4640      	mov	r0, r8
 800c080:	f7f4 fd8a 	bl	8000b98 <__aeabi_d2iz>
 800c084:	4606      	mov	r6, r0
 800c086:	f7f4 fa6d 	bl	8000564 <__aeabi_i2d>
 800c08a:	3630      	adds	r6, #48	; 0x30
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 f918 	bl	80002c8 <__aeabi_dsub>
 800c098:	f805 6b01 	strb.w	r6, [r5], #1
 800c09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4689      	mov	r9, r1
 800c0a4:	f04f 0200 	mov.w	r2, #0
 800c0a8:	d124      	bne.n	800c0f4 <_dtoa_r+0x60c>
 800c0aa:	4b1b      	ldr	r3, [pc, #108]	; (800c118 <_dtoa_r+0x630>)
 800c0ac:	4650      	mov	r0, sl
 800c0ae:	4659      	mov	r1, fp
 800c0b0:	f7f4 f90c 	bl	80002cc <__adddf3>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	f7f4 fd4c 	bl	8000b58 <__aeabi_dcmpgt>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d173      	bne.n	800c1ac <_dtoa_r+0x6c4>
 800c0c4:	4652      	mov	r2, sl
 800c0c6:	465b      	mov	r3, fp
 800c0c8:	4913      	ldr	r1, [pc, #76]	; (800c118 <_dtoa_r+0x630>)
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	f7f4 f8fc 	bl	80002c8 <__aeabi_dsub>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fd20 	bl	8000b1c <__aeabi_dcmplt>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f43f af35 	beq.w	800bf4c <_dtoa_r+0x464>
 800c0e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0e4:	1e6b      	subs	r3, r5, #1
 800c0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0ec:	2b30      	cmp	r3, #48	; 0x30
 800c0ee:	d0f8      	beq.n	800c0e2 <_dtoa_r+0x5fa>
 800c0f0:	9700      	str	r7, [sp, #0]
 800c0f2:	e049      	b.n	800c188 <_dtoa_r+0x6a0>
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <_dtoa_r+0x624>)
 800c0f6:	f7f4 fa9f 	bl	8000638 <__aeabi_dmul>
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	e7bd      	b.n	800c07c <_dtoa_r+0x594>
 800c100:	0800e8d0 	.word	0x0800e8d0
 800c104:	0800e8a8 	.word	0x0800e8a8
 800c108:	3ff00000 	.word	0x3ff00000
 800c10c:	40240000 	.word	0x40240000
 800c110:	401c0000 	.word	0x401c0000
 800c114:	40140000 	.word	0x40140000
 800c118:	3fe00000 	.word	0x3fe00000
 800c11c:	9d01      	ldr	r5, [sp, #4]
 800c11e:	4656      	mov	r6, sl
 800c120:	465f      	mov	r7, fp
 800c122:	4642      	mov	r2, r8
 800c124:	464b      	mov	r3, r9
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 fbaf 	bl	800088c <__aeabi_ddiv>
 800c12e:	f7f4 fd33 	bl	8000b98 <__aeabi_d2iz>
 800c132:	4682      	mov	sl, r0
 800c134:	f7f4 fa16 	bl	8000564 <__aeabi_i2d>
 800c138:	4642      	mov	r2, r8
 800c13a:	464b      	mov	r3, r9
 800c13c:	f7f4 fa7c 	bl	8000638 <__aeabi_dmul>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c14c:	f7f4 f8bc 	bl	80002c8 <__aeabi_dsub>
 800c150:	f805 6b01 	strb.w	r6, [r5], #1
 800c154:	9e01      	ldr	r6, [sp, #4]
 800c156:	9f03      	ldr	r7, [sp, #12]
 800c158:	1bae      	subs	r6, r5, r6
 800c15a:	42b7      	cmp	r7, r6
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	d135      	bne.n	800c1ce <_dtoa_r+0x6e6>
 800c162:	f7f4 f8b3 	bl	80002cc <__adddf3>
 800c166:	4642      	mov	r2, r8
 800c168:	464b      	mov	r3, r9
 800c16a:	4606      	mov	r6, r0
 800c16c:	460f      	mov	r7, r1
 800c16e:	f7f4 fcf3 	bl	8000b58 <__aeabi_dcmpgt>
 800c172:	b9d0      	cbnz	r0, 800c1aa <_dtoa_r+0x6c2>
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	4630      	mov	r0, r6
 800c17a:	4639      	mov	r1, r7
 800c17c:	f7f4 fcc4 	bl	8000b08 <__aeabi_dcmpeq>
 800c180:	b110      	cbz	r0, 800c188 <_dtoa_r+0x6a0>
 800c182:	f01a 0f01 	tst.w	sl, #1
 800c186:	d110      	bne.n	800c1aa <_dtoa_r+0x6c2>
 800c188:	4620      	mov	r0, r4
 800c18a:	ee18 1a10 	vmov	r1, s16
 800c18e:	f000 fd13 	bl	800cbb8 <_Bfree>
 800c192:	2300      	movs	r3, #0
 800c194:	9800      	ldr	r0, [sp, #0]
 800c196:	702b      	strb	r3, [r5, #0]
 800c198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c19a:	3001      	adds	r0, #1
 800c19c:	6018      	str	r0, [r3, #0]
 800c19e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f43f acf1 	beq.w	800bb88 <_dtoa_r+0xa0>
 800c1a6:	601d      	str	r5, [r3, #0]
 800c1a8:	e4ee      	b.n	800bb88 <_dtoa_r+0xa0>
 800c1aa:	9f00      	ldr	r7, [sp, #0]
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	461d      	mov	r5, r3
 800c1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1b4:	2a39      	cmp	r2, #57	; 0x39
 800c1b6:	d106      	bne.n	800c1c6 <_dtoa_r+0x6de>
 800c1b8:	9a01      	ldr	r2, [sp, #4]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d1f7      	bne.n	800c1ae <_dtoa_r+0x6c6>
 800c1be:	9901      	ldr	r1, [sp, #4]
 800c1c0:	2230      	movs	r2, #48	; 0x30
 800c1c2:	3701      	adds	r7, #1
 800c1c4:	700a      	strb	r2, [r1, #0]
 800c1c6:	781a      	ldrb	r2, [r3, #0]
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	701a      	strb	r2, [r3, #0]
 800c1cc:	e790      	b.n	800c0f0 <_dtoa_r+0x608>
 800c1ce:	4ba6      	ldr	r3, [pc, #664]	; (800c468 <_dtoa_r+0x980>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f7f4 fa31 	bl	8000638 <__aeabi_dmul>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460f      	mov	r7, r1
 800c1de:	f7f4 fc93 	bl	8000b08 <__aeabi_dcmpeq>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d09d      	beq.n	800c122 <_dtoa_r+0x63a>
 800c1e6:	e7cf      	b.n	800c188 <_dtoa_r+0x6a0>
 800c1e8:	9a08      	ldr	r2, [sp, #32]
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	f000 80d7 	beq.w	800c39e <_dtoa_r+0x8b6>
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	2a01      	cmp	r2, #1
 800c1f4:	f300 80ba 	bgt.w	800c36c <_dtoa_r+0x884>
 800c1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1fa:	2a00      	cmp	r2, #0
 800c1fc:	f000 80b2 	beq.w	800c364 <_dtoa_r+0x87c>
 800c200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c204:	9e07      	ldr	r6, [sp, #28]
 800c206:	9d04      	ldr	r5, [sp, #16]
 800c208:	9a04      	ldr	r2, [sp, #16]
 800c20a:	441a      	add	r2, r3
 800c20c:	9204      	str	r2, [sp, #16]
 800c20e:	9a05      	ldr	r2, [sp, #20]
 800c210:	2101      	movs	r1, #1
 800c212:	441a      	add	r2, r3
 800c214:	4620      	mov	r0, r4
 800c216:	9205      	str	r2, [sp, #20]
 800c218:	f000 fd86 	bl	800cd28 <__i2b>
 800c21c:	4607      	mov	r7, r0
 800c21e:	2d00      	cmp	r5, #0
 800c220:	dd0c      	ble.n	800c23c <_dtoa_r+0x754>
 800c222:	9b05      	ldr	r3, [sp, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	dd09      	ble.n	800c23c <_dtoa_r+0x754>
 800c228:	42ab      	cmp	r3, r5
 800c22a:	9a04      	ldr	r2, [sp, #16]
 800c22c:	bfa8      	it	ge
 800c22e:	462b      	movge	r3, r5
 800c230:	1ad2      	subs	r2, r2, r3
 800c232:	9204      	str	r2, [sp, #16]
 800c234:	9a05      	ldr	r2, [sp, #20]
 800c236:	1aed      	subs	r5, r5, r3
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	9305      	str	r3, [sp, #20]
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	b31b      	cbz	r3, 800c288 <_dtoa_r+0x7a0>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 80af 	beq.w	800c3a6 <_dtoa_r+0x8be>
 800c248:	2e00      	cmp	r6, #0
 800c24a:	dd13      	ble.n	800c274 <_dtoa_r+0x78c>
 800c24c:	4639      	mov	r1, r7
 800c24e:	4632      	mov	r2, r6
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fe29 	bl	800cea8 <__pow5mult>
 800c256:	ee18 2a10 	vmov	r2, s16
 800c25a:	4601      	mov	r1, r0
 800c25c:	4607      	mov	r7, r0
 800c25e:	4620      	mov	r0, r4
 800c260:	f000 fd78 	bl	800cd54 <__multiply>
 800c264:	ee18 1a10 	vmov	r1, s16
 800c268:	4680      	mov	r8, r0
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fca4 	bl	800cbb8 <_Bfree>
 800c270:	ee08 8a10 	vmov	s16, r8
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	1b9a      	subs	r2, r3, r6
 800c278:	d006      	beq.n	800c288 <_dtoa_r+0x7a0>
 800c27a:	ee18 1a10 	vmov	r1, s16
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 fe12 	bl	800cea8 <__pow5mult>
 800c284:	ee08 0a10 	vmov	s16, r0
 800c288:	2101      	movs	r1, #1
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fd4c 	bl	800cd28 <__i2b>
 800c290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c292:	2b00      	cmp	r3, #0
 800c294:	4606      	mov	r6, r0
 800c296:	f340 8088 	ble.w	800c3aa <_dtoa_r+0x8c2>
 800c29a:	461a      	mov	r2, r3
 800c29c:	4601      	mov	r1, r0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fe02 	bl	800cea8 <__pow5mult>
 800c2a4:	9b06      	ldr	r3, [sp, #24]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	f340 8081 	ble.w	800c3b0 <_dtoa_r+0x8c8>
 800c2ae:	f04f 0800 	mov.w	r8, #0
 800c2b2:	6933      	ldr	r3, [r6, #16]
 800c2b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c2b8:	6918      	ldr	r0, [r3, #16]
 800c2ba:	f000 fce5 	bl	800cc88 <__hi0bits>
 800c2be:	f1c0 0020 	rsb	r0, r0, #32
 800c2c2:	9b05      	ldr	r3, [sp, #20]
 800c2c4:	4418      	add	r0, r3
 800c2c6:	f010 001f 	ands.w	r0, r0, #31
 800c2ca:	f000 8092 	beq.w	800c3f2 <_dtoa_r+0x90a>
 800c2ce:	f1c0 0320 	rsb	r3, r0, #32
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	f340 808a 	ble.w	800c3ec <_dtoa_r+0x904>
 800c2d8:	f1c0 001c 	rsb	r0, r0, #28
 800c2dc:	9b04      	ldr	r3, [sp, #16]
 800c2de:	4403      	add	r3, r0
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	9b05      	ldr	r3, [sp, #20]
 800c2e4:	4403      	add	r3, r0
 800c2e6:	4405      	add	r5, r0
 800c2e8:	9305      	str	r3, [sp, #20]
 800c2ea:	9b04      	ldr	r3, [sp, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	dd07      	ble.n	800c300 <_dtoa_r+0x818>
 800c2f0:	ee18 1a10 	vmov	r1, s16
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 fe30 	bl	800cf5c <__lshift>
 800c2fc:	ee08 0a10 	vmov	s16, r0
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	2b00      	cmp	r3, #0
 800c304:	dd05      	ble.n	800c312 <_dtoa_r+0x82a>
 800c306:	4631      	mov	r1, r6
 800c308:	461a      	mov	r2, r3
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 fe26 	bl	800cf5c <__lshift>
 800c310:	4606      	mov	r6, r0
 800c312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c314:	2b00      	cmp	r3, #0
 800c316:	d06e      	beq.n	800c3f6 <_dtoa_r+0x90e>
 800c318:	ee18 0a10 	vmov	r0, s16
 800c31c:	4631      	mov	r1, r6
 800c31e:	f000 fe8d 	bl	800d03c <__mcmp>
 800c322:	2800      	cmp	r0, #0
 800c324:	da67      	bge.n	800c3f6 <_dtoa_r+0x90e>
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	3b01      	subs	r3, #1
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	220a      	movs	r2, #10
 800c332:	2300      	movs	r3, #0
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fc61 	bl	800cbfc <__multadd>
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	ee08 0a10 	vmov	s16, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 81b1 	beq.w	800c6a8 <_dtoa_r+0xbc0>
 800c346:	2300      	movs	r3, #0
 800c348:	4639      	mov	r1, r7
 800c34a:	220a      	movs	r2, #10
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 fc55 	bl	800cbfc <__multadd>
 800c352:	9b02      	ldr	r3, [sp, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	4607      	mov	r7, r0
 800c358:	f300 808e 	bgt.w	800c478 <_dtoa_r+0x990>
 800c35c:	9b06      	ldr	r3, [sp, #24]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	dc51      	bgt.n	800c406 <_dtoa_r+0x91e>
 800c362:	e089      	b.n	800c478 <_dtoa_r+0x990>
 800c364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c36a:	e74b      	b.n	800c204 <_dtoa_r+0x71c>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	1e5e      	subs	r6, r3, #1
 800c370:	9b07      	ldr	r3, [sp, #28]
 800c372:	42b3      	cmp	r3, r6
 800c374:	bfbf      	itttt	lt
 800c376:	9b07      	ldrlt	r3, [sp, #28]
 800c378:	9607      	strlt	r6, [sp, #28]
 800c37a:	1af2      	sublt	r2, r6, r3
 800c37c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c37e:	bfb6      	itet	lt
 800c380:	189b      	addlt	r3, r3, r2
 800c382:	1b9e      	subge	r6, r3, r6
 800c384:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	bfb8      	it	lt
 800c38a:	2600      	movlt	r6, #0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfb7      	itett	lt
 800c390:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c394:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c398:	1a9d      	sublt	r5, r3, r2
 800c39a:	2300      	movlt	r3, #0
 800c39c:	e734      	b.n	800c208 <_dtoa_r+0x720>
 800c39e:	9e07      	ldr	r6, [sp, #28]
 800c3a0:	9d04      	ldr	r5, [sp, #16]
 800c3a2:	9f08      	ldr	r7, [sp, #32]
 800c3a4:	e73b      	b.n	800c21e <_dtoa_r+0x736>
 800c3a6:	9a07      	ldr	r2, [sp, #28]
 800c3a8:	e767      	b.n	800c27a <_dtoa_r+0x792>
 800c3aa:	9b06      	ldr	r3, [sp, #24]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	dc18      	bgt.n	800c3e2 <_dtoa_r+0x8fa>
 800c3b0:	f1ba 0f00 	cmp.w	sl, #0
 800c3b4:	d115      	bne.n	800c3e2 <_dtoa_r+0x8fa>
 800c3b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3ba:	b993      	cbnz	r3, 800c3e2 <_dtoa_r+0x8fa>
 800c3bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c3c0:	0d1b      	lsrs	r3, r3, #20
 800c3c2:	051b      	lsls	r3, r3, #20
 800c3c4:	b183      	cbz	r3, 800c3e8 <_dtoa_r+0x900>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	9b05      	ldr	r3, [sp, #20]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	9305      	str	r3, [sp, #20]
 800c3d2:	f04f 0801 	mov.w	r8, #1
 800c3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f47f af6a 	bne.w	800c2b2 <_dtoa_r+0x7ca>
 800c3de:	2001      	movs	r0, #1
 800c3e0:	e76f      	b.n	800c2c2 <_dtoa_r+0x7da>
 800c3e2:	f04f 0800 	mov.w	r8, #0
 800c3e6:	e7f6      	b.n	800c3d6 <_dtoa_r+0x8ee>
 800c3e8:	4698      	mov	r8, r3
 800c3ea:	e7f4      	b.n	800c3d6 <_dtoa_r+0x8ee>
 800c3ec:	f43f af7d 	beq.w	800c2ea <_dtoa_r+0x802>
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	301c      	adds	r0, #28
 800c3f4:	e772      	b.n	800c2dc <_dtoa_r+0x7f4>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dc37      	bgt.n	800c46c <_dtoa_r+0x984>
 800c3fc:	9b06      	ldr	r3, [sp, #24]
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	dd34      	ble.n	800c46c <_dtoa_r+0x984>
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	9302      	str	r3, [sp, #8]
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	b96b      	cbnz	r3, 800c426 <_dtoa_r+0x93e>
 800c40a:	4631      	mov	r1, r6
 800c40c:	2205      	movs	r2, #5
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 fbf4 	bl	800cbfc <__multadd>
 800c414:	4601      	mov	r1, r0
 800c416:	4606      	mov	r6, r0
 800c418:	ee18 0a10 	vmov	r0, s16
 800c41c:	f000 fe0e 	bl	800d03c <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	f73f adbb 	bgt.w	800bf9c <_dtoa_r+0x4b4>
 800c426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c428:	9d01      	ldr	r5, [sp, #4]
 800c42a:	43db      	mvns	r3, r3
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	f04f 0800 	mov.w	r8, #0
 800c432:	4631      	mov	r1, r6
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fbbf 	bl	800cbb8 <_Bfree>
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	f43f aea4 	beq.w	800c188 <_dtoa_r+0x6a0>
 800c440:	f1b8 0f00 	cmp.w	r8, #0
 800c444:	d005      	beq.n	800c452 <_dtoa_r+0x96a>
 800c446:	45b8      	cmp	r8, r7
 800c448:	d003      	beq.n	800c452 <_dtoa_r+0x96a>
 800c44a:	4641      	mov	r1, r8
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fbb3 	bl	800cbb8 <_Bfree>
 800c452:	4639      	mov	r1, r7
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fbaf 	bl	800cbb8 <_Bfree>
 800c45a:	e695      	b.n	800c188 <_dtoa_r+0x6a0>
 800c45c:	2600      	movs	r6, #0
 800c45e:	4637      	mov	r7, r6
 800c460:	e7e1      	b.n	800c426 <_dtoa_r+0x93e>
 800c462:	9700      	str	r7, [sp, #0]
 800c464:	4637      	mov	r7, r6
 800c466:	e599      	b.n	800bf9c <_dtoa_r+0x4b4>
 800c468:	40240000 	.word	0x40240000
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 80ca 	beq.w	800c608 <_dtoa_r+0xb20>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	2d00      	cmp	r5, #0
 800c47a:	dd05      	ble.n	800c488 <_dtoa_r+0x9a0>
 800c47c:	4639      	mov	r1, r7
 800c47e:	462a      	mov	r2, r5
 800c480:	4620      	mov	r0, r4
 800c482:	f000 fd6b 	bl	800cf5c <__lshift>
 800c486:	4607      	mov	r7, r0
 800c488:	f1b8 0f00 	cmp.w	r8, #0
 800c48c:	d05b      	beq.n	800c546 <_dtoa_r+0xa5e>
 800c48e:	6879      	ldr	r1, [r7, #4]
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fb51 	bl	800cb38 <_Balloc>
 800c496:	4605      	mov	r5, r0
 800c498:	b928      	cbnz	r0, 800c4a6 <_dtoa_r+0x9be>
 800c49a:	4b87      	ldr	r3, [pc, #540]	; (800c6b8 <_dtoa_r+0xbd0>)
 800c49c:	4602      	mov	r2, r0
 800c49e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c4a2:	f7ff bb3b 	b.w	800bb1c <_dtoa_r+0x34>
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	3202      	adds	r2, #2
 800c4aa:	0092      	lsls	r2, r2, #2
 800c4ac:	f107 010c 	add.w	r1, r7, #12
 800c4b0:	300c      	adds	r0, #12
 800c4b2:	f000 fb33 	bl	800cb1c <memcpy>
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 fd4e 	bl	800cf5c <__lshift>
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	f103 0901 	add.w	r9, r3, #1
 800c4c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	9305      	str	r3, [sp, #20]
 800c4ce:	f00a 0301 	and.w	r3, sl, #1
 800c4d2:	46b8      	mov	r8, r7
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	4631      	mov	r1, r6
 800c4da:	ee18 0a10 	vmov	r0, s16
 800c4de:	f7ff fa77 	bl	800b9d0 <quorem>
 800c4e2:	4641      	mov	r1, r8
 800c4e4:	9002      	str	r0, [sp, #8]
 800c4e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4ea:	ee18 0a10 	vmov	r0, s16
 800c4ee:	f000 fda5 	bl	800d03c <__mcmp>
 800c4f2:	463a      	mov	r2, r7
 800c4f4:	9003      	str	r0, [sp, #12]
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f000 fdbb 	bl	800d074 <__mdiff>
 800c4fe:	68c2      	ldr	r2, [r0, #12]
 800c500:	f109 3bff 	add.w	fp, r9, #4294967295
 800c504:	4605      	mov	r5, r0
 800c506:	bb02      	cbnz	r2, 800c54a <_dtoa_r+0xa62>
 800c508:	4601      	mov	r1, r0
 800c50a:	ee18 0a10 	vmov	r0, s16
 800c50e:	f000 fd95 	bl	800d03c <__mcmp>
 800c512:	4602      	mov	r2, r0
 800c514:	4629      	mov	r1, r5
 800c516:	4620      	mov	r0, r4
 800c518:	9207      	str	r2, [sp, #28]
 800c51a:	f000 fb4d 	bl	800cbb8 <_Bfree>
 800c51e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c522:	ea43 0102 	orr.w	r1, r3, r2
 800c526:	9b04      	ldr	r3, [sp, #16]
 800c528:	430b      	orrs	r3, r1
 800c52a:	464d      	mov	r5, r9
 800c52c:	d10f      	bne.n	800c54e <_dtoa_r+0xa66>
 800c52e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c532:	d02a      	beq.n	800c58a <_dtoa_r+0xaa2>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd02      	ble.n	800c540 <_dtoa_r+0xa58>
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c540:	f88b a000 	strb.w	sl, [fp]
 800c544:	e775      	b.n	800c432 <_dtoa_r+0x94a>
 800c546:	4638      	mov	r0, r7
 800c548:	e7ba      	b.n	800c4c0 <_dtoa_r+0x9d8>
 800c54a:	2201      	movs	r2, #1
 800c54c:	e7e2      	b.n	800c514 <_dtoa_r+0xa2c>
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	db04      	blt.n	800c55e <_dtoa_r+0xa76>
 800c554:	9906      	ldr	r1, [sp, #24]
 800c556:	430b      	orrs	r3, r1
 800c558:	9904      	ldr	r1, [sp, #16]
 800c55a:	430b      	orrs	r3, r1
 800c55c:	d122      	bne.n	800c5a4 <_dtoa_r+0xabc>
 800c55e:	2a00      	cmp	r2, #0
 800c560:	ddee      	ble.n	800c540 <_dtoa_r+0xa58>
 800c562:	ee18 1a10 	vmov	r1, s16
 800c566:	2201      	movs	r2, #1
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fcf7 	bl	800cf5c <__lshift>
 800c56e:	4631      	mov	r1, r6
 800c570:	ee08 0a10 	vmov	s16, r0
 800c574:	f000 fd62 	bl	800d03c <__mcmp>
 800c578:	2800      	cmp	r0, #0
 800c57a:	dc03      	bgt.n	800c584 <_dtoa_r+0xa9c>
 800c57c:	d1e0      	bne.n	800c540 <_dtoa_r+0xa58>
 800c57e:	f01a 0f01 	tst.w	sl, #1
 800c582:	d0dd      	beq.n	800c540 <_dtoa_r+0xa58>
 800c584:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c588:	d1d7      	bne.n	800c53a <_dtoa_r+0xa52>
 800c58a:	2339      	movs	r3, #57	; 0x39
 800c58c:	f88b 3000 	strb.w	r3, [fp]
 800c590:	462b      	mov	r3, r5
 800c592:	461d      	mov	r5, r3
 800c594:	3b01      	subs	r3, #1
 800c596:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c59a:	2a39      	cmp	r2, #57	; 0x39
 800c59c:	d071      	beq.n	800c682 <_dtoa_r+0xb9a>
 800c59e:	3201      	adds	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	e746      	b.n	800c432 <_dtoa_r+0x94a>
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	dd07      	ble.n	800c5b8 <_dtoa_r+0xad0>
 800c5a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c5ac:	d0ed      	beq.n	800c58a <_dtoa_r+0xaa2>
 800c5ae:	f10a 0301 	add.w	r3, sl, #1
 800c5b2:	f88b 3000 	strb.w	r3, [fp]
 800c5b6:	e73c      	b.n	800c432 <_dtoa_r+0x94a>
 800c5b8:	9b05      	ldr	r3, [sp, #20]
 800c5ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c5be:	4599      	cmp	r9, r3
 800c5c0:	d047      	beq.n	800c652 <_dtoa_r+0xb6a>
 800c5c2:	ee18 1a10 	vmov	r1, s16
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	220a      	movs	r2, #10
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 fb16 	bl	800cbfc <__multadd>
 800c5d0:	45b8      	cmp	r8, r7
 800c5d2:	ee08 0a10 	vmov	s16, r0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	f04f 020a 	mov.w	r2, #10
 800c5de:	4641      	mov	r1, r8
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	d106      	bne.n	800c5f2 <_dtoa_r+0xb0a>
 800c5e4:	f000 fb0a 	bl	800cbfc <__multadd>
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	4607      	mov	r7, r0
 800c5ec:	f109 0901 	add.w	r9, r9, #1
 800c5f0:	e772      	b.n	800c4d8 <_dtoa_r+0x9f0>
 800c5f2:	f000 fb03 	bl	800cbfc <__multadd>
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 fafc 	bl	800cbfc <__multadd>
 800c604:	4607      	mov	r7, r0
 800c606:	e7f1      	b.n	800c5ec <_dtoa_r+0xb04>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	9302      	str	r3, [sp, #8]
 800c60c:	9d01      	ldr	r5, [sp, #4]
 800c60e:	ee18 0a10 	vmov	r0, s16
 800c612:	4631      	mov	r1, r6
 800c614:	f7ff f9dc 	bl	800b9d0 <quorem>
 800c618:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	f805 ab01 	strb.w	sl, [r5], #1
 800c622:	1aea      	subs	r2, r5, r3
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	4293      	cmp	r3, r2
 800c628:	dd09      	ble.n	800c63e <_dtoa_r+0xb56>
 800c62a:	ee18 1a10 	vmov	r1, s16
 800c62e:	2300      	movs	r3, #0
 800c630:	220a      	movs	r2, #10
 800c632:	4620      	mov	r0, r4
 800c634:	f000 fae2 	bl	800cbfc <__multadd>
 800c638:	ee08 0a10 	vmov	s16, r0
 800c63c:	e7e7      	b.n	800c60e <_dtoa_r+0xb26>
 800c63e:	9b02      	ldr	r3, [sp, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	bfc8      	it	gt
 800c644:	461d      	movgt	r5, r3
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	bfd8      	it	le
 800c64a:	2501      	movle	r5, #1
 800c64c:	441d      	add	r5, r3
 800c64e:	f04f 0800 	mov.w	r8, #0
 800c652:	ee18 1a10 	vmov	r1, s16
 800c656:	2201      	movs	r2, #1
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 fc7f 	bl	800cf5c <__lshift>
 800c65e:	4631      	mov	r1, r6
 800c660:	ee08 0a10 	vmov	s16, r0
 800c664:	f000 fcea 	bl	800d03c <__mcmp>
 800c668:	2800      	cmp	r0, #0
 800c66a:	dc91      	bgt.n	800c590 <_dtoa_r+0xaa8>
 800c66c:	d102      	bne.n	800c674 <_dtoa_r+0xb8c>
 800c66e:	f01a 0f01 	tst.w	sl, #1
 800c672:	d18d      	bne.n	800c590 <_dtoa_r+0xaa8>
 800c674:	462b      	mov	r3, r5
 800c676:	461d      	mov	r5, r3
 800c678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c67c:	2a30      	cmp	r2, #48	; 0x30
 800c67e:	d0fa      	beq.n	800c676 <_dtoa_r+0xb8e>
 800c680:	e6d7      	b.n	800c432 <_dtoa_r+0x94a>
 800c682:	9a01      	ldr	r2, [sp, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	d184      	bne.n	800c592 <_dtoa_r+0xaaa>
 800c688:	9b00      	ldr	r3, [sp, #0]
 800c68a:	3301      	adds	r3, #1
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	2331      	movs	r3, #49	; 0x31
 800c690:	7013      	strb	r3, [r2, #0]
 800c692:	e6ce      	b.n	800c432 <_dtoa_r+0x94a>
 800c694:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <_dtoa_r+0xbd4>)
 800c696:	f7ff ba95 	b.w	800bbc4 <_dtoa_r+0xdc>
 800c69a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f47f aa6e 	bne.w	800bb7e <_dtoa_r+0x96>
 800c6a2:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <_dtoa_r+0xbd8>)
 800c6a4:	f7ff ba8e 	b.w	800bbc4 <_dtoa_r+0xdc>
 800c6a8:	9b02      	ldr	r3, [sp, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	dcae      	bgt.n	800c60c <_dtoa_r+0xb24>
 800c6ae:	9b06      	ldr	r3, [sp, #24]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	f73f aea8 	bgt.w	800c406 <_dtoa_r+0x91e>
 800c6b6:	e7a9      	b.n	800c60c <_dtoa_r+0xb24>
 800c6b8:	0800e7db 	.word	0x0800e7db
 800c6bc:	0800e738 	.word	0x0800e738
 800c6c0:	0800e75c 	.word	0x0800e75c

0800c6c4 <__sflush_r>:
 800c6c4:	898a      	ldrh	r2, [r1, #12]
 800c6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	0710      	lsls	r0, r2, #28
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	d458      	bmi.n	800c784 <__sflush_r+0xc0>
 800c6d2:	684b      	ldr	r3, [r1, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dc05      	bgt.n	800c6e4 <__sflush_r+0x20>
 800c6d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dc02      	bgt.n	800c6e4 <__sflush_r+0x20>
 800c6de:	2000      	movs	r0, #0
 800c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	d0f9      	beq.n	800c6de <__sflush_r+0x1a>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6f0:	682f      	ldr	r7, [r5, #0]
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	d032      	beq.n	800c75c <__sflush_r+0x98>
 800c6f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	075a      	lsls	r2, r3, #29
 800c6fc:	d505      	bpl.n	800c70a <__sflush_r+0x46>
 800c6fe:	6863      	ldr	r3, [r4, #4]
 800c700:	1ac0      	subs	r0, r0, r3
 800c702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c704:	b10b      	cbz	r3, 800c70a <__sflush_r+0x46>
 800c706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c708:	1ac0      	subs	r0, r0, r3
 800c70a:	2300      	movs	r3, #0
 800c70c:	4602      	mov	r2, r0
 800c70e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	4628      	mov	r0, r5
 800c714:	47b0      	blx	r6
 800c716:	1c43      	adds	r3, r0, #1
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	d106      	bne.n	800c72a <__sflush_r+0x66>
 800c71c:	6829      	ldr	r1, [r5, #0]
 800c71e:	291d      	cmp	r1, #29
 800c720:	d82c      	bhi.n	800c77c <__sflush_r+0xb8>
 800c722:	4a2a      	ldr	r2, [pc, #168]	; (800c7cc <__sflush_r+0x108>)
 800c724:	40ca      	lsrs	r2, r1
 800c726:	07d6      	lsls	r6, r2, #31
 800c728:	d528      	bpl.n	800c77c <__sflush_r+0xb8>
 800c72a:	2200      	movs	r2, #0
 800c72c:	6062      	str	r2, [r4, #4]
 800c72e:	04d9      	lsls	r1, r3, #19
 800c730:	6922      	ldr	r2, [r4, #16]
 800c732:	6022      	str	r2, [r4, #0]
 800c734:	d504      	bpl.n	800c740 <__sflush_r+0x7c>
 800c736:	1c42      	adds	r2, r0, #1
 800c738:	d101      	bne.n	800c73e <__sflush_r+0x7a>
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	b903      	cbnz	r3, 800c740 <__sflush_r+0x7c>
 800c73e:	6560      	str	r0, [r4, #84]	; 0x54
 800c740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c742:	602f      	str	r7, [r5, #0]
 800c744:	2900      	cmp	r1, #0
 800c746:	d0ca      	beq.n	800c6de <__sflush_r+0x1a>
 800c748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c74c:	4299      	cmp	r1, r3
 800c74e:	d002      	beq.n	800c756 <__sflush_r+0x92>
 800c750:	4628      	mov	r0, r5
 800c752:	f000 fd8b 	bl	800d26c <_free_r>
 800c756:	2000      	movs	r0, #0
 800c758:	6360      	str	r0, [r4, #52]	; 0x34
 800c75a:	e7c1      	b.n	800c6e0 <__sflush_r+0x1c>
 800c75c:	6a21      	ldr	r1, [r4, #32]
 800c75e:	2301      	movs	r3, #1
 800c760:	4628      	mov	r0, r5
 800c762:	47b0      	blx	r6
 800c764:	1c41      	adds	r1, r0, #1
 800c766:	d1c7      	bne.n	800c6f8 <__sflush_r+0x34>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d0c4      	beq.n	800c6f8 <__sflush_r+0x34>
 800c76e:	2b1d      	cmp	r3, #29
 800c770:	d001      	beq.n	800c776 <__sflush_r+0xb2>
 800c772:	2b16      	cmp	r3, #22
 800c774:	d101      	bne.n	800c77a <__sflush_r+0xb6>
 800c776:	602f      	str	r7, [r5, #0]
 800c778:	e7b1      	b.n	800c6de <__sflush_r+0x1a>
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c780:	81a3      	strh	r3, [r4, #12]
 800c782:	e7ad      	b.n	800c6e0 <__sflush_r+0x1c>
 800c784:	690f      	ldr	r7, [r1, #16]
 800c786:	2f00      	cmp	r7, #0
 800c788:	d0a9      	beq.n	800c6de <__sflush_r+0x1a>
 800c78a:	0793      	lsls	r3, r2, #30
 800c78c:	680e      	ldr	r6, [r1, #0]
 800c78e:	bf08      	it	eq
 800c790:	694b      	ldreq	r3, [r1, #20]
 800c792:	600f      	str	r7, [r1, #0]
 800c794:	bf18      	it	ne
 800c796:	2300      	movne	r3, #0
 800c798:	eba6 0807 	sub.w	r8, r6, r7
 800c79c:	608b      	str	r3, [r1, #8]
 800c79e:	f1b8 0f00 	cmp.w	r8, #0
 800c7a2:	dd9c      	ble.n	800c6de <__sflush_r+0x1a>
 800c7a4:	6a21      	ldr	r1, [r4, #32]
 800c7a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7a8:	4643      	mov	r3, r8
 800c7aa:	463a      	mov	r2, r7
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	47b0      	blx	r6
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	dc06      	bgt.n	800c7c2 <__sflush_r+0xfe>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ba:	81a3      	strh	r3, [r4, #12]
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	e78e      	b.n	800c6e0 <__sflush_r+0x1c>
 800c7c2:	4407      	add	r7, r0
 800c7c4:	eba8 0800 	sub.w	r8, r8, r0
 800c7c8:	e7e9      	b.n	800c79e <__sflush_r+0xda>
 800c7ca:	bf00      	nop
 800c7cc:	20400001 	.word	0x20400001

0800c7d0 <_fflush_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	690b      	ldr	r3, [r1, #16]
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	b913      	cbnz	r3, 800c7e0 <_fflush_r+0x10>
 800c7da:	2500      	movs	r5, #0
 800c7dc:	4628      	mov	r0, r5
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	b118      	cbz	r0, 800c7ea <_fflush_r+0x1a>
 800c7e2:	6983      	ldr	r3, [r0, #24]
 800c7e4:	b90b      	cbnz	r3, 800c7ea <_fflush_r+0x1a>
 800c7e6:	f000 f887 	bl	800c8f8 <__sinit>
 800c7ea:	4b14      	ldr	r3, [pc, #80]	; (800c83c <_fflush_r+0x6c>)
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	d11b      	bne.n	800c828 <_fflush_r+0x58>
 800c7f0:	686c      	ldr	r4, [r5, #4]
 800c7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0ef      	beq.n	800c7da <_fflush_r+0xa>
 800c7fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7fc:	07d0      	lsls	r0, r2, #31
 800c7fe:	d404      	bmi.n	800c80a <_fflush_r+0x3a>
 800c800:	0599      	lsls	r1, r3, #22
 800c802:	d402      	bmi.n	800c80a <_fflush_r+0x3a>
 800c804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c806:	f000 f91a 	bl	800ca3e <__retarget_lock_acquire_recursive>
 800c80a:	4628      	mov	r0, r5
 800c80c:	4621      	mov	r1, r4
 800c80e:	f7ff ff59 	bl	800c6c4 <__sflush_r>
 800c812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c814:	07da      	lsls	r2, r3, #31
 800c816:	4605      	mov	r5, r0
 800c818:	d4e0      	bmi.n	800c7dc <_fflush_r+0xc>
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	059b      	lsls	r3, r3, #22
 800c81e:	d4dd      	bmi.n	800c7dc <_fflush_r+0xc>
 800c820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c822:	f000 f90d 	bl	800ca40 <__retarget_lock_release_recursive>
 800c826:	e7d9      	b.n	800c7dc <_fflush_r+0xc>
 800c828:	4b05      	ldr	r3, [pc, #20]	; (800c840 <_fflush_r+0x70>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d101      	bne.n	800c832 <_fflush_r+0x62>
 800c82e:	68ac      	ldr	r4, [r5, #8]
 800c830:	e7df      	b.n	800c7f2 <_fflush_r+0x22>
 800c832:	4b04      	ldr	r3, [pc, #16]	; (800c844 <_fflush_r+0x74>)
 800c834:	429c      	cmp	r4, r3
 800c836:	bf08      	it	eq
 800c838:	68ec      	ldreq	r4, [r5, #12]
 800c83a:	e7da      	b.n	800c7f2 <_fflush_r+0x22>
 800c83c:	0800e80c 	.word	0x0800e80c
 800c840:	0800e82c 	.word	0x0800e82c
 800c844:	0800e7ec 	.word	0x0800e7ec

0800c848 <std>:
 800c848:	2300      	movs	r3, #0
 800c84a:	b510      	push	{r4, lr}
 800c84c:	4604      	mov	r4, r0
 800c84e:	e9c0 3300 	strd	r3, r3, [r0]
 800c852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c856:	6083      	str	r3, [r0, #8]
 800c858:	8181      	strh	r1, [r0, #12]
 800c85a:	6643      	str	r3, [r0, #100]	; 0x64
 800c85c:	81c2      	strh	r2, [r0, #14]
 800c85e:	6183      	str	r3, [r0, #24]
 800c860:	4619      	mov	r1, r3
 800c862:	2208      	movs	r2, #8
 800c864:	305c      	adds	r0, #92	; 0x5c
 800c866:	f7fe fabf 	bl	800ade8 <memset>
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <std+0x38>)
 800c86c:	6263      	str	r3, [r4, #36]	; 0x24
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <std+0x3c>)
 800c870:	62a3      	str	r3, [r4, #40]	; 0x28
 800c872:	4b05      	ldr	r3, [pc, #20]	; (800c888 <std+0x40>)
 800c874:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c876:	4b05      	ldr	r3, [pc, #20]	; (800c88c <std+0x44>)
 800c878:	6224      	str	r4, [r4, #32]
 800c87a:	6323      	str	r3, [r4, #48]	; 0x30
 800c87c:	bd10      	pop	{r4, pc}
 800c87e:	bf00      	nop
 800c880:	0800d9b9 	.word	0x0800d9b9
 800c884:	0800d9db 	.word	0x0800d9db
 800c888:	0800da13 	.word	0x0800da13
 800c88c:	0800da37 	.word	0x0800da37

0800c890 <_cleanup_r>:
 800c890:	4901      	ldr	r1, [pc, #4]	; (800c898 <_cleanup_r+0x8>)
 800c892:	f000 b8af 	b.w	800c9f4 <_fwalk_reent>
 800c896:	bf00      	nop
 800c898:	0800c7d1 	.word	0x0800c7d1

0800c89c <__sfmoreglue>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	2268      	movs	r2, #104	; 0x68
 800c8a0:	1e4d      	subs	r5, r1, #1
 800c8a2:	4355      	muls	r5, r2
 800c8a4:	460e      	mov	r6, r1
 800c8a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8aa:	f000 fd4b 	bl	800d344 <_malloc_r>
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	b140      	cbz	r0, 800c8c4 <__sfmoreglue+0x28>
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	e9c0 1600 	strd	r1, r6, [r0]
 800c8b8:	300c      	adds	r0, #12
 800c8ba:	60a0      	str	r0, [r4, #8]
 800c8bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8c0:	f7fe fa92 	bl	800ade8 <memset>
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}

0800c8c8 <__sfp_lock_acquire>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__sfp_lock_acquire+0x8>)
 800c8ca:	f000 b8b8 	b.w	800ca3e <__retarget_lock_acquire_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20003201 	.word	0x20003201

0800c8d4 <__sfp_lock_release>:
 800c8d4:	4801      	ldr	r0, [pc, #4]	; (800c8dc <__sfp_lock_release+0x8>)
 800c8d6:	f000 b8b3 	b.w	800ca40 <__retarget_lock_release_recursive>
 800c8da:	bf00      	nop
 800c8dc:	20003201 	.word	0x20003201

0800c8e0 <__sinit_lock_acquire>:
 800c8e0:	4801      	ldr	r0, [pc, #4]	; (800c8e8 <__sinit_lock_acquire+0x8>)
 800c8e2:	f000 b8ac 	b.w	800ca3e <__retarget_lock_acquire_recursive>
 800c8e6:	bf00      	nop
 800c8e8:	20003202 	.word	0x20003202

0800c8ec <__sinit_lock_release>:
 800c8ec:	4801      	ldr	r0, [pc, #4]	; (800c8f4 <__sinit_lock_release+0x8>)
 800c8ee:	f000 b8a7 	b.w	800ca40 <__retarget_lock_release_recursive>
 800c8f2:	bf00      	nop
 800c8f4:	20003202 	.word	0x20003202

0800c8f8 <__sinit>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	f7ff fff0 	bl	800c8e0 <__sinit_lock_acquire>
 800c900:	69a3      	ldr	r3, [r4, #24]
 800c902:	b11b      	cbz	r3, 800c90c <__sinit+0x14>
 800c904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c908:	f7ff bff0 	b.w	800c8ec <__sinit_lock_release>
 800c90c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c910:	6523      	str	r3, [r4, #80]	; 0x50
 800c912:	4b13      	ldr	r3, [pc, #76]	; (800c960 <__sinit+0x68>)
 800c914:	4a13      	ldr	r2, [pc, #76]	; (800c964 <__sinit+0x6c>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	62a2      	str	r2, [r4, #40]	; 0x28
 800c91a:	42a3      	cmp	r3, r4
 800c91c:	bf04      	itt	eq
 800c91e:	2301      	moveq	r3, #1
 800c920:	61a3      	streq	r3, [r4, #24]
 800c922:	4620      	mov	r0, r4
 800c924:	f000 f820 	bl	800c968 <__sfp>
 800c928:	6060      	str	r0, [r4, #4]
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 f81c 	bl	800c968 <__sfp>
 800c930:	60a0      	str	r0, [r4, #8]
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f818 	bl	800c968 <__sfp>
 800c938:	2200      	movs	r2, #0
 800c93a:	60e0      	str	r0, [r4, #12]
 800c93c:	2104      	movs	r1, #4
 800c93e:	6860      	ldr	r0, [r4, #4]
 800c940:	f7ff ff82 	bl	800c848 <std>
 800c944:	68a0      	ldr	r0, [r4, #8]
 800c946:	2201      	movs	r2, #1
 800c948:	2109      	movs	r1, #9
 800c94a:	f7ff ff7d 	bl	800c848 <std>
 800c94e:	68e0      	ldr	r0, [r4, #12]
 800c950:	2202      	movs	r2, #2
 800c952:	2112      	movs	r1, #18
 800c954:	f7ff ff78 	bl	800c848 <std>
 800c958:	2301      	movs	r3, #1
 800c95a:	61a3      	str	r3, [r4, #24]
 800c95c:	e7d2      	b.n	800c904 <__sinit+0xc>
 800c95e:	bf00      	nop
 800c960:	0800e724 	.word	0x0800e724
 800c964:	0800c891 	.word	0x0800c891

0800c968 <__sfp>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	4607      	mov	r7, r0
 800c96c:	f7ff ffac 	bl	800c8c8 <__sfp_lock_acquire>
 800c970:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <__sfp+0x84>)
 800c972:	681e      	ldr	r6, [r3, #0]
 800c974:	69b3      	ldr	r3, [r6, #24]
 800c976:	b913      	cbnz	r3, 800c97e <__sfp+0x16>
 800c978:	4630      	mov	r0, r6
 800c97a:	f7ff ffbd 	bl	800c8f8 <__sinit>
 800c97e:	3648      	adds	r6, #72	; 0x48
 800c980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c984:	3b01      	subs	r3, #1
 800c986:	d503      	bpl.n	800c990 <__sfp+0x28>
 800c988:	6833      	ldr	r3, [r6, #0]
 800c98a:	b30b      	cbz	r3, 800c9d0 <__sfp+0x68>
 800c98c:	6836      	ldr	r6, [r6, #0]
 800c98e:	e7f7      	b.n	800c980 <__sfp+0x18>
 800c990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c994:	b9d5      	cbnz	r5, 800c9cc <__sfp+0x64>
 800c996:	4b16      	ldr	r3, [pc, #88]	; (800c9f0 <__sfp+0x88>)
 800c998:	60e3      	str	r3, [r4, #12]
 800c99a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c99e:	6665      	str	r5, [r4, #100]	; 0x64
 800c9a0:	f000 f84c 	bl	800ca3c <__retarget_lock_init_recursive>
 800c9a4:	f7ff ff96 	bl	800c8d4 <__sfp_lock_release>
 800c9a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9b0:	6025      	str	r5, [r4, #0]
 800c9b2:	61a5      	str	r5, [r4, #24]
 800c9b4:	2208      	movs	r2, #8
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9bc:	f7fe fa14 	bl	800ade8 <memset>
 800c9c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9cc:	3468      	adds	r4, #104	; 0x68
 800c9ce:	e7d9      	b.n	800c984 <__sfp+0x1c>
 800c9d0:	2104      	movs	r1, #4
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	f7ff ff62 	bl	800c89c <__sfmoreglue>
 800c9d8:	4604      	mov	r4, r0
 800c9da:	6030      	str	r0, [r6, #0]
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1d5      	bne.n	800c98c <__sfp+0x24>
 800c9e0:	f7ff ff78 	bl	800c8d4 <__sfp_lock_release>
 800c9e4:	230c      	movs	r3, #12
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	e7ee      	b.n	800c9c8 <__sfp+0x60>
 800c9ea:	bf00      	nop
 800c9ec:	0800e724 	.word	0x0800e724
 800c9f0:	ffff0001 	.word	0xffff0001

0800c9f4 <_fwalk_reent>:
 800c9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	4688      	mov	r8, r1
 800c9fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca00:	2700      	movs	r7, #0
 800ca02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca06:	f1b9 0901 	subs.w	r9, r9, #1
 800ca0a:	d505      	bpl.n	800ca18 <_fwalk_reent+0x24>
 800ca0c:	6824      	ldr	r4, [r4, #0]
 800ca0e:	2c00      	cmp	r4, #0
 800ca10:	d1f7      	bne.n	800ca02 <_fwalk_reent+0xe>
 800ca12:	4638      	mov	r0, r7
 800ca14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca18:	89ab      	ldrh	r3, [r5, #12]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d907      	bls.n	800ca2e <_fwalk_reent+0x3a>
 800ca1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca22:	3301      	adds	r3, #1
 800ca24:	d003      	beq.n	800ca2e <_fwalk_reent+0x3a>
 800ca26:	4629      	mov	r1, r5
 800ca28:	4630      	mov	r0, r6
 800ca2a:	47c0      	blx	r8
 800ca2c:	4307      	orrs	r7, r0
 800ca2e:	3568      	adds	r5, #104	; 0x68
 800ca30:	e7e9      	b.n	800ca06 <_fwalk_reent+0x12>
	...

0800ca34 <_localeconv_r>:
 800ca34:	4800      	ldr	r0, [pc, #0]	; (800ca38 <_localeconv_r+0x4>)
 800ca36:	4770      	bx	lr
 800ca38:	20000160 	.word	0x20000160

0800ca3c <__retarget_lock_init_recursive>:
 800ca3c:	4770      	bx	lr

0800ca3e <__retarget_lock_acquire_recursive>:
 800ca3e:	4770      	bx	lr

0800ca40 <__retarget_lock_release_recursive>:
 800ca40:	4770      	bx	lr

0800ca42 <__swhatbuf_r>:
 800ca42:	b570      	push	{r4, r5, r6, lr}
 800ca44:	460e      	mov	r6, r1
 800ca46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca4a:	2900      	cmp	r1, #0
 800ca4c:	b096      	sub	sp, #88	; 0x58
 800ca4e:	4614      	mov	r4, r2
 800ca50:	461d      	mov	r5, r3
 800ca52:	da08      	bge.n	800ca66 <__swhatbuf_r+0x24>
 800ca54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	602a      	str	r2, [r5, #0]
 800ca5c:	061a      	lsls	r2, r3, #24
 800ca5e:	d410      	bmi.n	800ca82 <__swhatbuf_r+0x40>
 800ca60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca64:	e00e      	b.n	800ca84 <__swhatbuf_r+0x42>
 800ca66:	466a      	mov	r2, sp
 800ca68:	f001 f83c 	bl	800dae4 <_fstat_r>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dbf1      	blt.n	800ca54 <__swhatbuf_r+0x12>
 800ca70:	9a01      	ldr	r2, [sp, #4]
 800ca72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca7a:	425a      	negs	r2, r3
 800ca7c:	415a      	adcs	r2, r3
 800ca7e:	602a      	str	r2, [r5, #0]
 800ca80:	e7ee      	b.n	800ca60 <__swhatbuf_r+0x1e>
 800ca82:	2340      	movs	r3, #64	; 0x40
 800ca84:	2000      	movs	r0, #0
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	b016      	add	sp, #88	; 0x58
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}

0800ca8c <__smakebuf_r>:
 800ca8c:	898b      	ldrh	r3, [r1, #12]
 800ca8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca90:	079d      	lsls	r5, r3, #30
 800ca92:	4606      	mov	r6, r0
 800ca94:	460c      	mov	r4, r1
 800ca96:	d507      	bpl.n	800caa8 <__smakebuf_r+0x1c>
 800ca98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	6123      	str	r3, [r4, #16]
 800caa0:	2301      	movs	r3, #1
 800caa2:	6163      	str	r3, [r4, #20]
 800caa4:	b002      	add	sp, #8
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	ab01      	add	r3, sp, #4
 800caaa:	466a      	mov	r2, sp
 800caac:	f7ff ffc9 	bl	800ca42 <__swhatbuf_r>
 800cab0:	9900      	ldr	r1, [sp, #0]
 800cab2:	4605      	mov	r5, r0
 800cab4:	4630      	mov	r0, r6
 800cab6:	f000 fc45 	bl	800d344 <_malloc_r>
 800caba:	b948      	cbnz	r0, 800cad0 <__smakebuf_r+0x44>
 800cabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac0:	059a      	lsls	r2, r3, #22
 800cac2:	d4ef      	bmi.n	800caa4 <__smakebuf_r+0x18>
 800cac4:	f023 0303 	bic.w	r3, r3, #3
 800cac8:	f043 0302 	orr.w	r3, r3, #2
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	e7e3      	b.n	800ca98 <__smakebuf_r+0xc>
 800cad0:	4b0d      	ldr	r3, [pc, #52]	; (800cb08 <__smakebuf_r+0x7c>)
 800cad2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cad4:	89a3      	ldrh	r3, [r4, #12]
 800cad6:	6020      	str	r0, [r4, #0]
 800cad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	9b00      	ldr	r3, [sp, #0]
 800cae0:	6163      	str	r3, [r4, #20]
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	6120      	str	r0, [r4, #16]
 800cae6:	b15b      	cbz	r3, 800cb00 <__smakebuf_r+0x74>
 800cae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caec:	4630      	mov	r0, r6
 800caee:	f001 f80b 	bl	800db08 <_isatty_r>
 800caf2:	b128      	cbz	r0, 800cb00 <__smakebuf_r+0x74>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	f023 0303 	bic.w	r3, r3, #3
 800cafa:	f043 0301 	orr.w	r3, r3, #1
 800cafe:	81a3      	strh	r3, [r4, #12]
 800cb00:	89a0      	ldrh	r0, [r4, #12]
 800cb02:	4305      	orrs	r5, r0
 800cb04:	81a5      	strh	r5, [r4, #12]
 800cb06:	e7cd      	b.n	800caa4 <__smakebuf_r+0x18>
 800cb08:	0800c891 	.word	0x0800c891

0800cb0c <malloc>:
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <malloc+0xc>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f000 bc17 	b.w	800d344 <_malloc_r>
 800cb16:	bf00      	nop
 800cb18:	2000000c 	.word	0x2000000c

0800cb1c <memcpy>:
 800cb1c:	440a      	add	r2, r1
 800cb1e:	4291      	cmp	r1, r2
 800cb20:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb24:	d100      	bne.n	800cb28 <memcpy+0xc>
 800cb26:	4770      	bx	lr
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb32:	4291      	cmp	r1, r2
 800cb34:	d1f9      	bne.n	800cb2a <memcpy+0xe>
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <_Balloc>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	460d      	mov	r5, r1
 800cb40:	b976      	cbnz	r6, 800cb60 <_Balloc+0x28>
 800cb42:	2010      	movs	r0, #16
 800cb44:	f7ff ffe2 	bl	800cb0c <malloc>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb4c:	b920      	cbnz	r0, 800cb58 <_Balloc+0x20>
 800cb4e:	4b18      	ldr	r3, [pc, #96]	; (800cbb0 <_Balloc+0x78>)
 800cb50:	4818      	ldr	r0, [pc, #96]	; (800cbb4 <_Balloc+0x7c>)
 800cb52:	2166      	movs	r1, #102	; 0x66
 800cb54:	f000 ff86 	bl	800da64 <__assert_func>
 800cb58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb5c:	6006      	str	r6, [r0, #0]
 800cb5e:	60c6      	str	r6, [r0, #12]
 800cb60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb62:	68f3      	ldr	r3, [r6, #12]
 800cb64:	b183      	cbz	r3, 800cb88 <_Balloc+0x50>
 800cb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb6e:	b9b8      	cbnz	r0, 800cba0 <_Balloc+0x68>
 800cb70:	2101      	movs	r1, #1
 800cb72:	fa01 f605 	lsl.w	r6, r1, r5
 800cb76:	1d72      	adds	r2, r6, #5
 800cb78:	0092      	lsls	r2, r2, #2
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 fb60 	bl	800d240 <_calloc_r>
 800cb80:	b160      	cbz	r0, 800cb9c <_Balloc+0x64>
 800cb82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb86:	e00e      	b.n	800cba6 <_Balloc+0x6e>
 800cb88:	2221      	movs	r2, #33	; 0x21
 800cb8a:	2104      	movs	r1, #4
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 fb57 	bl	800d240 <_calloc_r>
 800cb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb94:	60f0      	str	r0, [r6, #12]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e4      	bne.n	800cb66 <_Balloc+0x2e>
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	6802      	ldr	r2, [r0, #0]
 800cba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cba6:	2300      	movs	r3, #0
 800cba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbac:	e7f7      	b.n	800cb9e <_Balloc+0x66>
 800cbae:	bf00      	nop
 800cbb0:	0800e769 	.word	0x0800e769
 800cbb4:	0800e84c 	.word	0x0800e84c

0800cbb8 <_Bfree>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	b976      	cbnz	r6, 800cbe0 <_Bfree+0x28>
 800cbc2:	2010      	movs	r0, #16
 800cbc4:	f7ff ffa2 	bl	800cb0c <malloc>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	6268      	str	r0, [r5, #36]	; 0x24
 800cbcc:	b920      	cbnz	r0, 800cbd8 <_Bfree+0x20>
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <_Bfree+0x3c>)
 800cbd0:	4809      	ldr	r0, [pc, #36]	; (800cbf8 <_Bfree+0x40>)
 800cbd2:	218a      	movs	r1, #138	; 0x8a
 800cbd4:	f000 ff46 	bl	800da64 <__assert_func>
 800cbd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbdc:	6006      	str	r6, [r0, #0]
 800cbde:	60c6      	str	r6, [r0, #12]
 800cbe0:	b13c      	cbz	r4, 800cbf2 <_Bfree+0x3a>
 800cbe2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbe4:	6862      	ldr	r2, [r4, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbec:	6021      	str	r1, [r4, #0]
 800cbee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	0800e769 	.word	0x0800e769
 800cbf8:	0800e84c 	.word	0x0800e84c

0800cbfc <__multadd>:
 800cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc00:	690d      	ldr	r5, [r1, #16]
 800cc02:	4607      	mov	r7, r0
 800cc04:	460c      	mov	r4, r1
 800cc06:	461e      	mov	r6, r3
 800cc08:	f101 0c14 	add.w	ip, r1, #20
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc12:	b299      	uxth	r1, r3
 800cc14:	fb02 6101 	mla	r1, r2, r1, r6
 800cc18:	0c1e      	lsrs	r6, r3, #16
 800cc1a:	0c0b      	lsrs	r3, r1, #16
 800cc1c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc20:	b289      	uxth	r1, r1
 800cc22:	3001      	adds	r0, #1
 800cc24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc28:	4285      	cmp	r5, r0
 800cc2a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc32:	dcec      	bgt.n	800cc0e <__multadd+0x12>
 800cc34:	b30e      	cbz	r6, 800cc7a <__multadd+0x7e>
 800cc36:	68a3      	ldr	r3, [r4, #8]
 800cc38:	42ab      	cmp	r3, r5
 800cc3a:	dc19      	bgt.n	800cc70 <__multadd+0x74>
 800cc3c:	6861      	ldr	r1, [r4, #4]
 800cc3e:	4638      	mov	r0, r7
 800cc40:	3101      	adds	r1, #1
 800cc42:	f7ff ff79 	bl	800cb38 <_Balloc>
 800cc46:	4680      	mov	r8, r0
 800cc48:	b928      	cbnz	r0, 800cc56 <__multadd+0x5a>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <__multadd+0x84>)
 800cc4e:	480d      	ldr	r0, [pc, #52]	; (800cc84 <__multadd+0x88>)
 800cc50:	21b5      	movs	r1, #181	; 0xb5
 800cc52:	f000 ff07 	bl	800da64 <__assert_func>
 800cc56:	6922      	ldr	r2, [r4, #16]
 800cc58:	3202      	adds	r2, #2
 800cc5a:	f104 010c 	add.w	r1, r4, #12
 800cc5e:	0092      	lsls	r2, r2, #2
 800cc60:	300c      	adds	r0, #12
 800cc62:	f7ff ff5b 	bl	800cb1c <memcpy>
 800cc66:	4621      	mov	r1, r4
 800cc68:	4638      	mov	r0, r7
 800cc6a:	f7ff ffa5 	bl	800cbb8 <_Bfree>
 800cc6e:	4644      	mov	r4, r8
 800cc70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc74:	3501      	adds	r5, #1
 800cc76:	615e      	str	r6, [r3, #20]
 800cc78:	6125      	str	r5, [r4, #16]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc80:	0800e7db 	.word	0x0800e7db
 800cc84:	0800e84c 	.word	0x0800e84c

0800cc88 <__hi0bits>:
 800cc88:	0c03      	lsrs	r3, r0, #16
 800cc8a:	041b      	lsls	r3, r3, #16
 800cc8c:	b9d3      	cbnz	r3, 800ccc4 <__hi0bits+0x3c>
 800cc8e:	0400      	lsls	r0, r0, #16
 800cc90:	2310      	movs	r3, #16
 800cc92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc96:	bf04      	itt	eq
 800cc98:	0200      	lsleq	r0, r0, #8
 800cc9a:	3308      	addeq	r3, #8
 800cc9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cca0:	bf04      	itt	eq
 800cca2:	0100      	lsleq	r0, r0, #4
 800cca4:	3304      	addeq	r3, #4
 800cca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccaa:	bf04      	itt	eq
 800ccac:	0080      	lsleq	r0, r0, #2
 800ccae:	3302      	addeq	r3, #2
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	db05      	blt.n	800ccc0 <__hi0bits+0x38>
 800ccb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ccb8:	f103 0301 	add.w	r3, r3, #1
 800ccbc:	bf08      	it	eq
 800ccbe:	2320      	moveq	r3, #32
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	4770      	bx	lr
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e7e4      	b.n	800cc92 <__hi0bits+0xa>

0800ccc8 <__lo0bits>:
 800ccc8:	6803      	ldr	r3, [r0, #0]
 800ccca:	f013 0207 	ands.w	r2, r3, #7
 800ccce:	4601      	mov	r1, r0
 800ccd0:	d00b      	beq.n	800ccea <__lo0bits+0x22>
 800ccd2:	07da      	lsls	r2, r3, #31
 800ccd4:	d423      	bmi.n	800cd1e <__lo0bits+0x56>
 800ccd6:	0798      	lsls	r0, r3, #30
 800ccd8:	bf49      	itett	mi
 800ccda:	085b      	lsrmi	r3, r3, #1
 800ccdc:	089b      	lsrpl	r3, r3, #2
 800ccde:	2001      	movmi	r0, #1
 800cce0:	600b      	strmi	r3, [r1, #0]
 800cce2:	bf5c      	itt	pl
 800cce4:	600b      	strpl	r3, [r1, #0]
 800cce6:	2002      	movpl	r0, #2
 800cce8:	4770      	bx	lr
 800ccea:	b298      	uxth	r0, r3
 800ccec:	b9a8      	cbnz	r0, 800cd1a <__lo0bits+0x52>
 800ccee:	0c1b      	lsrs	r3, r3, #16
 800ccf0:	2010      	movs	r0, #16
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	b90a      	cbnz	r2, 800ccfa <__lo0bits+0x32>
 800ccf6:	3008      	adds	r0, #8
 800ccf8:	0a1b      	lsrs	r3, r3, #8
 800ccfa:	071a      	lsls	r2, r3, #28
 800ccfc:	bf04      	itt	eq
 800ccfe:	091b      	lsreq	r3, r3, #4
 800cd00:	3004      	addeq	r0, #4
 800cd02:	079a      	lsls	r2, r3, #30
 800cd04:	bf04      	itt	eq
 800cd06:	089b      	lsreq	r3, r3, #2
 800cd08:	3002      	addeq	r0, #2
 800cd0a:	07da      	lsls	r2, r3, #31
 800cd0c:	d403      	bmi.n	800cd16 <__lo0bits+0x4e>
 800cd0e:	085b      	lsrs	r3, r3, #1
 800cd10:	f100 0001 	add.w	r0, r0, #1
 800cd14:	d005      	beq.n	800cd22 <__lo0bits+0x5a>
 800cd16:	600b      	str	r3, [r1, #0]
 800cd18:	4770      	bx	lr
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	e7e9      	b.n	800ccf2 <__lo0bits+0x2a>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	4770      	bx	lr
 800cd22:	2020      	movs	r0, #32
 800cd24:	4770      	bx	lr
	...

0800cd28 <__i2b>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	2101      	movs	r1, #1
 800cd2e:	f7ff ff03 	bl	800cb38 <_Balloc>
 800cd32:	4602      	mov	r2, r0
 800cd34:	b928      	cbnz	r0, 800cd42 <__i2b+0x1a>
 800cd36:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <__i2b+0x24>)
 800cd38:	4805      	ldr	r0, [pc, #20]	; (800cd50 <__i2b+0x28>)
 800cd3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd3e:	f000 fe91 	bl	800da64 <__assert_func>
 800cd42:	2301      	movs	r3, #1
 800cd44:	6144      	str	r4, [r0, #20]
 800cd46:	6103      	str	r3, [r0, #16]
 800cd48:	bd10      	pop	{r4, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0800e7db 	.word	0x0800e7db
 800cd50:	0800e84c 	.word	0x0800e84c

0800cd54 <__multiply>:
 800cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd58:	4691      	mov	r9, r2
 800cd5a:	690a      	ldr	r2, [r1, #16]
 800cd5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	bfb8      	it	lt
 800cd64:	460b      	movlt	r3, r1
 800cd66:	460c      	mov	r4, r1
 800cd68:	bfbc      	itt	lt
 800cd6a:	464c      	movlt	r4, r9
 800cd6c:	4699      	movlt	r9, r3
 800cd6e:	6927      	ldr	r7, [r4, #16]
 800cd70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd74:	68a3      	ldr	r3, [r4, #8]
 800cd76:	6861      	ldr	r1, [r4, #4]
 800cd78:	eb07 060a 	add.w	r6, r7, sl
 800cd7c:	42b3      	cmp	r3, r6
 800cd7e:	b085      	sub	sp, #20
 800cd80:	bfb8      	it	lt
 800cd82:	3101      	addlt	r1, #1
 800cd84:	f7ff fed8 	bl	800cb38 <_Balloc>
 800cd88:	b930      	cbnz	r0, 800cd98 <__multiply+0x44>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	4b44      	ldr	r3, [pc, #272]	; (800cea0 <__multiply+0x14c>)
 800cd8e:	4845      	ldr	r0, [pc, #276]	; (800cea4 <__multiply+0x150>)
 800cd90:	f240 115d 	movw	r1, #349	; 0x15d
 800cd94:	f000 fe66 	bl	800da64 <__assert_func>
 800cd98:	f100 0514 	add.w	r5, r0, #20
 800cd9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cda0:	462b      	mov	r3, r5
 800cda2:	2200      	movs	r2, #0
 800cda4:	4543      	cmp	r3, r8
 800cda6:	d321      	bcc.n	800cdec <__multiply+0x98>
 800cda8:	f104 0314 	add.w	r3, r4, #20
 800cdac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cdb0:	f109 0314 	add.w	r3, r9, #20
 800cdb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cdb8:	9202      	str	r2, [sp, #8]
 800cdba:	1b3a      	subs	r2, r7, r4
 800cdbc:	3a15      	subs	r2, #21
 800cdbe:	f022 0203 	bic.w	r2, r2, #3
 800cdc2:	3204      	adds	r2, #4
 800cdc4:	f104 0115 	add.w	r1, r4, #21
 800cdc8:	428f      	cmp	r7, r1
 800cdca:	bf38      	it	cc
 800cdcc:	2204      	movcc	r2, #4
 800cdce:	9201      	str	r2, [sp, #4]
 800cdd0:	9a02      	ldr	r2, [sp, #8]
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d80c      	bhi.n	800cdf2 <__multiply+0x9e>
 800cdd8:	2e00      	cmp	r6, #0
 800cdda:	dd03      	ble.n	800cde4 <__multiply+0x90>
 800cddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d05a      	beq.n	800ce9a <__multiply+0x146>
 800cde4:	6106      	str	r6, [r0, #16]
 800cde6:	b005      	add	sp, #20
 800cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdec:	f843 2b04 	str.w	r2, [r3], #4
 800cdf0:	e7d8      	b.n	800cda4 <__multiply+0x50>
 800cdf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdf6:	f1ba 0f00 	cmp.w	sl, #0
 800cdfa:	d024      	beq.n	800ce46 <__multiply+0xf2>
 800cdfc:	f104 0e14 	add.w	lr, r4, #20
 800ce00:	46a9      	mov	r9, r5
 800ce02:	f04f 0c00 	mov.w	ip, #0
 800ce06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce0a:	f8d9 1000 	ldr.w	r1, [r9]
 800ce0e:	fa1f fb82 	uxth.w	fp, r2
 800ce12:	b289      	uxth	r1, r1
 800ce14:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce20:	4461      	add	r1, ip
 800ce22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce26:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce2e:	b289      	uxth	r1, r1
 800ce30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce34:	4577      	cmp	r7, lr
 800ce36:	f849 1b04 	str.w	r1, [r9], #4
 800ce3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce3e:	d8e2      	bhi.n	800ce06 <__multiply+0xb2>
 800ce40:	9a01      	ldr	r2, [sp, #4]
 800ce42:	f845 c002 	str.w	ip, [r5, r2]
 800ce46:	9a03      	ldr	r2, [sp, #12]
 800ce48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	f1b9 0f00 	cmp.w	r9, #0
 800ce52:	d020      	beq.n	800ce96 <__multiply+0x142>
 800ce54:	6829      	ldr	r1, [r5, #0]
 800ce56:	f104 0c14 	add.w	ip, r4, #20
 800ce5a:	46ae      	mov	lr, r5
 800ce5c:	f04f 0a00 	mov.w	sl, #0
 800ce60:	f8bc b000 	ldrh.w	fp, [ip]
 800ce64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce68:	fb09 220b 	mla	r2, r9, fp, r2
 800ce6c:	4492      	add	sl, r2
 800ce6e:	b289      	uxth	r1, r1
 800ce70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce74:	f84e 1b04 	str.w	r1, [lr], #4
 800ce78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce7c:	f8be 1000 	ldrh.w	r1, [lr]
 800ce80:	0c12      	lsrs	r2, r2, #16
 800ce82:	fb09 1102 	mla	r1, r9, r2, r1
 800ce86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce8a:	4567      	cmp	r7, ip
 800ce8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce90:	d8e6      	bhi.n	800ce60 <__multiply+0x10c>
 800ce92:	9a01      	ldr	r2, [sp, #4]
 800ce94:	50a9      	str	r1, [r5, r2]
 800ce96:	3504      	adds	r5, #4
 800ce98:	e79a      	b.n	800cdd0 <__multiply+0x7c>
 800ce9a:	3e01      	subs	r6, #1
 800ce9c:	e79c      	b.n	800cdd8 <__multiply+0x84>
 800ce9e:	bf00      	nop
 800cea0:	0800e7db 	.word	0x0800e7db
 800cea4:	0800e84c 	.word	0x0800e84c

0800cea8 <__pow5mult>:
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceac:	4615      	mov	r5, r2
 800ceae:	f012 0203 	ands.w	r2, r2, #3
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	460f      	mov	r7, r1
 800ceb6:	d007      	beq.n	800cec8 <__pow5mult+0x20>
 800ceb8:	4c25      	ldr	r4, [pc, #148]	; (800cf50 <__pow5mult+0xa8>)
 800ceba:	3a01      	subs	r2, #1
 800cebc:	2300      	movs	r3, #0
 800cebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cec2:	f7ff fe9b 	bl	800cbfc <__multadd>
 800cec6:	4607      	mov	r7, r0
 800cec8:	10ad      	asrs	r5, r5, #2
 800ceca:	d03d      	beq.n	800cf48 <__pow5mult+0xa0>
 800cecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cece:	b97c      	cbnz	r4, 800cef0 <__pow5mult+0x48>
 800ced0:	2010      	movs	r0, #16
 800ced2:	f7ff fe1b 	bl	800cb0c <malloc>
 800ced6:	4602      	mov	r2, r0
 800ced8:	6270      	str	r0, [r6, #36]	; 0x24
 800ceda:	b928      	cbnz	r0, 800cee8 <__pow5mult+0x40>
 800cedc:	4b1d      	ldr	r3, [pc, #116]	; (800cf54 <__pow5mult+0xac>)
 800cede:	481e      	ldr	r0, [pc, #120]	; (800cf58 <__pow5mult+0xb0>)
 800cee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cee4:	f000 fdbe 	bl	800da64 <__assert_func>
 800cee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceec:	6004      	str	r4, [r0, #0]
 800ceee:	60c4      	str	r4, [r0, #12]
 800cef0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cef8:	b94c      	cbnz	r4, 800cf0e <__pow5mult+0x66>
 800cefa:	f240 2171 	movw	r1, #625	; 0x271
 800cefe:	4630      	mov	r0, r6
 800cf00:	f7ff ff12 	bl	800cd28 <__i2b>
 800cf04:	2300      	movs	r3, #0
 800cf06:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	f04f 0900 	mov.w	r9, #0
 800cf12:	07eb      	lsls	r3, r5, #31
 800cf14:	d50a      	bpl.n	800cf2c <__pow5mult+0x84>
 800cf16:	4639      	mov	r1, r7
 800cf18:	4622      	mov	r2, r4
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff ff1a 	bl	800cd54 <__multiply>
 800cf20:	4639      	mov	r1, r7
 800cf22:	4680      	mov	r8, r0
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7ff fe47 	bl	800cbb8 <_Bfree>
 800cf2a:	4647      	mov	r7, r8
 800cf2c:	106d      	asrs	r5, r5, #1
 800cf2e:	d00b      	beq.n	800cf48 <__pow5mult+0xa0>
 800cf30:	6820      	ldr	r0, [r4, #0]
 800cf32:	b938      	cbnz	r0, 800cf44 <__pow5mult+0x9c>
 800cf34:	4622      	mov	r2, r4
 800cf36:	4621      	mov	r1, r4
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f7ff ff0b 	bl	800cd54 <__multiply>
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	f8c0 9000 	str.w	r9, [r0]
 800cf44:	4604      	mov	r4, r0
 800cf46:	e7e4      	b.n	800cf12 <__pow5mult+0x6a>
 800cf48:	4638      	mov	r0, r7
 800cf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800e998 	.word	0x0800e998
 800cf54:	0800e769 	.word	0x0800e769
 800cf58:	0800e84c 	.word	0x0800e84c

0800cf5c <__lshift>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	460c      	mov	r4, r1
 800cf62:	6849      	ldr	r1, [r1, #4]
 800cf64:	6923      	ldr	r3, [r4, #16]
 800cf66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf6a:	68a3      	ldr	r3, [r4, #8]
 800cf6c:	4607      	mov	r7, r0
 800cf6e:	4691      	mov	r9, r2
 800cf70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf74:	f108 0601 	add.w	r6, r8, #1
 800cf78:	42b3      	cmp	r3, r6
 800cf7a:	db0b      	blt.n	800cf94 <__lshift+0x38>
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff fddb 	bl	800cb38 <_Balloc>
 800cf82:	4605      	mov	r5, r0
 800cf84:	b948      	cbnz	r0, 800cf9a <__lshift+0x3e>
 800cf86:	4602      	mov	r2, r0
 800cf88:	4b2a      	ldr	r3, [pc, #168]	; (800d034 <__lshift+0xd8>)
 800cf8a:	482b      	ldr	r0, [pc, #172]	; (800d038 <__lshift+0xdc>)
 800cf8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf90:	f000 fd68 	bl	800da64 <__assert_func>
 800cf94:	3101      	adds	r1, #1
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	e7ee      	b.n	800cf78 <__lshift+0x1c>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f100 0114 	add.w	r1, r0, #20
 800cfa0:	f100 0210 	add.w	r2, r0, #16
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	4553      	cmp	r3, sl
 800cfa8:	db37      	blt.n	800d01a <__lshift+0xbe>
 800cfaa:	6920      	ldr	r0, [r4, #16]
 800cfac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfb0:	f104 0314 	add.w	r3, r4, #20
 800cfb4:	f019 091f 	ands.w	r9, r9, #31
 800cfb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfc0:	d02f      	beq.n	800d022 <__lshift+0xc6>
 800cfc2:	f1c9 0e20 	rsb	lr, r9, #32
 800cfc6:	468a      	mov	sl, r1
 800cfc8:	f04f 0c00 	mov.w	ip, #0
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	fa02 f209 	lsl.w	r2, r2, r9
 800cfd2:	ea42 020c 	orr.w	r2, r2, ip
 800cfd6:	f84a 2b04 	str.w	r2, [sl], #4
 800cfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfde:	4298      	cmp	r0, r3
 800cfe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cfe4:	d8f2      	bhi.n	800cfcc <__lshift+0x70>
 800cfe6:	1b03      	subs	r3, r0, r4
 800cfe8:	3b15      	subs	r3, #21
 800cfea:	f023 0303 	bic.w	r3, r3, #3
 800cfee:	3304      	adds	r3, #4
 800cff0:	f104 0215 	add.w	r2, r4, #21
 800cff4:	4290      	cmp	r0, r2
 800cff6:	bf38      	it	cc
 800cff8:	2304      	movcc	r3, #4
 800cffa:	f841 c003 	str.w	ip, [r1, r3]
 800cffe:	f1bc 0f00 	cmp.w	ip, #0
 800d002:	d001      	beq.n	800d008 <__lshift+0xac>
 800d004:	f108 0602 	add.w	r6, r8, #2
 800d008:	3e01      	subs	r6, #1
 800d00a:	4638      	mov	r0, r7
 800d00c:	612e      	str	r6, [r5, #16]
 800d00e:	4621      	mov	r1, r4
 800d010:	f7ff fdd2 	bl	800cbb8 <_Bfree>
 800d014:	4628      	mov	r0, r5
 800d016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d01a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d01e:	3301      	adds	r3, #1
 800d020:	e7c1      	b.n	800cfa6 <__lshift+0x4a>
 800d022:	3904      	subs	r1, #4
 800d024:	f853 2b04 	ldr.w	r2, [r3], #4
 800d028:	f841 2f04 	str.w	r2, [r1, #4]!
 800d02c:	4298      	cmp	r0, r3
 800d02e:	d8f9      	bhi.n	800d024 <__lshift+0xc8>
 800d030:	e7ea      	b.n	800d008 <__lshift+0xac>
 800d032:	bf00      	nop
 800d034:	0800e7db 	.word	0x0800e7db
 800d038:	0800e84c 	.word	0x0800e84c

0800d03c <__mcmp>:
 800d03c:	b530      	push	{r4, r5, lr}
 800d03e:	6902      	ldr	r2, [r0, #16]
 800d040:	690c      	ldr	r4, [r1, #16]
 800d042:	1b12      	subs	r2, r2, r4
 800d044:	d10e      	bne.n	800d064 <__mcmp+0x28>
 800d046:	f100 0314 	add.w	r3, r0, #20
 800d04a:	3114      	adds	r1, #20
 800d04c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d05c:	42a5      	cmp	r5, r4
 800d05e:	d003      	beq.n	800d068 <__mcmp+0x2c>
 800d060:	d305      	bcc.n	800d06e <__mcmp+0x32>
 800d062:	2201      	movs	r2, #1
 800d064:	4610      	mov	r0, r2
 800d066:	bd30      	pop	{r4, r5, pc}
 800d068:	4283      	cmp	r3, r0
 800d06a:	d3f3      	bcc.n	800d054 <__mcmp+0x18>
 800d06c:	e7fa      	b.n	800d064 <__mcmp+0x28>
 800d06e:	f04f 32ff 	mov.w	r2, #4294967295
 800d072:	e7f7      	b.n	800d064 <__mcmp+0x28>

0800d074 <__mdiff>:
 800d074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	460c      	mov	r4, r1
 800d07a:	4606      	mov	r6, r0
 800d07c:	4611      	mov	r1, r2
 800d07e:	4620      	mov	r0, r4
 800d080:	4690      	mov	r8, r2
 800d082:	f7ff ffdb 	bl	800d03c <__mcmp>
 800d086:	1e05      	subs	r5, r0, #0
 800d088:	d110      	bne.n	800d0ac <__mdiff+0x38>
 800d08a:	4629      	mov	r1, r5
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff fd53 	bl	800cb38 <_Balloc>
 800d092:	b930      	cbnz	r0, 800d0a2 <__mdiff+0x2e>
 800d094:	4b3a      	ldr	r3, [pc, #232]	; (800d180 <__mdiff+0x10c>)
 800d096:	4602      	mov	r2, r0
 800d098:	f240 2132 	movw	r1, #562	; 0x232
 800d09c:	4839      	ldr	r0, [pc, #228]	; (800d184 <__mdiff+0x110>)
 800d09e:	f000 fce1 	bl	800da64 <__assert_func>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	bfa4      	itt	ge
 800d0ae:	4643      	movge	r3, r8
 800d0b0:	46a0      	movge	r8, r4
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d0b8:	bfa6      	itte	ge
 800d0ba:	461c      	movge	r4, r3
 800d0bc:	2500      	movge	r5, #0
 800d0be:	2501      	movlt	r5, #1
 800d0c0:	f7ff fd3a 	bl	800cb38 <_Balloc>
 800d0c4:	b920      	cbnz	r0, 800d0d0 <__mdiff+0x5c>
 800d0c6:	4b2e      	ldr	r3, [pc, #184]	; (800d180 <__mdiff+0x10c>)
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0ce:	e7e5      	b.n	800d09c <__mdiff+0x28>
 800d0d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0d4:	6926      	ldr	r6, [r4, #16]
 800d0d6:	60c5      	str	r5, [r0, #12]
 800d0d8:	f104 0914 	add.w	r9, r4, #20
 800d0dc:	f108 0514 	add.w	r5, r8, #20
 800d0e0:	f100 0e14 	add.w	lr, r0, #20
 800d0e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0ec:	f108 0210 	add.w	r2, r8, #16
 800d0f0:	46f2      	mov	sl, lr
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0fc:	fa1f f883 	uxth.w	r8, r3
 800d100:	fa11 f18b 	uxtah	r1, r1, fp
 800d104:	0c1b      	lsrs	r3, r3, #16
 800d106:	eba1 0808 	sub.w	r8, r1, r8
 800d10a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d10e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d112:	fa1f f888 	uxth.w	r8, r8
 800d116:	1419      	asrs	r1, r3, #16
 800d118:	454e      	cmp	r6, r9
 800d11a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d11e:	f84a 3b04 	str.w	r3, [sl], #4
 800d122:	d8e7      	bhi.n	800d0f4 <__mdiff+0x80>
 800d124:	1b33      	subs	r3, r6, r4
 800d126:	3b15      	subs	r3, #21
 800d128:	f023 0303 	bic.w	r3, r3, #3
 800d12c:	3304      	adds	r3, #4
 800d12e:	3415      	adds	r4, #21
 800d130:	42a6      	cmp	r6, r4
 800d132:	bf38      	it	cc
 800d134:	2304      	movcc	r3, #4
 800d136:	441d      	add	r5, r3
 800d138:	4473      	add	r3, lr
 800d13a:	469e      	mov	lr, r3
 800d13c:	462e      	mov	r6, r5
 800d13e:	4566      	cmp	r6, ip
 800d140:	d30e      	bcc.n	800d160 <__mdiff+0xec>
 800d142:	f10c 0203 	add.w	r2, ip, #3
 800d146:	1b52      	subs	r2, r2, r5
 800d148:	f022 0203 	bic.w	r2, r2, #3
 800d14c:	3d03      	subs	r5, #3
 800d14e:	45ac      	cmp	ip, r5
 800d150:	bf38      	it	cc
 800d152:	2200      	movcc	r2, #0
 800d154:	441a      	add	r2, r3
 800d156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d15a:	b17b      	cbz	r3, 800d17c <__mdiff+0x108>
 800d15c:	6107      	str	r7, [r0, #16]
 800d15e:	e7a3      	b.n	800d0a8 <__mdiff+0x34>
 800d160:	f856 8b04 	ldr.w	r8, [r6], #4
 800d164:	fa11 f288 	uxtah	r2, r1, r8
 800d168:	1414      	asrs	r4, r2, #16
 800d16a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d16e:	b292      	uxth	r2, r2
 800d170:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d174:	f84e 2b04 	str.w	r2, [lr], #4
 800d178:	1421      	asrs	r1, r4, #16
 800d17a:	e7e0      	b.n	800d13e <__mdiff+0xca>
 800d17c:	3f01      	subs	r7, #1
 800d17e:	e7ea      	b.n	800d156 <__mdiff+0xe2>
 800d180:	0800e7db 	.word	0x0800e7db
 800d184:	0800e84c 	.word	0x0800e84c

0800d188 <__d2b>:
 800d188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d18c:	4689      	mov	r9, r1
 800d18e:	2101      	movs	r1, #1
 800d190:	ec57 6b10 	vmov	r6, r7, d0
 800d194:	4690      	mov	r8, r2
 800d196:	f7ff fccf 	bl	800cb38 <_Balloc>
 800d19a:	4604      	mov	r4, r0
 800d19c:	b930      	cbnz	r0, 800d1ac <__d2b+0x24>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	4b25      	ldr	r3, [pc, #148]	; (800d238 <__d2b+0xb0>)
 800d1a2:	4826      	ldr	r0, [pc, #152]	; (800d23c <__d2b+0xb4>)
 800d1a4:	f240 310a 	movw	r1, #778	; 0x30a
 800d1a8:	f000 fc5c 	bl	800da64 <__assert_func>
 800d1ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1b4:	bb35      	cbnz	r5, 800d204 <__d2b+0x7c>
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	d028      	beq.n	800d20e <__d2b+0x86>
 800d1bc:	4668      	mov	r0, sp
 800d1be:	9600      	str	r6, [sp, #0]
 800d1c0:	f7ff fd82 	bl	800ccc8 <__lo0bits>
 800d1c4:	9900      	ldr	r1, [sp, #0]
 800d1c6:	b300      	cbz	r0, 800d20a <__d2b+0x82>
 800d1c8:	9a01      	ldr	r2, [sp, #4]
 800d1ca:	f1c0 0320 	rsb	r3, r0, #32
 800d1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d2:	430b      	orrs	r3, r1
 800d1d4:	40c2      	lsrs	r2, r0
 800d1d6:	6163      	str	r3, [r4, #20]
 800d1d8:	9201      	str	r2, [sp, #4]
 800d1da:	9b01      	ldr	r3, [sp, #4]
 800d1dc:	61a3      	str	r3, [r4, #24]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf14      	ite	ne
 800d1e2:	2202      	movne	r2, #2
 800d1e4:	2201      	moveq	r2, #1
 800d1e6:	6122      	str	r2, [r4, #16]
 800d1e8:	b1d5      	cbz	r5, 800d220 <__d2b+0x98>
 800d1ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1ee:	4405      	add	r5, r0
 800d1f0:	f8c9 5000 	str.w	r5, [r9]
 800d1f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1f8:	f8c8 0000 	str.w	r0, [r8]
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	b003      	add	sp, #12
 800d200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d208:	e7d5      	b.n	800d1b6 <__d2b+0x2e>
 800d20a:	6161      	str	r1, [r4, #20]
 800d20c:	e7e5      	b.n	800d1da <__d2b+0x52>
 800d20e:	a801      	add	r0, sp, #4
 800d210:	f7ff fd5a 	bl	800ccc8 <__lo0bits>
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	6163      	str	r3, [r4, #20]
 800d218:	2201      	movs	r2, #1
 800d21a:	6122      	str	r2, [r4, #16]
 800d21c:	3020      	adds	r0, #32
 800d21e:	e7e3      	b.n	800d1e8 <__d2b+0x60>
 800d220:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d228:	f8c9 0000 	str.w	r0, [r9]
 800d22c:	6918      	ldr	r0, [r3, #16]
 800d22e:	f7ff fd2b 	bl	800cc88 <__hi0bits>
 800d232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d236:	e7df      	b.n	800d1f8 <__d2b+0x70>
 800d238:	0800e7db 	.word	0x0800e7db
 800d23c:	0800e84c 	.word	0x0800e84c

0800d240 <_calloc_r>:
 800d240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d242:	fba1 2402 	umull	r2, r4, r1, r2
 800d246:	b94c      	cbnz	r4, 800d25c <_calloc_r+0x1c>
 800d248:	4611      	mov	r1, r2
 800d24a:	9201      	str	r2, [sp, #4]
 800d24c:	f000 f87a 	bl	800d344 <_malloc_r>
 800d250:	9a01      	ldr	r2, [sp, #4]
 800d252:	4605      	mov	r5, r0
 800d254:	b930      	cbnz	r0, 800d264 <_calloc_r+0x24>
 800d256:	4628      	mov	r0, r5
 800d258:	b003      	add	sp, #12
 800d25a:	bd30      	pop	{r4, r5, pc}
 800d25c:	220c      	movs	r2, #12
 800d25e:	6002      	str	r2, [r0, #0]
 800d260:	2500      	movs	r5, #0
 800d262:	e7f8      	b.n	800d256 <_calloc_r+0x16>
 800d264:	4621      	mov	r1, r4
 800d266:	f7fd fdbf 	bl	800ade8 <memset>
 800d26a:	e7f4      	b.n	800d256 <_calloc_r+0x16>

0800d26c <_free_r>:
 800d26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d26e:	2900      	cmp	r1, #0
 800d270:	d044      	beq.n	800d2fc <_free_r+0x90>
 800d272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d276:	9001      	str	r0, [sp, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f1a1 0404 	sub.w	r4, r1, #4
 800d27e:	bfb8      	it	lt
 800d280:	18e4      	addlt	r4, r4, r3
 800d282:	f000 fc8f 	bl	800dba4 <__malloc_lock>
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <_free_r+0x94>)
 800d288:	9801      	ldr	r0, [sp, #4]
 800d28a:	6813      	ldr	r3, [r2, #0]
 800d28c:	b933      	cbnz	r3, 800d29c <_free_r+0x30>
 800d28e:	6063      	str	r3, [r4, #4]
 800d290:	6014      	str	r4, [r2, #0]
 800d292:	b003      	add	sp, #12
 800d294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d298:	f000 bc8a 	b.w	800dbb0 <__malloc_unlock>
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	d908      	bls.n	800d2b2 <_free_r+0x46>
 800d2a0:	6825      	ldr	r5, [r4, #0]
 800d2a2:	1961      	adds	r1, r4, r5
 800d2a4:	428b      	cmp	r3, r1
 800d2a6:	bf01      	itttt	eq
 800d2a8:	6819      	ldreq	r1, [r3, #0]
 800d2aa:	685b      	ldreq	r3, [r3, #4]
 800d2ac:	1949      	addeq	r1, r1, r5
 800d2ae:	6021      	streq	r1, [r4, #0]
 800d2b0:	e7ed      	b.n	800d28e <_free_r+0x22>
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b10b      	cbz	r3, 800d2bc <_free_r+0x50>
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d9fa      	bls.n	800d2b2 <_free_r+0x46>
 800d2bc:	6811      	ldr	r1, [r2, #0]
 800d2be:	1855      	adds	r5, r2, r1
 800d2c0:	42a5      	cmp	r5, r4
 800d2c2:	d10b      	bne.n	800d2dc <_free_r+0x70>
 800d2c4:	6824      	ldr	r4, [r4, #0]
 800d2c6:	4421      	add	r1, r4
 800d2c8:	1854      	adds	r4, r2, r1
 800d2ca:	42a3      	cmp	r3, r4
 800d2cc:	6011      	str	r1, [r2, #0]
 800d2ce:	d1e0      	bne.n	800d292 <_free_r+0x26>
 800d2d0:	681c      	ldr	r4, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	6053      	str	r3, [r2, #4]
 800d2d6:	4421      	add	r1, r4
 800d2d8:	6011      	str	r1, [r2, #0]
 800d2da:	e7da      	b.n	800d292 <_free_r+0x26>
 800d2dc:	d902      	bls.n	800d2e4 <_free_r+0x78>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	6003      	str	r3, [r0, #0]
 800d2e2:	e7d6      	b.n	800d292 <_free_r+0x26>
 800d2e4:	6825      	ldr	r5, [r4, #0]
 800d2e6:	1961      	adds	r1, r4, r5
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf04      	itt	eq
 800d2ec:	6819      	ldreq	r1, [r3, #0]
 800d2ee:	685b      	ldreq	r3, [r3, #4]
 800d2f0:	6063      	str	r3, [r4, #4]
 800d2f2:	bf04      	itt	eq
 800d2f4:	1949      	addeq	r1, r1, r5
 800d2f6:	6021      	streq	r1, [r4, #0]
 800d2f8:	6054      	str	r4, [r2, #4]
 800d2fa:	e7ca      	b.n	800d292 <_free_r+0x26>
 800d2fc:	b003      	add	sp, #12
 800d2fe:	bd30      	pop	{r4, r5, pc}
 800d300:	20003204 	.word	0x20003204

0800d304 <sbrk_aligned>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	4e0e      	ldr	r6, [pc, #56]	; (800d340 <sbrk_aligned+0x3c>)
 800d308:	460c      	mov	r4, r1
 800d30a:	6831      	ldr	r1, [r6, #0]
 800d30c:	4605      	mov	r5, r0
 800d30e:	b911      	cbnz	r1, 800d316 <sbrk_aligned+0x12>
 800d310:	f000 fb42 	bl	800d998 <_sbrk_r>
 800d314:	6030      	str	r0, [r6, #0]
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	f000 fb3d 	bl	800d998 <_sbrk_r>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d00a      	beq.n	800d338 <sbrk_aligned+0x34>
 800d322:	1cc4      	adds	r4, r0, #3
 800d324:	f024 0403 	bic.w	r4, r4, #3
 800d328:	42a0      	cmp	r0, r4
 800d32a:	d007      	beq.n	800d33c <sbrk_aligned+0x38>
 800d32c:	1a21      	subs	r1, r4, r0
 800d32e:	4628      	mov	r0, r5
 800d330:	f000 fb32 	bl	800d998 <_sbrk_r>
 800d334:	3001      	adds	r0, #1
 800d336:	d101      	bne.n	800d33c <sbrk_aligned+0x38>
 800d338:	f04f 34ff 	mov.w	r4, #4294967295
 800d33c:	4620      	mov	r0, r4
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	20003208 	.word	0x20003208

0800d344 <_malloc_r>:
 800d344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d348:	1ccd      	adds	r5, r1, #3
 800d34a:	f025 0503 	bic.w	r5, r5, #3
 800d34e:	3508      	adds	r5, #8
 800d350:	2d0c      	cmp	r5, #12
 800d352:	bf38      	it	cc
 800d354:	250c      	movcc	r5, #12
 800d356:	2d00      	cmp	r5, #0
 800d358:	4607      	mov	r7, r0
 800d35a:	db01      	blt.n	800d360 <_malloc_r+0x1c>
 800d35c:	42a9      	cmp	r1, r5
 800d35e:	d905      	bls.n	800d36c <_malloc_r+0x28>
 800d360:	230c      	movs	r3, #12
 800d362:	603b      	str	r3, [r7, #0]
 800d364:	2600      	movs	r6, #0
 800d366:	4630      	mov	r0, r6
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36c:	4e2e      	ldr	r6, [pc, #184]	; (800d428 <_malloc_r+0xe4>)
 800d36e:	f000 fc19 	bl	800dba4 <__malloc_lock>
 800d372:	6833      	ldr	r3, [r6, #0]
 800d374:	461c      	mov	r4, r3
 800d376:	bb34      	cbnz	r4, 800d3c6 <_malloc_r+0x82>
 800d378:	4629      	mov	r1, r5
 800d37a:	4638      	mov	r0, r7
 800d37c:	f7ff ffc2 	bl	800d304 <sbrk_aligned>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	4604      	mov	r4, r0
 800d384:	d14d      	bne.n	800d422 <_malloc_r+0xde>
 800d386:	6834      	ldr	r4, [r6, #0]
 800d388:	4626      	mov	r6, r4
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	d140      	bne.n	800d410 <_malloc_r+0xcc>
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	4631      	mov	r1, r6
 800d392:	4638      	mov	r0, r7
 800d394:	eb04 0803 	add.w	r8, r4, r3
 800d398:	f000 fafe 	bl	800d998 <_sbrk_r>
 800d39c:	4580      	cmp	r8, r0
 800d39e:	d13a      	bne.n	800d416 <_malloc_r+0xd2>
 800d3a0:	6821      	ldr	r1, [r4, #0]
 800d3a2:	3503      	adds	r5, #3
 800d3a4:	1a6d      	subs	r5, r5, r1
 800d3a6:	f025 0503 	bic.w	r5, r5, #3
 800d3aa:	3508      	adds	r5, #8
 800d3ac:	2d0c      	cmp	r5, #12
 800d3ae:	bf38      	it	cc
 800d3b0:	250c      	movcc	r5, #12
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f7ff ffa5 	bl	800d304 <sbrk_aligned>
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	d02b      	beq.n	800d416 <_malloc_r+0xd2>
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	442b      	add	r3, r5
 800d3c2:	6023      	str	r3, [r4, #0]
 800d3c4:	e00e      	b.n	800d3e4 <_malloc_r+0xa0>
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	1b52      	subs	r2, r2, r5
 800d3ca:	d41e      	bmi.n	800d40a <_malloc_r+0xc6>
 800d3cc:	2a0b      	cmp	r2, #11
 800d3ce:	d916      	bls.n	800d3fe <_malloc_r+0xba>
 800d3d0:	1961      	adds	r1, r4, r5
 800d3d2:	42a3      	cmp	r3, r4
 800d3d4:	6025      	str	r5, [r4, #0]
 800d3d6:	bf18      	it	ne
 800d3d8:	6059      	strne	r1, [r3, #4]
 800d3da:	6863      	ldr	r3, [r4, #4]
 800d3dc:	bf08      	it	eq
 800d3de:	6031      	streq	r1, [r6, #0]
 800d3e0:	5162      	str	r2, [r4, r5]
 800d3e2:	604b      	str	r3, [r1, #4]
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	f104 060b 	add.w	r6, r4, #11
 800d3ea:	f000 fbe1 	bl	800dbb0 <__malloc_unlock>
 800d3ee:	f026 0607 	bic.w	r6, r6, #7
 800d3f2:	1d23      	adds	r3, r4, #4
 800d3f4:	1af2      	subs	r2, r6, r3
 800d3f6:	d0b6      	beq.n	800d366 <_malloc_r+0x22>
 800d3f8:	1b9b      	subs	r3, r3, r6
 800d3fa:	50a3      	str	r3, [r4, r2]
 800d3fc:	e7b3      	b.n	800d366 <_malloc_r+0x22>
 800d3fe:	6862      	ldr	r2, [r4, #4]
 800d400:	42a3      	cmp	r3, r4
 800d402:	bf0c      	ite	eq
 800d404:	6032      	streq	r2, [r6, #0]
 800d406:	605a      	strne	r2, [r3, #4]
 800d408:	e7ec      	b.n	800d3e4 <_malloc_r+0xa0>
 800d40a:	4623      	mov	r3, r4
 800d40c:	6864      	ldr	r4, [r4, #4]
 800d40e:	e7b2      	b.n	800d376 <_malloc_r+0x32>
 800d410:	4634      	mov	r4, r6
 800d412:	6876      	ldr	r6, [r6, #4]
 800d414:	e7b9      	b.n	800d38a <_malloc_r+0x46>
 800d416:	230c      	movs	r3, #12
 800d418:	603b      	str	r3, [r7, #0]
 800d41a:	4638      	mov	r0, r7
 800d41c:	f000 fbc8 	bl	800dbb0 <__malloc_unlock>
 800d420:	e7a1      	b.n	800d366 <_malloc_r+0x22>
 800d422:	6025      	str	r5, [r4, #0]
 800d424:	e7de      	b.n	800d3e4 <_malloc_r+0xa0>
 800d426:	bf00      	nop
 800d428:	20003204 	.word	0x20003204

0800d42c <__ssputs_r>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	688e      	ldr	r6, [r1, #8]
 800d432:	429e      	cmp	r6, r3
 800d434:	4682      	mov	sl, r0
 800d436:	460c      	mov	r4, r1
 800d438:	4690      	mov	r8, r2
 800d43a:	461f      	mov	r7, r3
 800d43c:	d838      	bhi.n	800d4b0 <__ssputs_r+0x84>
 800d43e:	898a      	ldrh	r2, [r1, #12]
 800d440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d444:	d032      	beq.n	800d4ac <__ssputs_r+0x80>
 800d446:	6825      	ldr	r5, [r4, #0]
 800d448:	6909      	ldr	r1, [r1, #16]
 800d44a:	eba5 0901 	sub.w	r9, r5, r1
 800d44e:	6965      	ldr	r5, [r4, #20]
 800d450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d458:	3301      	adds	r3, #1
 800d45a:	444b      	add	r3, r9
 800d45c:	106d      	asrs	r5, r5, #1
 800d45e:	429d      	cmp	r5, r3
 800d460:	bf38      	it	cc
 800d462:	461d      	movcc	r5, r3
 800d464:	0553      	lsls	r3, r2, #21
 800d466:	d531      	bpl.n	800d4cc <__ssputs_r+0xa0>
 800d468:	4629      	mov	r1, r5
 800d46a:	f7ff ff6b 	bl	800d344 <_malloc_r>
 800d46e:	4606      	mov	r6, r0
 800d470:	b950      	cbnz	r0, 800d488 <__ssputs_r+0x5c>
 800d472:	230c      	movs	r3, #12
 800d474:	f8ca 3000 	str.w	r3, [sl]
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d488:	6921      	ldr	r1, [r4, #16]
 800d48a:	464a      	mov	r2, r9
 800d48c:	f7ff fb46 	bl	800cb1c <memcpy>
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	6126      	str	r6, [r4, #16]
 800d49e:	6165      	str	r5, [r4, #20]
 800d4a0:	444e      	add	r6, r9
 800d4a2:	eba5 0509 	sub.w	r5, r5, r9
 800d4a6:	6026      	str	r6, [r4, #0]
 800d4a8:	60a5      	str	r5, [r4, #8]
 800d4aa:	463e      	mov	r6, r7
 800d4ac:	42be      	cmp	r6, r7
 800d4ae:	d900      	bls.n	800d4b2 <__ssputs_r+0x86>
 800d4b0:	463e      	mov	r6, r7
 800d4b2:	6820      	ldr	r0, [r4, #0]
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	4641      	mov	r1, r8
 800d4b8:	f000 fb5a 	bl	800db70 <memmove>
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	1b9b      	subs	r3, r3, r6
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	4433      	add	r3, r6
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e7db      	b.n	800d484 <__ssputs_r+0x58>
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	f000 fb75 	bl	800dbbc <_realloc_r>
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d1e1      	bne.n	800d49c <__ssputs_r+0x70>
 800d4d8:	6921      	ldr	r1, [r4, #16]
 800d4da:	4650      	mov	r0, sl
 800d4dc:	f7ff fec6 	bl	800d26c <_free_r>
 800d4e0:	e7c7      	b.n	800d472 <__ssputs_r+0x46>
	...

0800d4e4 <_svfiprintf_r>:
 800d4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e8:	4698      	mov	r8, r3
 800d4ea:	898b      	ldrh	r3, [r1, #12]
 800d4ec:	061b      	lsls	r3, r3, #24
 800d4ee:	b09d      	sub	sp, #116	; 0x74
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	d50e      	bpl.n	800d516 <_svfiprintf_r+0x32>
 800d4f8:	690b      	ldr	r3, [r1, #16]
 800d4fa:	b963      	cbnz	r3, 800d516 <_svfiprintf_r+0x32>
 800d4fc:	2140      	movs	r1, #64	; 0x40
 800d4fe:	f7ff ff21 	bl	800d344 <_malloc_r>
 800d502:	6028      	str	r0, [r5, #0]
 800d504:	6128      	str	r0, [r5, #16]
 800d506:	b920      	cbnz	r0, 800d512 <_svfiprintf_r+0x2e>
 800d508:	230c      	movs	r3, #12
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	e0d1      	b.n	800d6b6 <_svfiprintf_r+0x1d2>
 800d512:	2340      	movs	r3, #64	; 0x40
 800d514:	616b      	str	r3, [r5, #20]
 800d516:	2300      	movs	r3, #0
 800d518:	9309      	str	r3, [sp, #36]	; 0x24
 800d51a:	2320      	movs	r3, #32
 800d51c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d520:	f8cd 800c 	str.w	r8, [sp, #12]
 800d524:	2330      	movs	r3, #48	; 0x30
 800d526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d6d0 <_svfiprintf_r+0x1ec>
 800d52a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d52e:	f04f 0901 	mov.w	r9, #1
 800d532:	4623      	mov	r3, r4
 800d534:	469a      	mov	sl, r3
 800d536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d53a:	b10a      	cbz	r2, 800d540 <_svfiprintf_r+0x5c>
 800d53c:	2a25      	cmp	r2, #37	; 0x25
 800d53e:	d1f9      	bne.n	800d534 <_svfiprintf_r+0x50>
 800d540:	ebba 0b04 	subs.w	fp, sl, r4
 800d544:	d00b      	beq.n	800d55e <_svfiprintf_r+0x7a>
 800d546:	465b      	mov	r3, fp
 800d548:	4622      	mov	r2, r4
 800d54a:	4629      	mov	r1, r5
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7ff ff6d 	bl	800d42c <__ssputs_r>
 800d552:	3001      	adds	r0, #1
 800d554:	f000 80aa 	beq.w	800d6ac <_svfiprintf_r+0x1c8>
 800d558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d55a:	445a      	add	r2, fp
 800d55c:	9209      	str	r2, [sp, #36]	; 0x24
 800d55e:	f89a 3000 	ldrb.w	r3, [sl]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 80a2 	beq.w	800d6ac <_svfiprintf_r+0x1c8>
 800d568:	2300      	movs	r3, #0
 800d56a:	f04f 32ff 	mov.w	r2, #4294967295
 800d56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d572:	f10a 0a01 	add.w	sl, sl, #1
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	9307      	str	r3, [sp, #28]
 800d57a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d57e:	931a      	str	r3, [sp, #104]	; 0x68
 800d580:	4654      	mov	r4, sl
 800d582:	2205      	movs	r2, #5
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	4851      	ldr	r0, [pc, #324]	; (800d6d0 <_svfiprintf_r+0x1ec>)
 800d58a:	f7f2 fe49 	bl	8000220 <memchr>
 800d58e:	9a04      	ldr	r2, [sp, #16]
 800d590:	b9d8      	cbnz	r0, 800d5ca <_svfiprintf_r+0xe6>
 800d592:	06d0      	lsls	r0, r2, #27
 800d594:	bf44      	itt	mi
 800d596:	2320      	movmi	r3, #32
 800d598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d59c:	0711      	lsls	r1, r2, #28
 800d59e:	bf44      	itt	mi
 800d5a0:	232b      	movmi	r3, #43	; 0x2b
 800d5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ac:	d015      	beq.n	800d5da <_svfiprintf_r+0xf6>
 800d5ae:	9a07      	ldr	r2, [sp, #28]
 800d5b0:	4654      	mov	r4, sl
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f04f 0c0a 	mov.w	ip, #10
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5be:	3b30      	subs	r3, #48	; 0x30
 800d5c0:	2b09      	cmp	r3, #9
 800d5c2:	d94e      	bls.n	800d662 <_svfiprintf_r+0x17e>
 800d5c4:	b1b0      	cbz	r0, 800d5f4 <_svfiprintf_r+0x110>
 800d5c6:	9207      	str	r2, [sp, #28]
 800d5c8:	e014      	b.n	800d5f4 <_svfiprintf_r+0x110>
 800d5ca:	eba0 0308 	sub.w	r3, r0, r8
 800d5ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	46a2      	mov	sl, r4
 800d5d8:	e7d2      	b.n	800d580 <_svfiprintf_r+0x9c>
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	1d19      	adds	r1, r3, #4
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	9103      	str	r1, [sp, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bfbb      	ittet	lt
 800d5e6:	425b      	neglt	r3, r3
 800d5e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d5ec:	9307      	strge	r3, [sp, #28]
 800d5ee:	9307      	strlt	r3, [sp, #28]
 800d5f0:	bfb8      	it	lt
 800d5f2:	9204      	strlt	r2, [sp, #16]
 800d5f4:	7823      	ldrb	r3, [r4, #0]
 800d5f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d5f8:	d10c      	bne.n	800d614 <_svfiprintf_r+0x130>
 800d5fa:	7863      	ldrb	r3, [r4, #1]
 800d5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5fe:	d135      	bne.n	800d66c <_svfiprintf_r+0x188>
 800d600:	9b03      	ldr	r3, [sp, #12]
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	9203      	str	r2, [sp, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	bfb8      	it	lt
 800d60c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d610:	3402      	adds	r4, #2
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6e0 <_svfiprintf_r+0x1fc>
 800d618:	7821      	ldrb	r1, [r4, #0]
 800d61a:	2203      	movs	r2, #3
 800d61c:	4650      	mov	r0, sl
 800d61e:	f7f2 fdff 	bl	8000220 <memchr>
 800d622:	b140      	cbz	r0, 800d636 <_svfiprintf_r+0x152>
 800d624:	2340      	movs	r3, #64	; 0x40
 800d626:	eba0 000a 	sub.w	r0, r0, sl
 800d62a:	fa03 f000 	lsl.w	r0, r3, r0
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	4303      	orrs	r3, r0
 800d632:	3401      	adds	r4, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63a:	4826      	ldr	r0, [pc, #152]	; (800d6d4 <_svfiprintf_r+0x1f0>)
 800d63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d640:	2206      	movs	r2, #6
 800d642:	f7f2 fded 	bl	8000220 <memchr>
 800d646:	2800      	cmp	r0, #0
 800d648:	d038      	beq.n	800d6bc <_svfiprintf_r+0x1d8>
 800d64a:	4b23      	ldr	r3, [pc, #140]	; (800d6d8 <_svfiprintf_r+0x1f4>)
 800d64c:	bb1b      	cbnz	r3, 800d696 <_svfiprintf_r+0x1b2>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	3307      	adds	r3, #7
 800d652:	f023 0307 	bic.w	r3, r3, #7
 800d656:	3308      	adds	r3, #8
 800d658:	9303      	str	r3, [sp, #12]
 800d65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65c:	4433      	add	r3, r6
 800d65e:	9309      	str	r3, [sp, #36]	; 0x24
 800d660:	e767      	b.n	800d532 <_svfiprintf_r+0x4e>
 800d662:	fb0c 3202 	mla	r2, ip, r2, r3
 800d666:	460c      	mov	r4, r1
 800d668:	2001      	movs	r0, #1
 800d66a:	e7a5      	b.n	800d5b8 <_svfiprintf_r+0xd4>
 800d66c:	2300      	movs	r3, #0
 800d66e:	3401      	adds	r4, #1
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	4619      	mov	r1, r3
 800d674:	f04f 0c0a 	mov.w	ip, #10
 800d678:	4620      	mov	r0, r4
 800d67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d67e:	3a30      	subs	r2, #48	; 0x30
 800d680:	2a09      	cmp	r2, #9
 800d682:	d903      	bls.n	800d68c <_svfiprintf_r+0x1a8>
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0c5      	beq.n	800d614 <_svfiprintf_r+0x130>
 800d688:	9105      	str	r1, [sp, #20]
 800d68a:	e7c3      	b.n	800d614 <_svfiprintf_r+0x130>
 800d68c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d690:	4604      	mov	r4, r0
 800d692:	2301      	movs	r3, #1
 800d694:	e7f0      	b.n	800d678 <_svfiprintf_r+0x194>
 800d696:	ab03      	add	r3, sp, #12
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	462a      	mov	r2, r5
 800d69c:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <_svfiprintf_r+0x1f8>)
 800d69e:	a904      	add	r1, sp, #16
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7fd fc49 	bl	800af38 <_printf_float>
 800d6a6:	1c42      	adds	r2, r0, #1
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	d1d6      	bne.n	800d65a <_svfiprintf_r+0x176>
 800d6ac:	89ab      	ldrh	r3, [r5, #12]
 800d6ae:	065b      	lsls	r3, r3, #25
 800d6b0:	f53f af2c 	bmi.w	800d50c <_svfiprintf_r+0x28>
 800d6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6b6:	b01d      	add	sp, #116	; 0x74
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	ab03      	add	r3, sp, #12
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	462a      	mov	r2, r5
 800d6c2:	4b06      	ldr	r3, [pc, #24]	; (800d6dc <_svfiprintf_r+0x1f8>)
 800d6c4:	a904      	add	r1, sp, #16
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f7fd feda 	bl	800b480 <_printf_i>
 800d6cc:	e7eb      	b.n	800d6a6 <_svfiprintf_r+0x1c2>
 800d6ce:	bf00      	nop
 800d6d0:	0800e9a4 	.word	0x0800e9a4
 800d6d4:	0800e9ae 	.word	0x0800e9ae
 800d6d8:	0800af39 	.word	0x0800af39
 800d6dc:	0800d42d 	.word	0x0800d42d
 800d6e0:	0800e9aa 	.word	0x0800e9aa

0800d6e4 <__sfputc_r>:
 800d6e4:	6893      	ldr	r3, [r2, #8]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	b410      	push	{r4}
 800d6ec:	6093      	str	r3, [r2, #8]
 800d6ee:	da08      	bge.n	800d702 <__sfputc_r+0x1e>
 800d6f0:	6994      	ldr	r4, [r2, #24]
 800d6f2:	42a3      	cmp	r3, r4
 800d6f4:	db01      	blt.n	800d6fa <__sfputc_r+0x16>
 800d6f6:	290a      	cmp	r1, #10
 800d6f8:	d103      	bne.n	800d702 <__sfputc_r+0x1e>
 800d6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6fe:	f7fe b8a7 	b.w	800b850 <__swbuf_r>
 800d702:	6813      	ldr	r3, [r2, #0]
 800d704:	1c58      	adds	r0, r3, #1
 800d706:	6010      	str	r0, [r2, #0]
 800d708:	7019      	strb	r1, [r3, #0]
 800d70a:	4608      	mov	r0, r1
 800d70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <__sfputs_r>:
 800d712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d714:	4606      	mov	r6, r0
 800d716:	460f      	mov	r7, r1
 800d718:	4614      	mov	r4, r2
 800d71a:	18d5      	adds	r5, r2, r3
 800d71c:	42ac      	cmp	r4, r5
 800d71e:	d101      	bne.n	800d724 <__sfputs_r+0x12>
 800d720:	2000      	movs	r0, #0
 800d722:	e007      	b.n	800d734 <__sfputs_r+0x22>
 800d724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d728:	463a      	mov	r2, r7
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ffda 	bl	800d6e4 <__sfputc_r>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d1f3      	bne.n	800d71c <__sfputs_r+0xa>
 800d734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d738 <_vfiprintf_r>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	460d      	mov	r5, r1
 800d73e:	b09d      	sub	sp, #116	; 0x74
 800d740:	4614      	mov	r4, r2
 800d742:	4698      	mov	r8, r3
 800d744:	4606      	mov	r6, r0
 800d746:	b118      	cbz	r0, 800d750 <_vfiprintf_r+0x18>
 800d748:	6983      	ldr	r3, [r0, #24]
 800d74a:	b90b      	cbnz	r3, 800d750 <_vfiprintf_r+0x18>
 800d74c:	f7ff f8d4 	bl	800c8f8 <__sinit>
 800d750:	4b89      	ldr	r3, [pc, #548]	; (800d978 <_vfiprintf_r+0x240>)
 800d752:	429d      	cmp	r5, r3
 800d754:	d11b      	bne.n	800d78e <_vfiprintf_r+0x56>
 800d756:	6875      	ldr	r5, [r6, #4]
 800d758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d75a:	07d9      	lsls	r1, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_vfiprintf_r+0x32>
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	059a      	lsls	r2, r3, #22
 800d762:	d402      	bmi.n	800d76a <_vfiprintf_r+0x32>
 800d764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d766:	f7ff f96a 	bl	800ca3e <__retarget_lock_acquire_recursive>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	071b      	lsls	r3, r3, #28
 800d76e:	d501      	bpl.n	800d774 <_vfiprintf_r+0x3c>
 800d770:	692b      	ldr	r3, [r5, #16]
 800d772:	b9eb      	cbnz	r3, 800d7b0 <_vfiprintf_r+0x78>
 800d774:	4629      	mov	r1, r5
 800d776:	4630      	mov	r0, r6
 800d778:	f7fe f8bc 	bl	800b8f4 <__swsetup_r>
 800d77c:	b1c0      	cbz	r0, 800d7b0 <_vfiprintf_r+0x78>
 800d77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d780:	07dc      	lsls	r4, r3, #31
 800d782:	d50e      	bpl.n	800d7a2 <_vfiprintf_r+0x6a>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	b01d      	add	sp, #116	; 0x74
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	4b7b      	ldr	r3, [pc, #492]	; (800d97c <_vfiprintf_r+0x244>)
 800d790:	429d      	cmp	r5, r3
 800d792:	d101      	bne.n	800d798 <_vfiprintf_r+0x60>
 800d794:	68b5      	ldr	r5, [r6, #8]
 800d796:	e7df      	b.n	800d758 <_vfiprintf_r+0x20>
 800d798:	4b79      	ldr	r3, [pc, #484]	; (800d980 <_vfiprintf_r+0x248>)
 800d79a:	429d      	cmp	r5, r3
 800d79c:	bf08      	it	eq
 800d79e:	68f5      	ldreq	r5, [r6, #12]
 800d7a0:	e7da      	b.n	800d758 <_vfiprintf_r+0x20>
 800d7a2:	89ab      	ldrh	r3, [r5, #12]
 800d7a4:	0598      	lsls	r0, r3, #22
 800d7a6:	d4ed      	bmi.n	800d784 <_vfiprintf_r+0x4c>
 800d7a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7aa:	f7ff f949 	bl	800ca40 <__retarget_lock_release_recursive>
 800d7ae:	e7e9      	b.n	800d784 <_vfiprintf_r+0x4c>
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7be:	2330      	movs	r3, #48	; 0x30
 800d7c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d984 <_vfiprintf_r+0x24c>
 800d7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7c8:	f04f 0901 	mov.w	r9, #1
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	469a      	mov	sl, r3
 800d7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7d4:	b10a      	cbz	r2, 800d7da <_vfiprintf_r+0xa2>
 800d7d6:	2a25      	cmp	r2, #37	; 0x25
 800d7d8:	d1f9      	bne.n	800d7ce <_vfiprintf_r+0x96>
 800d7da:	ebba 0b04 	subs.w	fp, sl, r4
 800d7de:	d00b      	beq.n	800d7f8 <_vfiprintf_r+0xc0>
 800d7e0:	465b      	mov	r3, fp
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f7ff ff93 	bl	800d712 <__sfputs_r>
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	f000 80aa 	beq.w	800d946 <_vfiprintf_r+0x20e>
 800d7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f4:	445a      	add	r2, fp
 800d7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 80a2 	beq.w	800d946 <_vfiprintf_r+0x20e>
 800d802:	2300      	movs	r3, #0
 800d804:	f04f 32ff 	mov.w	r2, #4294967295
 800d808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d80c:	f10a 0a01 	add.w	sl, sl, #1
 800d810:	9304      	str	r3, [sp, #16]
 800d812:	9307      	str	r3, [sp, #28]
 800d814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d818:	931a      	str	r3, [sp, #104]	; 0x68
 800d81a:	4654      	mov	r4, sl
 800d81c:	2205      	movs	r2, #5
 800d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d822:	4858      	ldr	r0, [pc, #352]	; (800d984 <_vfiprintf_r+0x24c>)
 800d824:	f7f2 fcfc 	bl	8000220 <memchr>
 800d828:	9a04      	ldr	r2, [sp, #16]
 800d82a:	b9d8      	cbnz	r0, 800d864 <_vfiprintf_r+0x12c>
 800d82c:	06d1      	lsls	r1, r2, #27
 800d82e:	bf44      	itt	mi
 800d830:	2320      	movmi	r3, #32
 800d832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d836:	0713      	lsls	r3, r2, #28
 800d838:	bf44      	itt	mi
 800d83a:	232b      	movmi	r3, #43	; 0x2b
 800d83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d840:	f89a 3000 	ldrb.w	r3, [sl]
 800d844:	2b2a      	cmp	r3, #42	; 0x2a
 800d846:	d015      	beq.n	800d874 <_vfiprintf_r+0x13c>
 800d848:	9a07      	ldr	r2, [sp, #28]
 800d84a:	4654      	mov	r4, sl
 800d84c:	2000      	movs	r0, #0
 800d84e:	f04f 0c0a 	mov.w	ip, #10
 800d852:	4621      	mov	r1, r4
 800d854:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d858:	3b30      	subs	r3, #48	; 0x30
 800d85a:	2b09      	cmp	r3, #9
 800d85c:	d94e      	bls.n	800d8fc <_vfiprintf_r+0x1c4>
 800d85e:	b1b0      	cbz	r0, 800d88e <_vfiprintf_r+0x156>
 800d860:	9207      	str	r2, [sp, #28]
 800d862:	e014      	b.n	800d88e <_vfiprintf_r+0x156>
 800d864:	eba0 0308 	sub.w	r3, r0, r8
 800d868:	fa09 f303 	lsl.w	r3, r9, r3
 800d86c:	4313      	orrs	r3, r2
 800d86e:	9304      	str	r3, [sp, #16]
 800d870:	46a2      	mov	sl, r4
 800d872:	e7d2      	b.n	800d81a <_vfiprintf_r+0xe2>
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	1d19      	adds	r1, r3, #4
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	9103      	str	r1, [sp, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfbb      	ittet	lt
 800d880:	425b      	neglt	r3, r3
 800d882:	f042 0202 	orrlt.w	r2, r2, #2
 800d886:	9307      	strge	r3, [sp, #28]
 800d888:	9307      	strlt	r3, [sp, #28]
 800d88a:	bfb8      	it	lt
 800d88c:	9204      	strlt	r2, [sp, #16]
 800d88e:	7823      	ldrb	r3, [r4, #0]
 800d890:	2b2e      	cmp	r3, #46	; 0x2e
 800d892:	d10c      	bne.n	800d8ae <_vfiprintf_r+0x176>
 800d894:	7863      	ldrb	r3, [r4, #1]
 800d896:	2b2a      	cmp	r3, #42	; 0x2a
 800d898:	d135      	bne.n	800d906 <_vfiprintf_r+0x1ce>
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	1d1a      	adds	r2, r3, #4
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	9203      	str	r2, [sp, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bfb8      	it	lt
 800d8a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8aa:	3402      	adds	r4, #2
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d994 <_vfiprintf_r+0x25c>
 800d8b2:	7821      	ldrb	r1, [r4, #0]
 800d8b4:	2203      	movs	r2, #3
 800d8b6:	4650      	mov	r0, sl
 800d8b8:	f7f2 fcb2 	bl	8000220 <memchr>
 800d8bc:	b140      	cbz	r0, 800d8d0 <_vfiprintf_r+0x198>
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	eba0 000a 	sub.w	r0, r0, sl
 800d8c4:	fa03 f000 	lsl.w	r0, r3, r0
 800d8c8:	9b04      	ldr	r3, [sp, #16]
 800d8ca:	4303      	orrs	r3, r0
 800d8cc:	3401      	adds	r4, #1
 800d8ce:	9304      	str	r3, [sp, #16]
 800d8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d4:	482c      	ldr	r0, [pc, #176]	; (800d988 <_vfiprintf_r+0x250>)
 800d8d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8da:	2206      	movs	r2, #6
 800d8dc:	f7f2 fca0 	bl	8000220 <memchr>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d03f      	beq.n	800d964 <_vfiprintf_r+0x22c>
 800d8e4:	4b29      	ldr	r3, [pc, #164]	; (800d98c <_vfiprintf_r+0x254>)
 800d8e6:	bb1b      	cbnz	r3, 800d930 <_vfiprintf_r+0x1f8>
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	3307      	adds	r3, #7
 800d8ec:	f023 0307 	bic.w	r3, r3, #7
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	9303      	str	r3, [sp, #12]
 800d8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f6:	443b      	add	r3, r7
 800d8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fa:	e767      	b.n	800d7cc <_vfiprintf_r+0x94>
 800d8fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d900:	460c      	mov	r4, r1
 800d902:	2001      	movs	r0, #1
 800d904:	e7a5      	b.n	800d852 <_vfiprintf_r+0x11a>
 800d906:	2300      	movs	r3, #0
 800d908:	3401      	adds	r4, #1
 800d90a:	9305      	str	r3, [sp, #20]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f04f 0c0a 	mov.w	ip, #10
 800d912:	4620      	mov	r0, r4
 800d914:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d918:	3a30      	subs	r2, #48	; 0x30
 800d91a:	2a09      	cmp	r2, #9
 800d91c:	d903      	bls.n	800d926 <_vfiprintf_r+0x1ee>
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0c5      	beq.n	800d8ae <_vfiprintf_r+0x176>
 800d922:	9105      	str	r1, [sp, #20]
 800d924:	e7c3      	b.n	800d8ae <_vfiprintf_r+0x176>
 800d926:	fb0c 2101 	mla	r1, ip, r1, r2
 800d92a:	4604      	mov	r4, r0
 800d92c:	2301      	movs	r3, #1
 800d92e:	e7f0      	b.n	800d912 <_vfiprintf_r+0x1da>
 800d930:	ab03      	add	r3, sp, #12
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	462a      	mov	r2, r5
 800d936:	4b16      	ldr	r3, [pc, #88]	; (800d990 <_vfiprintf_r+0x258>)
 800d938:	a904      	add	r1, sp, #16
 800d93a:	4630      	mov	r0, r6
 800d93c:	f7fd fafc 	bl	800af38 <_printf_float>
 800d940:	4607      	mov	r7, r0
 800d942:	1c78      	adds	r0, r7, #1
 800d944:	d1d6      	bne.n	800d8f4 <_vfiprintf_r+0x1bc>
 800d946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d948:	07d9      	lsls	r1, r3, #31
 800d94a:	d405      	bmi.n	800d958 <_vfiprintf_r+0x220>
 800d94c:	89ab      	ldrh	r3, [r5, #12]
 800d94e:	059a      	lsls	r2, r3, #22
 800d950:	d402      	bmi.n	800d958 <_vfiprintf_r+0x220>
 800d952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d954:	f7ff f874 	bl	800ca40 <__retarget_lock_release_recursive>
 800d958:	89ab      	ldrh	r3, [r5, #12]
 800d95a:	065b      	lsls	r3, r3, #25
 800d95c:	f53f af12 	bmi.w	800d784 <_vfiprintf_r+0x4c>
 800d960:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d962:	e711      	b.n	800d788 <_vfiprintf_r+0x50>
 800d964:	ab03      	add	r3, sp, #12
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	462a      	mov	r2, r5
 800d96a:	4b09      	ldr	r3, [pc, #36]	; (800d990 <_vfiprintf_r+0x258>)
 800d96c:	a904      	add	r1, sp, #16
 800d96e:	4630      	mov	r0, r6
 800d970:	f7fd fd86 	bl	800b480 <_printf_i>
 800d974:	e7e4      	b.n	800d940 <_vfiprintf_r+0x208>
 800d976:	bf00      	nop
 800d978:	0800e80c 	.word	0x0800e80c
 800d97c:	0800e82c 	.word	0x0800e82c
 800d980:	0800e7ec 	.word	0x0800e7ec
 800d984:	0800e9a4 	.word	0x0800e9a4
 800d988:	0800e9ae 	.word	0x0800e9ae
 800d98c:	0800af39 	.word	0x0800af39
 800d990:	0800d713 	.word	0x0800d713
 800d994:	0800e9aa 	.word	0x0800e9aa

0800d998 <_sbrk_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d06      	ldr	r5, [pc, #24]	; (800d9b4 <_sbrk_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f4 fd2e 	bl	8002404 <_sbrk>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_sbrk_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_sbrk_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	2000320c 	.word	0x2000320c

0800d9b8 <__sread>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c0:	f000 f92c 	bl	800dc1c <_read_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	bfab      	itete	ge
 800d9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d9cc:	181b      	addge	r3, r3, r0
 800d9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9d2:	bfac      	ite	ge
 800d9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9d6:	81a3      	strhlt	r3, [r4, #12]
 800d9d8:	bd10      	pop	{r4, pc}

0800d9da <__swrite>:
 800d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9de:	461f      	mov	r7, r3
 800d9e0:	898b      	ldrh	r3, [r1, #12]
 800d9e2:	05db      	lsls	r3, r3, #23
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	4616      	mov	r6, r2
 800d9ea:	d505      	bpl.n	800d9f8 <__swrite+0x1e>
 800d9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f000 f898 	bl	800db28 <_lseek_r>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	4628      	mov	r0, r5
 800da0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0e:	f000 b817 	b.w	800da40 <_write_r>

0800da12 <__sseek>:
 800da12:	b510      	push	{r4, lr}
 800da14:	460c      	mov	r4, r1
 800da16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1a:	f000 f885 	bl	800db28 <_lseek_r>
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	bf15      	itete	ne
 800da24:	6560      	strne	r0, [r4, #84]	; 0x54
 800da26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da2e:	81a3      	strheq	r3, [r4, #12]
 800da30:	bf18      	it	ne
 800da32:	81a3      	strhne	r3, [r4, #12]
 800da34:	bd10      	pop	{r4, pc}

0800da36 <__sclose>:
 800da36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3a:	f000 b831 	b.w	800daa0 <_close_r>
	...

0800da40 <_write_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d07      	ldr	r5, [pc, #28]	; (800da60 <_write_r+0x20>)
 800da44:	4604      	mov	r4, r0
 800da46:	4608      	mov	r0, r1
 800da48:	4611      	mov	r1, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	602a      	str	r2, [r5, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	f7f3 fac3 	bl	8000fda <_write>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_write_r+0x1e>
 800da58:	682b      	ldr	r3, [r5, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_write_r+0x1e>
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	2000320c 	.word	0x2000320c

0800da64 <__assert_func>:
 800da64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da66:	4614      	mov	r4, r2
 800da68:	461a      	mov	r2, r3
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <__assert_func+0x2c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4605      	mov	r5, r0
 800da70:	68d8      	ldr	r0, [r3, #12]
 800da72:	b14c      	cbz	r4, 800da88 <__assert_func+0x24>
 800da74:	4b07      	ldr	r3, [pc, #28]	; (800da94 <__assert_func+0x30>)
 800da76:	9100      	str	r1, [sp, #0]
 800da78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da7c:	4906      	ldr	r1, [pc, #24]	; (800da98 <__assert_func+0x34>)
 800da7e:	462b      	mov	r3, r5
 800da80:	f000 f81e 	bl	800dac0 <fiprintf>
 800da84:	f000 f8e9 	bl	800dc5a <abort>
 800da88:	4b04      	ldr	r3, [pc, #16]	; (800da9c <__assert_func+0x38>)
 800da8a:	461c      	mov	r4, r3
 800da8c:	e7f3      	b.n	800da76 <__assert_func+0x12>
 800da8e:	bf00      	nop
 800da90:	2000000c 	.word	0x2000000c
 800da94:	0800e9b5 	.word	0x0800e9b5
 800da98:	0800e9c2 	.word	0x0800e9c2
 800da9c:	0800e9f0 	.word	0x0800e9f0

0800daa0 <_close_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d06      	ldr	r5, [pc, #24]	; (800dabc <_close_r+0x1c>)
 800daa4:	2300      	movs	r3, #0
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	602b      	str	r3, [r5, #0]
 800daac:	f7f4 fc75 	bl	800239a <_close>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	d102      	bne.n	800daba <_close_r+0x1a>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	b103      	cbz	r3, 800daba <_close_r+0x1a>
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	2000320c 	.word	0x2000320c

0800dac0 <fiprintf>:
 800dac0:	b40e      	push	{r1, r2, r3}
 800dac2:	b503      	push	{r0, r1, lr}
 800dac4:	4601      	mov	r1, r0
 800dac6:	ab03      	add	r3, sp, #12
 800dac8:	4805      	ldr	r0, [pc, #20]	; (800dae0 <fiprintf+0x20>)
 800daca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dace:	6800      	ldr	r0, [r0, #0]
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	f7ff fe31 	bl	800d738 <_vfiprintf_r>
 800dad6:	b002      	add	sp, #8
 800dad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dadc:	b003      	add	sp, #12
 800dade:	4770      	bx	lr
 800dae0:	2000000c 	.word	0x2000000c

0800dae4 <_fstat_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	; (800db04 <_fstat_r+0x20>)
 800dae8:	2300      	movs	r3, #0
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	4611      	mov	r1, r2
 800daf0:	602b      	str	r3, [r5, #0]
 800daf2:	f7f4 fc5e 	bl	80023b2 <_fstat>
 800daf6:	1c43      	adds	r3, r0, #1
 800daf8:	d102      	bne.n	800db00 <_fstat_r+0x1c>
 800dafa:	682b      	ldr	r3, [r5, #0]
 800dafc:	b103      	cbz	r3, 800db00 <_fstat_r+0x1c>
 800dafe:	6023      	str	r3, [r4, #0]
 800db00:	bd38      	pop	{r3, r4, r5, pc}
 800db02:	bf00      	nop
 800db04:	2000320c 	.word	0x2000320c

0800db08 <_isatty_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	; (800db24 <_isatty_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f4 fc5d 	bl	80023d2 <_isatty>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_isatty_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_isatty_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	2000320c 	.word	0x2000320c

0800db28 <_lseek_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d07      	ldr	r5, [pc, #28]	; (800db48 <_lseek_r+0x20>)
 800db2c:	4604      	mov	r4, r0
 800db2e:	4608      	mov	r0, r1
 800db30:	4611      	mov	r1, r2
 800db32:	2200      	movs	r2, #0
 800db34:	602a      	str	r2, [r5, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	f7f4 fc56 	bl	80023e8 <_lseek>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_lseek_r+0x1e>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_lseek_r+0x1e>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	2000320c 	.word	0x2000320c

0800db4c <__ascii_mbtowc>:
 800db4c:	b082      	sub	sp, #8
 800db4e:	b901      	cbnz	r1, 800db52 <__ascii_mbtowc+0x6>
 800db50:	a901      	add	r1, sp, #4
 800db52:	b142      	cbz	r2, 800db66 <__ascii_mbtowc+0x1a>
 800db54:	b14b      	cbz	r3, 800db6a <__ascii_mbtowc+0x1e>
 800db56:	7813      	ldrb	r3, [r2, #0]
 800db58:	600b      	str	r3, [r1, #0]
 800db5a:	7812      	ldrb	r2, [r2, #0]
 800db5c:	1e10      	subs	r0, r2, #0
 800db5e:	bf18      	it	ne
 800db60:	2001      	movne	r0, #1
 800db62:	b002      	add	sp, #8
 800db64:	4770      	bx	lr
 800db66:	4610      	mov	r0, r2
 800db68:	e7fb      	b.n	800db62 <__ascii_mbtowc+0x16>
 800db6a:	f06f 0001 	mvn.w	r0, #1
 800db6e:	e7f8      	b.n	800db62 <__ascii_mbtowc+0x16>

0800db70 <memmove>:
 800db70:	4288      	cmp	r0, r1
 800db72:	b510      	push	{r4, lr}
 800db74:	eb01 0402 	add.w	r4, r1, r2
 800db78:	d902      	bls.n	800db80 <memmove+0x10>
 800db7a:	4284      	cmp	r4, r0
 800db7c:	4623      	mov	r3, r4
 800db7e:	d807      	bhi.n	800db90 <memmove+0x20>
 800db80:	1e43      	subs	r3, r0, #1
 800db82:	42a1      	cmp	r1, r4
 800db84:	d008      	beq.n	800db98 <memmove+0x28>
 800db86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db8e:	e7f8      	b.n	800db82 <memmove+0x12>
 800db90:	4402      	add	r2, r0
 800db92:	4601      	mov	r1, r0
 800db94:	428a      	cmp	r2, r1
 800db96:	d100      	bne.n	800db9a <memmove+0x2a>
 800db98:	bd10      	pop	{r4, pc}
 800db9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dba2:	e7f7      	b.n	800db94 <memmove+0x24>

0800dba4 <__malloc_lock>:
 800dba4:	4801      	ldr	r0, [pc, #4]	; (800dbac <__malloc_lock+0x8>)
 800dba6:	f7fe bf4a 	b.w	800ca3e <__retarget_lock_acquire_recursive>
 800dbaa:	bf00      	nop
 800dbac:	20003200 	.word	0x20003200

0800dbb0 <__malloc_unlock>:
 800dbb0:	4801      	ldr	r0, [pc, #4]	; (800dbb8 <__malloc_unlock+0x8>)
 800dbb2:	f7fe bf45 	b.w	800ca40 <__retarget_lock_release_recursive>
 800dbb6:	bf00      	nop
 800dbb8:	20003200 	.word	0x20003200

0800dbbc <_realloc_r>:
 800dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	460e      	mov	r6, r1
 800dbc6:	b921      	cbnz	r1, 800dbd2 <_realloc_r+0x16>
 800dbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbcc:	4611      	mov	r1, r2
 800dbce:	f7ff bbb9 	b.w	800d344 <_malloc_r>
 800dbd2:	b92a      	cbnz	r2, 800dbe0 <_realloc_r+0x24>
 800dbd4:	f7ff fb4a 	bl	800d26c <_free_r>
 800dbd8:	4625      	mov	r5, r4
 800dbda:	4628      	mov	r0, r5
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	f000 f842 	bl	800dc68 <_malloc_usable_size_r>
 800dbe4:	4284      	cmp	r4, r0
 800dbe6:	4607      	mov	r7, r0
 800dbe8:	d802      	bhi.n	800dbf0 <_realloc_r+0x34>
 800dbea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbee:	d812      	bhi.n	800dc16 <_realloc_r+0x5a>
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f7ff fba6 	bl	800d344 <_malloc_r>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d0ed      	beq.n	800dbda <_realloc_r+0x1e>
 800dbfe:	42bc      	cmp	r4, r7
 800dc00:	4622      	mov	r2, r4
 800dc02:	4631      	mov	r1, r6
 800dc04:	bf28      	it	cs
 800dc06:	463a      	movcs	r2, r7
 800dc08:	f7fe ff88 	bl	800cb1c <memcpy>
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f7ff fb2c 	bl	800d26c <_free_r>
 800dc14:	e7e1      	b.n	800dbda <_realloc_r+0x1e>
 800dc16:	4635      	mov	r5, r6
 800dc18:	e7df      	b.n	800dbda <_realloc_r+0x1e>
	...

0800dc1c <_read_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d07      	ldr	r5, [pc, #28]	; (800dc3c <_read_r+0x20>)
 800dc20:	4604      	mov	r4, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	4611      	mov	r1, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	602a      	str	r2, [r5, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f7f4 fb98 	bl	8002360 <_read>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_read_r+0x1e>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_read_r+0x1e>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	2000320c 	.word	0x2000320c

0800dc40 <__ascii_wctomb>:
 800dc40:	b149      	cbz	r1, 800dc56 <__ascii_wctomb+0x16>
 800dc42:	2aff      	cmp	r2, #255	; 0xff
 800dc44:	bf85      	ittet	hi
 800dc46:	238a      	movhi	r3, #138	; 0x8a
 800dc48:	6003      	strhi	r3, [r0, #0]
 800dc4a:	700a      	strbls	r2, [r1, #0]
 800dc4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc50:	bf98      	it	ls
 800dc52:	2001      	movls	r0, #1
 800dc54:	4770      	bx	lr
 800dc56:	4608      	mov	r0, r1
 800dc58:	4770      	bx	lr

0800dc5a <abort>:
 800dc5a:	b508      	push	{r3, lr}
 800dc5c:	2006      	movs	r0, #6
 800dc5e:	f000 f833 	bl	800dcc8 <raise>
 800dc62:	2001      	movs	r0, #1
 800dc64:	f7f4 fb72 	bl	800234c <_exit>

0800dc68 <_malloc_usable_size_r>:
 800dc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc6c:	1f18      	subs	r0, r3, #4
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfbc      	itt	lt
 800dc72:	580b      	ldrlt	r3, [r1, r0]
 800dc74:	18c0      	addlt	r0, r0, r3
 800dc76:	4770      	bx	lr

0800dc78 <_raise_r>:
 800dc78:	291f      	cmp	r1, #31
 800dc7a:	b538      	push	{r3, r4, r5, lr}
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	d904      	bls.n	800dc8c <_raise_r+0x14>
 800dc82:	2316      	movs	r3, #22
 800dc84:	6003      	str	r3, [r0, #0]
 800dc86:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8a:	bd38      	pop	{r3, r4, r5, pc}
 800dc8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc8e:	b112      	cbz	r2, 800dc96 <_raise_r+0x1e>
 800dc90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc94:	b94b      	cbnz	r3, 800dcaa <_raise_r+0x32>
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 f830 	bl	800dcfc <_getpid_r>
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	4601      	mov	r1, r0
 800dca0:	4620      	mov	r0, r4
 800dca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca6:	f000 b817 	b.w	800dcd8 <_kill_r>
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d00a      	beq.n	800dcc4 <_raise_r+0x4c>
 800dcae:	1c59      	adds	r1, r3, #1
 800dcb0:	d103      	bne.n	800dcba <_raise_r+0x42>
 800dcb2:	2316      	movs	r3, #22
 800dcb4:	6003      	str	r3, [r0, #0]
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	e7e7      	b.n	800dc8a <_raise_r+0x12>
 800dcba:	2400      	movs	r4, #0
 800dcbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	4798      	blx	r3
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	e7e0      	b.n	800dc8a <_raise_r+0x12>

0800dcc8 <raise>:
 800dcc8:	4b02      	ldr	r3, [pc, #8]	; (800dcd4 <raise+0xc>)
 800dcca:	4601      	mov	r1, r0
 800dccc:	6818      	ldr	r0, [r3, #0]
 800dcce:	f7ff bfd3 	b.w	800dc78 <_raise_r>
 800dcd2:	bf00      	nop
 800dcd4:	2000000c 	.word	0x2000000c

0800dcd8 <_kill_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4d07      	ldr	r5, [pc, #28]	; (800dcf8 <_kill_r+0x20>)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	602b      	str	r3, [r5, #0]
 800dce6:	f7f4 fb21 	bl	800232c <_kill>
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	d102      	bne.n	800dcf4 <_kill_r+0x1c>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	b103      	cbz	r3, 800dcf4 <_kill_r+0x1c>
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	bd38      	pop	{r3, r4, r5, pc}
 800dcf6:	bf00      	nop
 800dcf8:	2000320c 	.word	0x2000320c

0800dcfc <_getpid_r>:
 800dcfc:	f7f4 bb0e 	b.w	800231c <_getpid>

0800dd00 <log10>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	ed2d 8b02 	vpush	{d8}
 800dd06:	ec55 4b10 	vmov	r4, r5, d0
 800dd0a:	f000 f865 	bl	800ddd8 <__ieee754_log10>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	462b      	mov	r3, r5
 800dd12:	4620      	mov	r0, r4
 800dd14:	4629      	mov	r1, r5
 800dd16:	eeb0 8a40 	vmov.f32	s16, s0
 800dd1a:	eef0 8a60 	vmov.f32	s17, s1
 800dd1e:	f7f2 ff25 	bl	8000b6c <__aeabi_dcmpun>
 800dd22:	b998      	cbnz	r0, 800dd4c <log10+0x4c>
 800dd24:	2200      	movs	r2, #0
 800dd26:	2300      	movs	r3, #0
 800dd28:	4620      	mov	r0, r4
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	f7f2 ff00 	bl	8000b30 <__aeabi_dcmple>
 800dd30:	b160      	cbz	r0, 800dd4c <log10+0x4c>
 800dd32:	2200      	movs	r2, #0
 800dd34:	2300      	movs	r3, #0
 800dd36:	4620      	mov	r0, r4
 800dd38:	4629      	mov	r1, r5
 800dd3a:	f7f2 fee5 	bl	8000b08 <__aeabi_dcmpeq>
 800dd3e:	b160      	cbz	r0, 800dd5a <log10+0x5a>
 800dd40:	f7fd f828 	bl	800ad94 <__errno>
 800dd44:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800dd70 <log10+0x70>
 800dd48:	2322      	movs	r3, #34	; 0x22
 800dd4a:	6003      	str	r3, [r0, #0]
 800dd4c:	eeb0 0a48 	vmov.f32	s0, s16
 800dd50:	eef0 0a68 	vmov.f32	s1, s17
 800dd54:	ecbd 8b02 	vpop	{d8}
 800dd58:	bd38      	pop	{r3, r4, r5, pc}
 800dd5a:	f7fd f81b 	bl	800ad94 <__errno>
 800dd5e:	ecbd 8b02 	vpop	{d8}
 800dd62:	2321      	movs	r3, #33	; 0x21
 800dd64:	6003      	str	r3, [r0, #0]
 800dd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd6a:	4803      	ldr	r0, [pc, #12]	; (800dd78 <log10+0x78>)
 800dd6c:	f000 b970 	b.w	800e050 <nan>
 800dd70:	00000000 	.word	0x00000000
 800dd74:	fff00000 	.word	0xfff00000
 800dd78:	0800e9f0 	.word	0x0800e9f0

0800dd7c <sqrt>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	ed2d 8b02 	vpush	{d8}
 800dd82:	ec55 4b10 	vmov	r4, r5, d0
 800dd86:	f000 f8b1 	bl	800deec <__ieee754_sqrt>
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	462b      	mov	r3, r5
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	eeb0 8a40 	vmov.f32	s16, s0
 800dd96:	eef0 8a60 	vmov.f32	s17, s1
 800dd9a:	f7f2 fee7 	bl	8000b6c <__aeabi_dcmpun>
 800dd9e:	b990      	cbnz	r0, 800ddc6 <sqrt+0x4a>
 800dda0:	2200      	movs	r2, #0
 800dda2:	2300      	movs	r3, #0
 800dda4:	4620      	mov	r0, r4
 800dda6:	4629      	mov	r1, r5
 800dda8:	f7f2 feb8 	bl	8000b1c <__aeabi_dcmplt>
 800ddac:	b158      	cbz	r0, 800ddc6 <sqrt+0x4a>
 800ddae:	f7fc fff1 	bl	800ad94 <__errno>
 800ddb2:	2321      	movs	r3, #33	; 0x21
 800ddb4:	6003      	str	r3, [r0, #0]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4610      	mov	r0, r2
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f7f2 fd65 	bl	800088c <__aeabi_ddiv>
 800ddc2:	ec41 0b18 	vmov	d8, r0, r1
 800ddc6:	eeb0 0a48 	vmov.f32	s0, s16
 800ddca:	eef0 0a68 	vmov.f32	s1, s17
 800ddce:	ecbd 8b02 	vpop	{d8}
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	0000      	movs	r0, r0
	...

0800ddd8 <__ieee754_log10>:
 800ddd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dddc:	ec55 4b10 	vmov	r4, r5, d0
 800dde0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800dde4:	462b      	mov	r3, r5
 800dde6:	da2f      	bge.n	800de48 <__ieee754_log10+0x70>
 800dde8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800ddec:	4322      	orrs	r2, r4
 800ddee:	d109      	bne.n	800de04 <__ieee754_log10+0x2c>
 800ddf0:	493b      	ldr	r1, [pc, #236]	; (800dee0 <__ieee754_log10+0x108>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	f7f2 fd48 	bl	800088c <__aeabi_ddiv>
 800ddfc:	ec41 0b10 	vmov	d0, r0, r1
 800de00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de04:	2d00      	cmp	r5, #0
 800de06:	da09      	bge.n	800de1c <__ieee754_log10+0x44>
 800de08:	ee10 2a10 	vmov	r2, s0
 800de0c:	ee10 0a10 	vmov	r0, s0
 800de10:	4629      	mov	r1, r5
 800de12:	f7f2 fa59 	bl	80002c8 <__aeabi_dsub>
 800de16:	2200      	movs	r2, #0
 800de18:	2300      	movs	r3, #0
 800de1a:	e7ed      	b.n	800ddf8 <__ieee754_log10+0x20>
 800de1c:	4b31      	ldr	r3, [pc, #196]	; (800dee4 <__ieee754_log10+0x10c>)
 800de1e:	2200      	movs	r2, #0
 800de20:	4629      	mov	r1, r5
 800de22:	ee10 0a10 	vmov	r0, s0
 800de26:	f7f2 fc07 	bl	8000638 <__aeabi_dmul>
 800de2a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800de2e:	4604      	mov	r4, r0
 800de30:	460d      	mov	r5, r1
 800de32:	460b      	mov	r3, r1
 800de34:	492c      	ldr	r1, [pc, #176]	; (800dee8 <__ieee754_log10+0x110>)
 800de36:	428b      	cmp	r3, r1
 800de38:	dd08      	ble.n	800de4c <__ieee754_log10+0x74>
 800de3a:	4622      	mov	r2, r4
 800de3c:	462b      	mov	r3, r5
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 fa43 	bl	80002cc <__adddf3>
 800de46:	e7d9      	b.n	800ddfc <__ieee754_log10+0x24>
 800de48:	2200      	movs	r2, #0
 800de4a:	e7f3      	b.n	800de34 <__ieee754_log10+0x5c>
 800de4c:	1518      	asrs	r0, r3, #20
 800de4e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800de52:	4410      	add	r0, r2
 800de54:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800de58:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800de5c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800de60:	f7f2 fb80 	bl	8000564 <__aeabi_i2d>
 800de64:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800de68:	3303      	adds	r3, #3
 800de6a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800de6e:	ec45 4b10 	vmov	d0, r4, r5
 800de72:	4606      	mov	r6, r0
 800de74:	460f      	mov	r7, r1
 800de76:	f000 f8f3 	bl	800e060 <__ieee754_log>
 800de7a:	a313      	add	r3, pc, #76	; (adr r3, 800dec8 <__ieee754_log10+0xf0>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	4630      	mov	r0, r6
 800de82:	4639      	mov	r1, r7
 800de84:	ec59 8b10 	vmov	r8, r9, d0
 800de88:	f7f2 fbd6 	bl	8000638 <__aeabi_dmul>
 800de8c:	a310      	add	r3, pc, #64	; (adr r3, 800ded0 <__ieee754_log10+0xf8>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	4604      	mov	r4, r0
 800de94:	460d      	mov	r5, r1
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 fbcd 	bl	8000638 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4620      	mov	r0, r4
 800dea4:	4629      	mov	r1, r5
 800dea6:	f7f2 fa11 	bl	80002cc <__adddf3>
 800deaa:	a30b      	add	r3, pc, #44	; (adr r3, 800ded8 <__ieee754_log10+0x100>)
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	4604      	mov	r4, r0
 800deb2:	460d      	mov	r5, r1
 800deb4:	4630      	mov	r0, r6
 800deb6:	4639      	mov	r1, r7
 800deb8:	f7f2 fbbe 	bl	8000638 <__aeabi_dmul>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4620      	mov	r0, r4
 800dec2:	4629      	mov	r1, r5
 800dec4:	e7bd      	b.n	800de42 <__ieee754_log10+0x6a>
 800dec6:	bf00      	nop
 800dec8:	11f12b36 	.word	0x11f12b36
 800decc:	3d59fef3 	.word	0x3d59fef3
 800ded0:	1526e50e 	.word	0x1526e50e
 800ded4:	3fdbcb7b 	.word	0x3fdbcb7b
 800ded8:	509f6000 	.word	0x509f6000
 800dedc:	3fd34413 	.word	0x3fd34413
 800dee0:	c3500000 	.word	0xc3500000
 800dee4:	43500000 	.word	0x43500000
 800dee8:	7fefffff 	.word	0x7fefffff

0800deec <__ieee754_sqrt>:
 800deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def0:	ec55 4b10 	vmov	r4, r5, d0
 800def4:	4e55      	ldr	r6, [pc, #340]	; (800e04c <__ieee754_sqrt+0x160>)
 800def6:	43ae      	bics	r6, r5
 800def8:	ee10 0a10 	vmov	r0, s0
 800defc:	ee10 3a10 	vmov	r3, s0
 800df00:	462a      	mov	r2, r5
 800df02:	4629      	mov	r1, r5
 800df04:	d110      	bne.n	800df28 <__ieee754_sqrt+0x3c>
 800df06:	ee10 2a10 	vmov	r2, s0
 800df0a:	462b      	mov	r3, r5
 800df0c:	f7f2 fb94 	bl	8000638 <__aeabi_dmul>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4620      	mov	r0, r4
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 f9d8 	bl	80002cc <__adddf3>
 800df1c:	4604      	mov	r4, r0
 800df1e:	460d      	mov	r5, r1
 800df20:	ec45 4b10 	vmov	d0, r4, r5
 800df24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df28:	2d00      	cmp	r5, #0
 800df2a:	dc10      	bgt.n	800df4e <__ieee754_sqrt+0x62>
 800df2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df30:	4330      	orrs	r0, r6
 800df32:	d0f5      	beq.n	800df20 <__ieee754_sqrt+0x34>
 800df34:	b15d      	cbz	r5, 800df4e <__ieee754_sqrt+0x62>
 800df36:	ee10 2a10 	vmov	r2, s0
 800df3a:	462b      	mov	r3, r5
 800df3c:	ee10 0a10 	vmov	r0, s0
 800df40:	f7f2 f9c2 	bl	80002c8 <__aeabi_dsub>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	f7f2 fca0 	bl	800088c <__aeabi_ddiv>
 800df4c:	e7e6      	b.n	800df1c <__ieee754_sqrt+0x30>
 800df4e:	1512      	asrs	r2, r2, #20
 800df50:	d074      	beq.n	800e03c <__ieee754_sqrt+0x150>
 800df52:	07d4      	lsls	r4, r2, #31
 800df54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800df58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800df5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800df60:	bf5e      	ittt	pl
 800df62:	0fda      	lsrpl	r2, r3, #31
 800df64:	005b      	lslpl	r3, r3, #1
 800df66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800df6a:	2400      	movs	r4, #0
 800df6c:	0fda      	lsrs	r2, r3, #31
 800df6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800df72:	107f      	asrs	r7, r7, #1
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	2516      	movs	r5, #22
 800df78:	4620      	mov	r0, r4
 800df7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df7e:	1886      	adds	r6, r0, r2
 800df80:	428e      	cmp	r6, r1
 800df82:	bfde      	ittt	le
 800df84:	1b89      	suble	r1, r1, r6
 800df86:	18b0      	addle	r0, r6, r2
 800df88:	18a4      	addle	r4, r4, r2
 800df8a:	0049      	lsls	r1, r1, #1
 800df8c:	3d01      	subs	r5, #1
 800df8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800df92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800df96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df9a:	d1f0      	bne.n	800df7e <__ieee754_sqrt+0x92>
 800df9c:	462a      	mov	r2, r5
 800df9e:	f04f 0e20 	mov.w	lr, #32
 800dfa2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dfa6:	4281      	cmp	r1, r0
 800dfa8:	eb06 0c05 	add.w	ip, r6, r5
 800dfac:	dc02      	bgt.n	800dfb4 <__ieee754_sqrt+0xc8>
 800dfae:	d113      	bne.n	800dfd8 <__ieee754_sqrt+0xec>
 800dfb0:	459c      	cmp	ip, r3
 800dfb2:	d811      	bhi.n	800dfd8 <__ieee754_sqrt+0xec>
 800dfb4:	f1bc 0f00 	cmp.w	ip, #0
 800dfb8:	eb0c 0506 	add.w	r5, ip, r6
 800dfbc:	da43      	bge.n	800e046 <__ieee754_sqrt+0x15a>
 800dfbe:	2d00      	cmp	r5, #0
 800dfc0:	db41      	blt.n	800e046 <__ieee754_sqrt+0x15a>
 800dfc2:	f100 0801 	add.w	r8, r0, #1
 800dfc6:	1a09      	subs	r1, r1, r0
 800dfc8:	459c      	cmp	ip, r3
 800dfca:	bf88      	it	hi
 800dfcc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dfd0:	eba3 030c 	sub.w	r3, r3, ip
 800dfd4:	4432      	add	r2, r6
 800dfd6:	4640      	mov	r0, r8
 800dfd8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dfdc:	f1be 0e01 	subs.w	lr, lr, #1
 800dfe0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dfe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfe8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dfec:	d1db      	bne.n	800dfa6 <__ieee754_sqrt+0xba>
 800dfee:	430b      	orrs	r3, r1
 800dff0:	d006      	beq.n	800e000 <__ieee754_sqrt+0x114>
 800dff2:	1c50      	adds	r0, r2, #1
 800dff4:	bf13      	iteet	ne
 800dff6:	3201      	addne	r2, #1
 800dff8:	3401      	addeq	r4, #1
 800dffa:	4672      	moveq	r2, lr
 800dffc:	f022 0201 	bicne.w	r2, r2, #1
 800e000:	1063      	asrs	r3, r4, #1
 800e002:	0852      	lsrs	r2, r2, #1
 800e004:	07e1      	lsls	r1, r4, #31
 800e006:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e00a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e00e:	bf48      	it	mi
 800e010:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e014:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e018:	4614      	mov	r4, r2
 800e01a:	e781      	b.n	800df20 <__ieee754_sqrt+0x34>
 800e01c:	0ad9      	lsrs	r1, r3, #11
 800e01e:	3815      	subs	r0, #21
 800e020:	055b      	lsls	r3, r3, #21
 800e022:	2900      	cmp	r1, #0
 800e024:	d0fa      	beq.n	800e01c <__ieee754_sqrt+0x130>
 800e026:	02cd      	lsls	r5, r1, #11
 800e028:	d50a      	bpl.n	800e040 <__ieee754_sqrt+0x154>
 800e02a:	f1c2 0420 	rsb	r4, r2, #32
 800e02e:	fa23 f404 	lsr.w	r4, r3, r4
 800e032:	1e55      	subs	r5, r2, #1
 800e034:	4093      	lsls	r3, r2
 800e036:	4321      	orrs	r1, r4
 800e038:	1b42      	subs	r2, r0, r5
 800e03a:	e78a      	b.n	800df52 <__ieee754_sqrt+0x66>
 800e03c:	4610      	mov	r0, r2
 800e03e:	e7f0      	b.n	800e022 <__ieee754_sqrt+0x136>
 800e040:	0049      	lsls	r1, r1, #1
 800e042:	3201      	adds	r2, #1
 800e044:	e7ef      	b.n	800e026 <__ieee754_sqrt+0x13a>
 800e046:	4680      	mov	r8, r0
 800e048:	e7bd      	b.n	800dfc6 <__ieee754_sqrt+0xda>
 800e04a:	bf00      	nop
 800e04c:	7ff00000 	.word	0x7ff00000

0800e050 <nan>:
 800e050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e058 <nan+0x8>
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	00000000 	.word	0x00000000
 800e05c:	7ff80000 	.word	0x7ff80000

0800e060 <__ieee754_log>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	ec51 0b10 	vmov	r0, r1, d0
 800e068:	ed2d 8b04 	vpush	{d8-d9}
 800e06c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e070:	b083      	sub	sp, #12
 800e072:	460d      	mov	r5, r1
 800e074:	da29      	bge.n	800e0ca <__ieee754_log+0x6a>
 800e076:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e07a:	4303      	orrs	r3, r0
 800e07c:	ee10 2a10 	vmov	r2, s0
 800e080:	d10c      	bne.n	800e09c <__ieee754_log+0x3c>
 800e082:	49cf      	ldr	r1, [pc, #828]	; (800e3c0 <__ieee754_log+0x360>)
 800e084:	2200      	movs	r2, #0
 800e086:	2300      	movs	r3, #0
 800e088:	2000      	movs	r0, #0
 800e08a:	f7f2 fbff 	bl	800088c <__aeabi_ddiv>
 800e08e:	ec41 0b10 	vmov	d0, r0, r1
 800e092:	b003      	add	sp, #12
 800e094:	ecbd 8b04 	vpop	{d8-d9}
 800e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09c:	2900      	cmp	r1, #0
 800e09e:	da05      	bge.n	800e0ac <__ieee754_log+0x4c>
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	f7f2 f911 	bl	80002c8 <__aeabi_dsub>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e7ee      	b.n	800e08a <__ieee754_log+0x2a>
 800e0ac:	4bc5      	ldr	r3, [pc, #788]	; (800e3c4 <__ieee754_log+0x364>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f7f2 fac2 	bl	8000638 <__aeabi_dmul>
 800e0b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	4ac3      	ldr	r2, [pc, #780]	; (800e3c8 <__ieee754_log+0x368>)
 800e0bc:	4295      	cmp	r5, r2
 800e0be:	dd06      	ble.n	800e0ce <__ieee754_log+0x6e>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	f7f2 f902 	bl	80002cc <__adddf3>
 800e0c8:	e7e1      	b.n	800e08e <__ieee754_log+0x2e>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e7f5      	b.n	800e0ba <__ieee754_log+0x5a>
 800e0ce:	152c      	asrs	r4, r5, #20
 800e0d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e0d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e0d8:	441c      	add	r4, r3
 800e0da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e0de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e0e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e0ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e0ee:	ea42 0105 	orr.w	r1, r2, r5
 800e0f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4bb4      	ldr	r3, [pc, #720]	; (800e3cc <__ieee754_log+0x36c>)
 800e0fa:	f7f2 f8e5 	bl	80002c8 <__aeabi_dsub>
 800e0fe:	1cab      	adds	r3, r5, #2
 800e100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e104:	2b02      	cmp	r3, #2
 800e106:	4682      	mov	sl, r0
 800e108:	468b      	mov	fp, r1
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	dc53      	bgt.n	800e1b8 <__ieee754_log+0x158>
 800e110:	2300      	movs	r3, #0
 800e112:	f7f2 fcf9 	bl	8000b08 <__aeabi_dcmpeq>
 800e116:	b1d0      	cbz	r0, 800e14e <__ieee754_log+0xee>
 800e118:	2c00      	cmp	r4, #0
 800e11a:	f000 8122 	beq.w	800e362 <__ieee754_log+0x302>
 800e11e:	4620      	mov	r0, r4
 800e120:	f7f2 fa20 	bl	8000564 <__aeabi_i2d>
 800e124:	a390      	add	r3, pc, #576	; (adr r3, 800e368 <__ieee754_log+0x308>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	4606      	mov	r6, r0
 800e12c:	460f      	mov	r7, r1
 800e12e:	f7f2 fa83 	bl	8000638 <__aeabi_dmul>
 800e132:	a38f      	add	r3, pc, #572	; (adr r3, 800e370 <__ieee754_log+0x310>)
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	4604      	mov	r4, r0
 800e13a:	460d      	mov	r5, r1
 800e13c:	4630      	mov	r0, r6
 800e13e:	4639      	mov	r1, r7
 800e140:	f7f2 fa7a 	bl	8000638 <__aeabi_dmul>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4620      	mov	r0, r4
 800e14a:	4629      	mov	r1, r5
 800e14c:	e7ba      	b.n	800e0c4 <__ieee754_log+0x64>
 800e14e:	a38a      	add	r3, pc, #552	; (adr r3, 800e378 <__ieee754_log+0x318>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	4650      	mov	r0, sl
 800e156:	4659      	mov	r1, fp
 800e158:	f7f2 fa6e 	bl	8000638 <__aeabi_dmul>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	2000      	movs	r0, #0
 800e162:	499b      	ldr	r1, [pc, #620]	; (800e3d0 <__ieee754_log+0x370>)
 800e164:	f7f2 f8b0 	bl	80002c8 <__aeabi_dsub>
 800e168:	4652      	mov	r2, sl
 800e16a:	4606      	mov	r6, r0
 800e16c:	460f      	mov	r7, r1
 800e16e:	465b      	mov	r3, fp
 800e170:	4650      	mov	r0, sl
 800e172:	4659      	mov	r1, fp
 800e174:	f7f2 fa60 	bl	8000638 <__aeabi_dmul>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7f2 fa5a 	bl	8000638 <__aeabi_dmul>
 800e184:	4606      	mov	r6, r0
 800e186:	460f      	mov	r7, r1
 800e188:	b914      	cbnz	r4, 800e190 <__ieee754_log+0x130>
 800e18a:	4632      	mov	r2, r6
 800e18c:	463b      	mov	r3, r7
 800e18e:	e0a2      	b.n	800e2d6 <__ieee754_log+0x276>
 800e190:	4620      	mov	r0, r4
 800e192:	f7f2 f9e7 	bl	8000564 <__aeabi_i2d>
 800e196:	a374      	add	r3, pc, #464	; (adr r3, 800e368 <__ieee754_log+0x308>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	4680      	mov	r8, r0
 800e19e:	4689      	mov	r9, r1
 800e1a0:	f7f2 fa4a 	bl	8000638 <__aeabi_dmul>
 800e1a4:	a372      	add	r3, pc, #456	; (adr r3, 800e370 <__ieee754_log+0x310>)
 800e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	f7f2 fa41 	bl	8000638 <__aeabi_dmul>
 800e1b6:	e0a7      	b.n	800e308 <__ieee754_log+0x2a8>
 800e1b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1bc:	f7f2 f886 	bl	80002cc <__adddf3>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	4659      	mov	r1, fp
 800e1c8:	f7f2 fb60 	bl	800088c <__aeabi_ddiv>
 800e1cc:	ec41 0b18 	vmov	d8, r0, r1
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7f2 f9c7 	bl	8000564 <__aeabi_i2d>
 800e1d6:	ec53 2b18 	vmov	r2, r3, d8
 800e1da:	ec41 0b19 	vmov	d9, r0, r1
 800e1de:	ec51 0b18 	vmov	r0, r1, d8
 800e1e2:	f7f2 fa29 	bl	8000638 <__aeabi_dmul>
 800e1e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e1ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	4689      	mov	r9, r1
 800e1f8:	f7f2 fa1e 	bl	8000638 <__aeabi_dmul>
 800e1fc:	a360      	add	r3, pc, #384	; (adr r3, 800e380 <__ieee754_log+0x320>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	4606      	mov	r6, r0
 800e204:	460f      	mov	r7, r1
 800e206:	f7f2 fa17 	bl	8000638 <__aeabi_dmul>
 800e20a:	a35f      	add	r3, pc, #380	; (adr r3, 800e388 <__ieee754_log+0x328>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	f7f2 f85c 	bl	80002cc <__adddf3>
 800e214:	4632      	mov	r2, r6
 800e216:	463b      	mov	r3, r7
 800e218:	f7f2 fa0e 	bl	8000638 <__aeabi_dmul>
 800e21c:	a35c      	add	r3, pc, #368	; (adr r3, 800e390 <__ieee754_log+0x330>)
 800e21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e222:	f7f2 f853 	bl	80002cc <__adddf3>
 800e226:	4632      	mov	r2, r6
 800e228:	463b      	mov	r3, r7
 800e22a:	f7f2 fa05 	bl	8000638 <__aeabi_dmul>
 800e22e:	a35a      	add	r3, pc, #360	; (adr r3, 800e398 <__ieee754_log+0x338>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	f7f2 f84a 	bl	80002cc <__adddf3>
 800e238:	4642      	mov	r2, r8
 800e23a:	464b      	mov	r3, r9
 800e23c:	f7f2 f9fc 	bl	8000638 <__aeabi_dmul>
 800e240:	a357      	add	r3, pc, #348	; (adr r3, 800e3a0 <__ieee754_log+0x340>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	4680      	mov	r8, r0
 800e248:	4689      	mov	r9, r1
 800e24a:	4630      	mov	r0, r6
 800e24c:	4639      	mov	r1, r7
 800e24e:	f7f2 f9f3 	bl	8000638 <__aeabi_dmul>
 800e252:	a355      	add	r3, pc, #340	; (adr r3, 800e3a8 <__ieee754_log+0x348>)
 800e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e258:	f7f2 f838 	bl	80002cc <__adddf3>
 800e25c:	4632      	mov	r2, r6
 800e25e:	463b      	mov	r3, r7
 800e260:	f7f2 f9ea 	bl	8000638 <__aeabi_dmul>
 800e264:	a352      	add	r3, pc, #328	; (adr r3, 800e3b0 <__ieee754_log+0x350>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f82f 	bl	80002cc <__adddf3>
 800e26e:	4632      	mov	r2, r6
 800e270:	463b      	mov	r3, r7
 800e272:	f7f2 f9e1 	bl	8000638 <__aeabi_dmul>
 800e276:	460b      	mov	r3, r1
 800e278:	4602      	mov	r2, r0
 800e27a:	4649      	mov	r1, r9
 800e27c:	4640      	mov	r0, r8
 800e27e:	f7f2 f825 	bl	80002cc <__adddf3>
 800e282:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	3551      	adds	r5, #81	; 0x51
 800e28a:	431d      	orrs	r5, r3
 800e28c:	2d00      	cmp	r5, #0
 800e28e:	4680      	mov	r8, r0
 800e290:	4689      	mov	r9, r1
 800e292:	dd48      	ble.n	800e326 <__ieee754_log+0x2c6>
 800e294:	4b4e      	ldr	r3, [pc, #312]	; (800e3d0 <__ieee754_log+0x370>)
 800e296:	2200      	movs	r2, #0
 800e298:	4650      	mov	r0, sl
 800e29a:	4659      	mov	r1, fp
 800e29c:	f7f2 f9cc 	bl	8000638 <__aeabi_dmul>
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	465b      	mov	r3, fp
 800e2a4:	f7f2 f9c8 	bl	8000638 <__aeabi_dmul>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f2 f80a 	bl	80002cc <__adddf3>
 800e2b8:	ec53 2b18 	vmov	r2, r3, d8
 800e2bc:	f7f2 f9bc 	bl	8000638 <__aeabi_dmul>
 800e2c0:	4680      	mov	r8, r0
 800e2c2:	4689      	mov	r9, r1
 800e2c4:	b964      	cbnz	r4, 800e2e0 <__ieee754_log+0x280>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	4639      	mov	r1, r7
 800e2ce:	f7f1 fffb 	bl	80002c8 <__aeabi_dsub>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4650      	mov	r0, sl
 800e2d8:	4659      	mov	r1, fp
 800e2da:	f7f1 fff5 	bl	80002c8 <__aeabi_dsub>
 800e2de:	e6d6      	b.n	800e08e <__ieee754_log+0x2e>
 800e2e0:	a321      	add	r3, pc, #132	; (adr r3, 800e368 <__ieee754_log+0x308>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	ec51 0b19 	vmov	r0, r1, d9
 800e2ea:	f7f2 f9a5 	bl	8000638 <__aeabi_dmul>
 800e2ee:	a320      	add	r3, pc, #128	; (adr r3, 800e370 <__ieee754_log+0x310>)
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	460d      	mov	r5, r1
 800e2f8:	ec51 0b19 	vmov	r0, r1, d9
 800e2fc:	f7f2 f99c 	bl	8000638 <__aeabi_dmul>
 800e300:	4642      	mov	r2, r8
 800e302:	464b      	mov	r3, r9
 800e304:	f7f1 ffe2 	bl	80002cc <__adddf3>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	4630      	mov	r0, r6
 800e30e:	4639      	mov	r1, r7
 800e310:	f7f1 ffda 	bl	80002c8 <__aeabi_dsub>
 800e314:	4652      	mov	r2, sl
 800e316:	465b      	mov	r3, fp
 800e318:	f7f1 ffd6 	bl	80002c8 <__aeabi_dsub>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4620      	mov	r0, r4
 800e322:	4629      	mov	r1, r5
 800e324:	e7d9      	b.n	800e2da <__ieee754_log+0x27a>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	4650      	mov	r0, sl
 800e32c:	4659      	mov	r1, fp
 800e32e:	f7f1 ffcb 	bl	80002c8 <__aeabi_dsub>
 800e332:	ec53 2b18 	vmov	r2, r3, d8
 800e336:	f7f2 f97f 	bl	8000638 <__aeabi_dmul>
 800e33a:	4606      	mov	r6, r0
 800e33c:	460f      	mov	r7, r1
 800e33e:	2c00      	cmp	r4, #0
 800e340:	f43f af23 	beq.w	800e18a <__ieee754_log+0x12a>
 800e344:	a308      	add	r3, pc, #32	; (adr r3, 800e368 <__ieee754_log+0x308>)
 800e346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34a:	ec51 0b19 	vmov	r0, r1, d9
 800e34e:	f7f2 f973 	bl	8000638 <__aeabi_dmul>
 800e352:	a307      	add	r3, pc, #28	; (adr r3, 800e370 <__ieee754_log+0x310>)
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	4604      	mov	r4, r0
 800e35a:	460d      	mov	r5, r1
 800e35c:	ec51 0b19 	vmov	r0, r1, d9
 800e360:	e727      	b.n	800e1b2 <__ieee754_log+0x152>
 800e362:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e3b8 <__ieee754_log+0x358>
 800e366:	e694      	b.n	800e092 <__ieee754_log+0x32>
 800e368:	fee00000 	.word	0xfee00000
 800e36c:	3fe62e42 	.word	0x3fe62e42
 800e370:	35793c76 	.word	0x35793c76
 800e374:	3dea39ef 	.word	0x3dea39ef
 800e378:	55555555 	.word	0x55555555
 800e37c:	3fd55555 	.word	0x3fd55555
 800e380:	df3e5244 	.word	0xdf3e5244
 800e384:	3fc2f112 	.word	0x3fc2f112
 800e388:	96cb03de 	.word	0x96cb03de
 800e38c:	3fc74664 	.word	0x3fc74664
 800e390:	94229359 	.word	0x94229359
 800e394:	3fd24924 	.word	0x3fd24924
 800e398:	55555593 	.word	0x55555593
 800e39c:	3fe55555 	.word	0x3fe55555
 800e3a0:	d078c69f 	.word	0xd078c69f
 800e3a4:	3fc39a09 	.word	0x3fc39a09
 800e3a8:	1d8e78af 	.word	0x1d8e78af
 800e3ac:	3fcc71c5 	.word	0x3fcc71c5
 800e3b0:	9997fa04 	.word	0x9997fa04
 800e3b4:	3fd99999 	.word	0x3fd99999
	...
 800e3c0:	c3500000 	.word	0xc3500000
 800e3c4:	43500000 	.word	0x43500000
 800e3c8:	7fefffff 	.word	0x7fefffff
 800e3cc:	3ff00000 	.word	0x3ff00000
 800e3d0:	3fe00000 	.word	0x3fe00000

0800e3d4 <_init>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	bf00      	nop
 800e3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3da:	bc08      	pop	{r3}
 800e3dc:	469e      	mov	lr, r3
 800e3de:	4770      	bx	lr

0800e3e0 <_fini>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	bf00      	nop
 800e3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3e6:	bc08      	pop	{r3}
 800e3e8:	469e      	mov	lr, r3
 800e3ea:	4770      	bx	lr
